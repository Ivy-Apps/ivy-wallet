<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ArgumentListWrapping:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessors4ymijgaek646mzru18sdmblu7.kt$("detekt")</ID>
    <ID>ArgumentListWrapping:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$("reporting")</ID>
    <ID>ArgumentListWrapping:Accessorseessl0al0otcsbyqqruvoncpd.kt$("ext")</ID>
    <ID>ArgumentListWrapping:AccountModal.kt$( modal = AccountModalData( account = null, baseCurrency = "BGN", balance = 0.0 ), onCreateAccount = { }, onEditAccount = { _, _ -&gt; })</ID>
    <ID>ArgumentListWrapping:AccountModal.kt$(R.string.edit_account)</ID>
    <ID>ArgumentListWrapping:AccountModal.kt$(R.string.new_account)</ID>
    <ID>ArgumentListWrapping:AccountsTab.kt$( R.string.total, "BGN", "25.54" )</ID>
    <ID>ArgumentListWrapping:AccountsViewModel.kt$AccountsViewModel$( R.string.total, baseCurrencyCode, totalBalanceWithExcluded.format( baseCurrencyCode ) )</ID>
    <ID>ArgumentListWrapping:AmountModal.kt$( size = 52.dp, onClick = { calculatorModalVisible = true })</ID>
    <ID>ArgumentListWrapping:BackupLogic.kt$BackupLogic$( LocalDateTime::class.java, object : JsonDeserializer&lt;LocalDateTime?&gt; { @Throws(JsonParseException::class) override fun deserialize( json: JsonElement, type: Type?, jsonDeserializationContext: JsonDeserializationContext? ): LocalDateTime? { val instant: Instant = Instant.ofEpochMilli(json.asJsonPrimitive.asLong) return LocalDateTime.ofInstant(instant, ZoneOffset.UTC) } })</ID>
    <ID>ArgumentListWrapping:BackupLogic.kt$BackupLogic$( LocalDateTime::class.java, object : JsonSerializer&lt;LocalDateTime?&gt; { @Throws(JsonParseException::class) override fun serialize( src: LocalDateTime?, typeOfSrc: Type?, context: JsonSerializationContext? ): JsonElement { return JsonPrimitive(src!!.toEpochMilli().toString()) } })</ID>
    <ID>ArgumentListWrapping:BalanceViewModel.kt$BalanceViewModel$(ivyContext.startDayOfMonth)</ID>
    <ID>ArgumentListWrapping:BalanceViewModel.kt$BalanceViewModel$(period.toRange(ivyContext.startDayOfMonth))</ID>
    <ID>ArgumentListWrapping:BudgetModal.kt$(R.string.create_budget)</ID>
    <ID>ArgumentListWrapping:BudgetModal.kt$(R.string.edit_budget)</ID>
    <ID>ArgumentListWrapping:BufferBattery.kt$( R.string.left_to_spend)</ID>
    <ID>ArgumentListWrapping:CSVScreen.kt$( modifier = Modifier.horizontalScroll(rememberScrollState()), row = CSVRow(status.sampleValues), header = false, even = true )</ID>
    <ID>ArgumentListWrapping:CSVViewModel.kt$CSVViewModel$( initialValue = null, sampleCSV, amount, type, date, account, accountCurrency, )</ID>
    <ID>ArgumentListWrapping:CSVViewModel.kt$CSVViewModel$( initialValue = null, sampleCSV, category, title, description, )</ID>
    <ID>ArgumentListWrapping:CSVViewModel.kt$CSVViewModel$( initialValue = null, sampleCSV, toAccount, toAccountCurrency, toAmount, )</ID>
    <ID>ArgumentListWrapping:ChooseStartDateOfMonthModal.kt$(modifier = Modifier .size(48.dp) .clip(CircleShape) .border(2.dp, if (selected) Ivy else UI.colors.medium, CircleShape) .thenIf(selected) { background(Ivy, CircleShape) } .clickable { onClick(number) }, contentAlignment = Alignment.Center )</ID>
    <ID>ArgumentListWrapping:CustomExchangeRateCard.kt$( icon = R.drawable.ic_refresh, modifier = Modifier .padding(end = 16.dp) .clickable { onRefresh() })</ID>
    <ID>ArgumentListWrapping:DetektConfigurationAccessors.kt$( this, "detekt", dependencyNotation, dependencyConfiguration )</ID>
    <ID>ArgumentListWrapping:DetektPluginsConfigurationAccessors.kt$( this, "detektPlugins", dependencyNotation, dependencyConfiguration )</ID>
    <ID>ArgumentListWrapping:Exchange.kt$( baseCurrency, toCurrency )</ID>
    <ID>ArgumentListWrapping:FilterOverlay.kt$( acc1, acc2 )</ID>
    <ID>ArgumentListWrapping:FilterOverlay.kt$( placeable.width, placeable.height )</ID>
    <ID>ArgumentListWrapping:GitHubAutoBackupManager.kt$GitHubAutoBackupManager$( 6, TimeUnit.HOURS )</ID>
    <ID>ArgumentListWrapping:HomeHeader.kt$(R.string.cashflow, (if (cashflow &gt; 0) "+" else ""), cashflow.format(currency), currency)</ID>
    <ID>ArgumentListWrapping:HomeHeader.kt$(R.string.hi)</ID>
    <ID>ArgumentListWrapping:HomeHeader.kt$(R.string.hi_name, name)</ID>
    <ID>ArgumentListWrapping:HomeHeader.kt$(currency)</ID>
    <ID>ArgumentListWrapping:ItemStatisticScreen.kt$( baseCurrency, accounts, categories )</ID>
    <ID>ArgumentListWrapping:IvyBilling.kt$IvyBilling$("Acknowledge purchase result, code=${acknowledgeResult.responseCode}: ${acknowledgeResult.debugMessage}")</ID>
    <ID>ArgumentListWrapping:IvyChecklistTextField.kt$( modifier = Modifier .align(Alignment.CenterStart) .background(UI.colors.red) .padding(horizontal = 24.dp), value = TextFieldValue(), hint = "Hint", onValueChanged = {})</ID>
    <ID>ArgumentListWrapping:IvyChecklistTextField.kt$( modifier = Modifier .background(UI.colors.red) .padding(horizontal = 24.dp), value = TextFieldValue("Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light."), hint = "Hint", onValueChanged = {})</ID>
    <ID>ArgumentListWrapping:IvyChecklistTextField.kt$("Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light.")</ID>
    <ID>ArgumentListWrapping:IvyDescriptionTextField.kt$( modifier = Modifier .align(Alignment.CenterStart) .background(UI.colors.red) .padding(horizontal = 24.dp), value = TextFieldValue(), hint = "Hint", onValueChanged = {})</ID>
    <ID>ArgumentListWrapping:IvyDescriptionTextField.kt$( modifier = Modifier .background(UI.colors.red) .padding(horizontal = 24.dp), value = TextFieldValue("Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light."), hint = "Hint", onValueChanged = {})</ID>
    <ID>ArgumentListWrapping:IvyDescriptionTextField.kt$("Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light.")</ID>
    <ID>ArgumentListWrapping:IvyOutlinedTextField.kt$( modifier = Modifier.padding(horizontal = 24.dp), value = TextFieldValue(), hint = "Hint", onValueChanged = {})</ID>
    <ID>ArgumentListWrapping:IvyRoomDatabase.kt$IvyRoomDatabase.Companion$( applicationContext, IvyRoomDatabase::class.java, DB_NAME )</ID>
    <ID>ArgumentListWrapping:Loan.kt$Loan$( R.string.lent_uppercase)</ID>
    <ID>ArgumentListWrapping:LoanRecordModal.kt$( R.string.new_record)</ID>
    <ID>ArgumentListWrapping:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$("CREATE TABLE IF NOT EXISTS `wishlist_items` (`name` TEXT NOT NULL, `price` REAL NOT NULL, `accountId` TEXT NOT NULL, `categoryId` TEXT, `description` TEXT, `plannedDateTime` INTEGER, `orderNum` REAL NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>ArgumentListWrapping:Migration108to109_Users.kt$Migration108to109_Users$("CREATE TABLE IF NOT EXISTS `users` (`email` TEXT NOT NULL, `authProviderType` TEXT NOT NULL, `firstName` TEXT NOT NULL, `lastName` TEXT, `profilePicture` TEXT, `color` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>ArgumentListWrapping:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$("CREATE TABLE IF NOT EXISTS `transaction_recurring_rules` (`startDate` INTEGER, `intervalN` INTEGER, `intervalType` TEXT, `oneTime` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>ArgumentListWrapping:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$("CREATE TABLE IF NOT EXISTS `planned_payment_rules` (`startDate` INTEGER, `intervalN` INTEGER, `intervalType` TEXT, `oneTime` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>ArgumentListWrapping:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$("CREATE TABLE IF NOT EXISTS `exchange_rates` (`baseCurrency` TEXT NOT NULL, `currency` TEXT NOT NULL, `rate` REAL NOT NULL, PRIMARY KEY(`baseCurrency`, `currency`))")</ID>
    <ID>ArgumentListWrapping:Migration117to118_Budgets.kt$Migration117to118_Budgets$("CREATE TABLE IF NOT EXISTS `${tableName}` (`name` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryIdsSerialized` TEXT, `accountIdsSerialized` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `orderId` REAL NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>ArgumentListWrapping:Migration118to119_Loans.kt$Migration118to119_Loans$("CREATE TABLE IF NOT EXISTS `$LOANS_TABLE` (`name` TEXT NOT NULL, `amount` REAL NOT NULL, `type` TEXT NOT NULL, `color` INTEGER NOT NULL, `icon` TEXT, `orderNum` REAL NOT NULL, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>ArgumentListWrapping:Migration118to119_Loans.kt$Migration118to119_Loans$("CREATE TABLE IF NOT EXISTS `$LOAN_RECORDS_TABLE` (`loanId` TEXT NOT NULL, `amount` REAL NOT NULL, `note` TEXT, `dateTime` INTEGER NOT NULL, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>ArgumentListWrapping:OnboardingPrivacyTC.kt$("dragAmount=$dragAmount, offsetX=$offsetX, newOffsetX=$newOffsetX, maxOffset=$maxOffsetX")</ID>
    <ID>ArgumentListWrapping:OnboardingToolbar.kt$( hasSkip = true, onBack = {} )</ID>
    <ID>ArgumentListWrapping:PieChart.kt$PieChartView$( 0f, 0f, convertDpToPixel(context, 2 * RADIUS_DP), convertDpToPixel(context, 2 * RADIUS_DP) )</ID>
    <ID>ArgumentListWrapping:PieChartStatisticBottomBar.kt$(id = R.string.add_expense)</ID>
    <ID>ArgumentListWrapping:PieChartStatisticBottomBar.kt$(id = R.string.add_income)</ID>
    <ID>ArgumentListWrapping:PieChartStatisticScreen.kt$(R.string.expenses)</ID>
    <ID>ArgumentListWrapping:PlannedPaymentRuleDao.kt$PlannedPaymentRuleDao$("SELECT * FROM planned_payment_rules WHERE isDeleted = 0 AND oneTime = :oneTime ORDER BY amount DESC, startDate ASC")</ID>
    <ID>ArgumentListWrapping:RootActivity.kt$RootActivity$( Intent().apply { action = Intent.ACTION_SEND putExtra(Intent.EXTRA_STREAM, fileUri) type = "application/zip" }, null )</ID>
    <ID>ArgumentListWrapping:RootActivity.kt$RootActivity$( Intent().apply { action = Intent.ACTION_SEND putExtra(Intent.EXTRA_STREAM, fileUri) type = "text/csv" }, null )</ID>
    <ID>ArgumentListWrapping:RootActivity.kt$RootActivity$( Intent.EXTRA_SUBJECT, "Ivy Wallet Support Request #" + caseNumber + "0" + BuildConfig.VERSION_CODE )</ID>
    <ID>ArgumentListWrapping:RootActivity.kt$RootActivity$( this, executor, biometricPromptCallback )</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( R.string.confirm_all_userd_data_deletion, user?.email ?: stringResource( R.string.all_of_your_data ) )</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( R.string.delete_all_user_cloud_data_warning, user?.email ?: stringResource( R.string.your_account ) )</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$( R.string.delete_all_user_data_warning, user?.email ?: stringResource( R.string.your_account ) )</ID>
    <ID>ArgumentListWrapping:SettingsViewModel.kt$SettingsViewModel$("Settings - GOOGLE_SIGN_IN ERROR: generic exception when logging with GOOGLE")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId = :categoryId) AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId = :categoryId) AND type = :type AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId IS NULL) AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId IS NULL) AND type = :type AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND accountId = :accountId AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate AND recurringRuleId = :recurringRuleId ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate AND type = :type ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND (categoryId = :categoryId) ORDER BY dateTime DESC, dueDate ASC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND (categoryId IS NULL) ORDER BY dateTime DESC, dueDate ASC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND accountId = :accountId ORDER BY dateTime DESC, dueDate ASC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate ORDER BY dueDate ASC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND recurringRuleId = :recurringRuleId ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND toAccountId = :toAccountId AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and accountId = :accountId ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and accountId = :accountId and dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and toAccountId = :toAccountId ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and toAccountId = :toAccountId and dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>ArgumentListWrapping:TransactionDao.kt$TransactionDao$("UPDATE transactions SET isDeleted = 1, isSynced = 0 WHERE recurringRuleId = :recurringRuleId AND dateTime IS NULL")</ID>
    <ID>ArgumentListWrapping:ViewPager.kt$("onDragStopped(): velocity = $velocity, finalVelocity = $finalVelocity, currentPageOffset = ${state.currentPageOffset}")</ID>
    <ID>ChainWrapping:AmountFormatting.kt$||</ID>
    <ID>ChainWrapping:EditTransactionViewModel.kt$EditTransactionViewModel$&amp;&amp;</ID>
    <ID>ChainWrapping:ItemStatisticViewModel.kt$ItemStatisticViewModel$&amp;&amp;</ID>
    <ID>ChainWrapping:LoanRecordModal.kt$&amp;&amp;</ID>
    <ID>ChainWrapping:LoanTransactionsCore.kt$LoanTransactionsCore$||</ID>
    <ID>ChainWrapping:Screens.kt$EditPlanned$&amp;&amp;</ID>
    <ID>ClassNaming:Ivy_lintPlugin.kt$Ivy_lintPlugin : Plugin</ID>
    <ID>ClassNaming:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules : Migration</ID>
    <ID>ClassNaming:Migration106to107_Wishlist.kt$Migration106to107_Wishlist : Migration</ID>
    <ID>ClassNaming:Migration107to108_Sync.kt$Migration107to108_Sync : Migration</ID>
    <ID>ClassNaming:Migration108to109_Users.kt$Migration108to109_Users : Migration</ID>
    <ID>ClassNaming:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments : Migration</ID>
    <ID>ClassNaming:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule : Migration</ID>
    <ID>ClassNaming:Migration111to112_User_testUser.kt$Migration111to112_User_testUser : Migration</ID>
    <ID>ClassNaming:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates : Migration</ID>
    <ID>ClassNaming:Migration113to114_Multi_Currency.kt$Migration113to114_Multi_Currency : Migration</ID>
    <ID>ClassNaming:Migration114to115_Category_Account_Icons.kt$Migration114to115_Category_Account_Icons : Migration</ID>
    <ID>ClassNaming:Migration115to116_Account_Include_In_Balance.kt$Migration115to116_Account_Include_In_Balance : Migration</ID>
    <ID>ClassNaming:Migration116to117_SalteEdgeIntgration.kt$Migration116to117_SalteEdgeIntgration : Migration</ID>
    <ID>ClassNaming:Migration117to118_Budgets.kt$Migration117to118_Budgets : Migration</ID>
    <ID>ClassNaming:Migration118to119_Loans.kt$Migration118to119_Loans : Migration</ID>
    <ID>ClassNaming:Migration119to120_LoanTransactions.kt$Migration119to120_LoanTransactions : Migration</ID>
    <ID>ClassNaming:Migration120to121_DropWishlistItem.kt$Migration120to121_DropWishlistItem : Migration</ID>
    <ID>ClassNaming:Migration122to123_ExchangeRates.kt$Migration122to123_ExchangeRates : Migration</ID>
    <ID>CommentSpacing:AccValueFunctions.kt$AccountValueFunctions$//Account's transactions</ID>
    <ID>CommentSpacing:AccValueFunctions.kt$AccountValueFunctions$//potential transfer to account?</ID>
    <ID>CommentSpacing:AccValueFunctions.kt$AccountValueFunctions$//transfer to another account</ID>
    <ID>CommentSpacing:AccValueFunctions.kt$AccountValueFunctions$//transfer to self</ID>
    <ID>CommentSpacing:AccountByIdAct.kt$AccountByIdAct$//accountId</ID>
    <ID>CommentSpacing:AccountUploader.kt$AccountUploader$//Delete on server</ID>
    <ID>CommentSpacing:AccountUploader.kt$AccountUploader$//delete from local db</ID>
    <ID>CommentSpacing:AccountUploader.kt$AccountUploader$//flag as synced</ID>
    <ID>CommentSpacing:AccountUploader.kt$AccountUploader$//update</ID>
    <ID>CommentSpacing:AccountsTab.kt$//scroll hack</ID>
    <ID>CommentSpacing:AccountsViewModel.kt$AccountsViewModel$//this must be monthly</ID>
    <ID>CommentSpacing:AddTransactionWidget.kt$AddTransactionWidget$//--------------------------- &lt;/BROADCASTS&gt; ----------------------------------------------------</ID>
    <ID>CommentSpacing:AddTransactionWidgetClick.kt$AddTransactionWidgetClick$//============================= &lt;HANDLE&gt; =======================================================</ID>
    <ID>CommentSpacing:AddTransactionWidgetClick.kt$AddTransactionWidgetClick.Setup$//----------------------------- &lt;/SETUP&gt; -------------------------------------------------------</ID>
    <ID>CommentSpacing:AddTransactionWidgetClick.kt$AddTransactionWidgetClick.Setup$//------------------------------ &lt;SETUP&gt; -------------------------------------------------------</ID>
    <ID>CommentSpacing:AddTransactionWidgetClick.kt$AddTransactionWidgetClick.Setup$//============================= &lt;HANDLE&gt; =======================================================</ID>
    <ID>CommentSpacing:AddTransactionWidgetCompact.kt$AddTransactionWidgetCompact$//--------------------------- &lt;/BROADCASTS&gt; ----------------------------------------------------</ID>
    <ID>CommentSpacing:AmountFormatting.kt$//Display Formatting</ID>
    <ID>CommentSpacing:AmountFormatting.kt$//TODO: Review, might cause trouble when integrating crypto</ID>
    <ID>CommentSpacing:AnalyticsReportResponse.kt$AnalyticsReportResponse$//1-4 transaction per week</ID>
    <ID>CommentSpacing:AnalyticsReportResponse.kt$AnalyticsReportResponse$//5-13 transactions per week</ID>
    <ID>CommentSpacing:AnalyticsReportResponse.kt$AnalyticsReportResponse$//&gt;= 14 per week (2 transactions per day = 14 per week)</ID>
    <ID>CommentSpacing:AnalyticsReportResponse.kt$AnalyticsReportResponse$//Events -----------------------------------------------------</ID>
    <ID>CommentSpacing:AnalyticsReportResponse.kt$AnalyticsReportResponse$//Health</ID>
    <ID>CommentSpacing:AnalyticsReportResponse.kt$AnalyticsReportResponse$//KPIs</ID>
    <ID>CommentSpacing:AnalyticsReportResponse.kt$AnalyticsReportResponse$//User Stats</ID>
    <ID>CommentSpacing:AppLockedScreen.kt$//To automatically launch the biometric screen on load of this composable</ID>
    <ID>CommentSpacing:AppModuleDI.kt$AppModuleDI$//Sync</ID>
    <ID>CommentSpacing:BalanceScreen.kt$//preview</ID>
    <ID>CommentSpacing:BalanceViewModel.kt$BalanceViewModel$//+ positive if Income &gt; Expenses else - negative</ID>
    <ID>CommentSpacing:BudgetModal.kt$//add category</ID>
    <ID>CommentSpacing:BudgetModal.kt$//remove category</ID>
    <ID>CommentSpacing:BudgetScreen.kt$//preview</ID>
    <ID>CommentSpacing:BudgetScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:BudgetUploader.kt$BudgetUploader$//Delete on server</ID>
    <ID>CommentSpacing:BudgetUploader.kt$BudgetUploader$//delete from local db</ID>
    <ID>CommentSpacing:BudgetUploader.kt$BudgetUploader$//flag as synced</ID>
    <ID>CommentSpacing:BudgetUploader.kt$BudgetUploader$//update</ID>
    <ID>CommentSpacing:BudgetViewModel.kt$BudgetViewModel$//TODO: Re-work this by creating an FPAction for it</ID>
    <ID>CommentSpacing:BudgetViewModel.kt$BudgetViewModel$//decrement spent amount if it's not global budget</ID>
    <ID>CommentSpacing:BudgetViewModel.kt$BudgetViewModel$//ignore income</ID>
    <ID>CommentSpacing:BudgetViewModel.kt$BudgetViewModel$//ignore transfers for simplicity</ID>
    <ID>CommentSpacing:BudgetViewModel.kt$BudgetViewModel$//increment spent amount</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//+ 1 because we skip Header and +1 because they don't start from zero</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//As a fallback set all transactions 1 year before now</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Cannot save transactions with zero amount</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Cannot save transactions without any date</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Example: Fortune City</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Fortune City Date variations with 12-h (am/pm)</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Fortune City Date variations with 24-h</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Fortune City Date with "-" variations with 12-h (am/pm)</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Fortune City Date with "-" variations with 24-h</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//More Fortune City Date formats</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//Return Expense for intentionally set Type mapping to null</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//create new account</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter$//create new category</ID>
    <ID>CommentSpacing:CSVImporter.kt$CSVImporter.&lt;no name provided&gt;$//do nothing</ID>
    <ID>CommentSpacing:CSVImporterV2.kt$CSVImporterV2$//+ 1 because we skip Header and +1 because they don't start from zero</ID>
    <ID>CommentSpacing:CSVImporterV2.kt$CSVImporterV2$//Cannot save transactions with zero amount</ID>
    <ID>CommentSpacing:CSVImporterV2.kt$CSVImporterV2$//create new account</ID>
    <ID>CommentSpacing:CSVImporterV2.kt$CSVImporterV2$//create new category</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//14 - Don't map because it fcks up the sync with Insufficient Permission error</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//Don't map because it fcks up the sync with Insufficient Permission error</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//Monefy doesn't have transaction type, it uses amount +/- sign</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//Monefy doesn't have transaction type, it uses amount +/- sign,</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//Praseto - https://play.google.com/store/apps/details?id=com.realbyteapps.moneymanagerfree&amp;hl=en&amp;gl=US</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//Transfer Currency - 8</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//Wallet By BudgetBakers - https://play.google.com/store/apps/details?id=com.droid4you.application.wallet&amp;hl=en&amp;gl=US</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//category group = 7</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//converted amount = 5</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//currency = 6</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//exchangeRate = 6</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//set time = 2</ID>
    <ID>CommentSpacing:CSVMapper.kt$CSVMapper$//skip "Receive Currency"</ID>
    <ID>CommentSpacing:CSVViewModel.kt$CSVViewModel.&lt;no name provided&gt;$//do nothing</ID>
    <ID>CommentSpacing:CalculatorModal.kt$//handle only number expression formatting</ID>
    <ID>CommentSpacing:Card.kt$//Transaction history card</ID>
    <ID>CommentSpacing:CategoriesScreen.kt$//Divider</ID>
    <ID>CommentSpacing:CategoriesScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:CategoriesViewModel.kt$CategoriesViewModel$//this must be monthly</ID>
    <ID>CommentSpacing:CategoryCharts.kt$//add category</ID>
    <ID>CommentSpacing:CategoryCharts.kt$//remove category</ID>
    <ID>CommentSpacing:CategoryCharts.kt$//scroll hack</ID>
    <ID>CommentSpacing:CategoryUploader.kt$CategoryUploader$//Delete on server</ID>
    <ID>CommentSpacing:CategoryUploader.kt$CategoryUploader$//delete from local db</ID>
    <ID>CommentSpacing:CategoryUploader.kt$CategoryUploader$//flag as synced</ID>
    <ID>CommentSpacing:CategoryUploader.kt$CategoryUploader$//update</ID>
    <ID>CommentSpacing:ChartPeriod.kt$ChartPeriod$//end recursion</ID>
    <ID>CommentSpacing:ChartPeriod.kt$ChartPeriod$//not sure if this line is needed</ID>
    <ID>CommentSpacing:ChartPeriod.kt$ChartPeriod$//recurse</ID>
    <ID>CommentSpacing:ChartsViewModel.kt$ChartsViewModel$//Re-load categories</ID>
    <ID>CommentSpacing:ChartsViewModel.kt$ChartsViewModel$//TODO: Implement</ID>
    <ID>CommentSpacing:ChooseIconModal.kt$//RECURSE</ID>
    <ID>CommentSpacing:ChooseIconModal.kt$//end recursion</ID>
    <ID>CommentSpacing:ChooseIconModal.kt$//icon</ID>
    <ID>CommentSpacing:ChooseIconModal.kt$//recurse</ID>
    <ID>CommentSpacing:ChooseIconModal.kt$//recurse and reset acc</ID>
    <ID>CommentSpacing:ChooseIconModal.kt$//recurse by filling acc</ID>
    <ID>CommentSpacing:ChoosePeriodModal.kt$MonthYear$//current year</ID>
    <ID>CommentSpacing:ChoosePeriodModal.kt$MonthYear$//not current year</ID>
    <ID>CommentSpacing:CircleButtons.kt$//enlarge click area</ID>
    <ID>CommentSpacing:ColoredItemCard.kt$//Ivy Wallet's account + loans cards</ID>
    <ID>CommentSpacing:Colors.kt$//--------------------------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:Colors.kt$//Dark</ID>
    <ID>CommentSpacing:Colors.kt$//Light</ID>
    <ID>CommentSpacing:Colors.kt$//Primary</ID>
    <ID>CommentSpacing:Compose.kt$//Cannot use Modifier#then() because it stacks the previous modifiers multiple times</ID>
    <ID>CommentSpacing:Compose.kt$//consume click</ID>
    <ID>CommentSpacing:ComposeExt.kt$//consume click</ID>
    <ID>CommentSpacing:Constants.kt$Constants$//Time in seconds</ID>
    <ID>CommentSpacing:CurrencyPicker.kt$//Hint</ID>
    <ID>CommentSpacing:CustomerJourney.kt$//enlarge click area</ID>
    <ID>CommentSpacing:DateExt.kt$//this is if you want to display the Zone in the pattern</ID>
    <ID>CommentSpacing:DeleteAllData.kt$//Delete Button + Delete Confirmation Modal + Delete type</ID>
    <ID>CommentSpacing:DeleteItem.kt$//Delete Button + Delete Confirmation Modal</ID>
    <ID>CommentSpacing:DonateScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:DueTrnsInfoAct.kt$DueTrnsInfoAct$//We have due transactions in different currencies</ID>
    <ID>CommentSpacing:EditBottomSheet.kt$//+1 because Spacer width 24.dp</ID>
    <ID>CommentSpacing:EditBottomSheet.kt$//Accounts label</ID>
    <ID>CommentSpacing:EditBottomSheet.kt$//breaks UI tests</ID>
    <ID>CommentSpacing:EditBottomSheet.kt$//system stuff + keyboard padding</ID>
    <ID>CommentSpacing:EditContentCard.kt$//Ivy Wallet's "Edit" screen description card, created on, etc</ID>
    <ID>CommentSpacing:EditPlannedScreen.kt$//Create mode</ID>
    <ID>CommentSpacing:EditPlannedScreen.kt$//DO NOT display title suggestions for "Planned Payments"</ID>
    <ID>CommentSpacing:EditPlannedScreen.kt$//Flow Convert (Amount, Account, Category)</ID>
    <ID>CommentSpacing:EditPlannedScreen.kt$//Flow Empty</ID>
    <ID>CommentSpacing:EditPlannedScreen.kt$//Modals</ID>
    <ID>CommentSpacing:EditPlannedScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//Edit mode</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//Modals</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//Set exchangeRate to null to reset</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//Setting the transaction type to TransactionType.TRANSFER for transactions associated</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//This is to scroll the column to the customExchangeCard composable when it is shown</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//create new mode</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//due date stuff</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//has changes</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//no changes, pay</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//normal transaction</ID>
    <ID>CommentSpacing:EditTransactionScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:EditTransactionViewModel.kt$EditTransactionViewModel$//Reset Counter</ID>
    <ID>CommentSpacing:EditTransactionViewModel.kt$EditTransactionViewModel$//Select the newly created category</ID>
    <ID>CommentSpacing:EditTransactionViewModel.kt$EditTransactionViewModel$//This is used to when the transaction is associated with a loan/loan record,</ID>
    <ID>CommentSpacing:EditTransactionViewModel.kt$EditTransactionViewModel$//Used for optimising in updating all loan/loanRecords</ID>
    <ID>CommentSpacing:EditTransactionViewModel.kt$EditTransactionViewModel$//update last selected account</ID>
    <ID>CommentSpacing:EditTransactionViewModel.kt$EditTransactionViewModel$//use last selected account</ID>
    <ID>CommentSpacing:Exchange.kt$//Convert: toBaseCurrency -&gt; toToCurrency</ID>
    <ID>CommentSpacing:Exchange.kt$//exchange from base currency to other currency</ID>
    <ID>CommentSpacing:Exchange.kt$//exchange from other currency to base currency</ID>
    <ID>CommentSpacing:Exchange.kt$//exchange from other currency to other currency</ID>
    <ID>CommentSpacing:Exchange.kt$//exchange rate which &lt;= 0 is invalid!</ID>
    <ID>CommentSpacing:Exchange.kt$//fromCurrency = baseCurrency</ID>
    <ID>CommentSpacing:Exchange.kt$//that's the only possible case left because we already checked "fromCurrency == toCurrency"</ID>
    <ID>CommentSpacing:Exchange.kt$//toAmount = fromAmount * rateFromTo</ID>
    <ID>CommentSpacing:Exchange.kt$//toCurrency = baseCurrency</ID>
    <ID>CommentSpacing:Exchange.kt$//we need the rate from baseCurrency to toCurrency</ID>
    <ID>CommentSpacing:Exchange.kt$//we'll get the rate to</ID>
    <ID>CommentSpacing:ExchangeRatesLogic.kt$ExchangeRatesLogic$//convert to base currency</ID>
    <ID>CommentSpacing:ExchangeRatesLogic.kt$ExchangeRatesLogic$//helper</ID>
    <ID>CommentSpacing:ExchangeRatesLogic.kt$ExchangeRatesLogic$//no conversion</ID>
    <ID>CommentSpacing:ExchangeRatesLogic.kt$ExchangeRatesLogic$//no conversion needed, return amount</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Account</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Account Color</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Account Icon</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Account orderNum</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Amount</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Category</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Category Color</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Category Icon</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Currency</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Date</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Description</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Due Date</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//ID</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Receive Amount</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Receive Currency</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Title</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//To Account</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//To Account Color</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//To Account Icon</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//To Account orderNum</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Transfer Amount</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Transfer Currency</ID>
    <ID>CommentSpacing:ExportCSVLogic.kt$ExportCSVLogic$//Type</ID>
    <ID>CommentSpacing:FAB.kt$//Floating action button</ID>
    <ID>CommentSpacing:FetchAllTrnsFromServerAct.kt$FetchAllTrnsFromServerAct$//recurse</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//Remove keyword</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//add account</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//add category</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//add trn type</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//expand click area</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//filter duplicated</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//remove account</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//remove category</ID>
    <ID>CommentSpacing:FilterOverlay.kt$//remove trn type</ID>
    <ID>CommentSpacing:FromToTimeRange.kt$//make sure that it's in the future</ID>
    <ID>CommentSpacing:FromToTimeRange.kt$//make sure that it's in the past</ID>
    <ID>CommentSpacing:FromToTimeRange.kt$FromToTimeRange$//+1 day to ensure that everything is included</ID>
    <ID>CommentSpacing:FromToTimeRange.kt$FromToTimeRange$//-1 day to ensure that everything is included</ID>
    <ID>CommentSpacing:GesturesExt.kt$//dragAmount: positive when scrolling down; negative when scrolling up</ID>
    <ID>CommentSpacing:GesturesExt.kt$//offset &lt; 0 when swipe left</ID>
    <ID>CommentSpacing:GesturesExt.kt$//offset &lt; 0 when swipe up</ID>
    <ID>CommentSpacing:GesturesExt.kt$//offset &gt; 0 when swipe down</ID>
    <ID>CommentSpacing:GesturesExt.kt$//offset &gt; 0 when swipe right</ID>
    <ID>CommentSpacing:HomeHeader.kt$//Balance mini row</ID>
    <ID>CommentSpacing:HomeHeader.kt$//settings menu button spacer</ID>
    <ID>CommentSpacing:HomeMoreMenu.kt$//Background</ID>
    <ID>CommentSpacing:HomeMoreMenu.kt$//Second Row</ID>
    <ID>CommentSpacing:HomeMoreMenu.kt$//do nothing</ID>
    <ID>CommentSpacing:HomeTab.kt$&lt;no name provided&gt;$//To prevent unnecessary updates</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//-----------------------------------------------------------------</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//-----------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//Showing Balance fow 5s</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//TODO: Refactor</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//This method is used to restore the theme when user imports locally backed up data</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//doesn't have transactions lead him to adjust balance</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//has transactions show him "Balance" screen</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//transactions.forEach {</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//update exchange rates from POV of the new base currency</ID>
    <ID>CommentSpacing:HomeViewModel.kt$HomeViewModel$//}</ID>
    <ID>CommentSpacing:ImportFrom.kt$//last spacer</ID>
    <ID>CommentSpacing:ImportFrom.kt$//onboarding toolbar include paddingBottom 16.dp</ID>
    <ID>CommentSpacing:ImportInstructions.kt$//last spacer</ID>
    <ID>CommentSpacing:ImportInstructions.kt$//onboarding toolbar include paddingBottom 16.dp</ID>
    <ID>CommentSpacing:ImportResultUI.kt$//TODO: Implement "See failed imports"</ID>
    <ID>CommentSpacing:ImportViewModel.kt$ImportViewModel$//do nothing, disable back</ID>
    <ID>CommentSpacing:IncomeExpensesRow.kt$//Divider</ID>
    <ID>CommentSpacing:InputField.kt$//Log focus.triggerRecomposition so recomposition can be triggered</ID>
    <ID>CommentSpacing:InputField.kt$//Make sure we don't break the default new line action</ID>
    <ID>CommentSpacing:InputField.kt$//TODO: Fix bug where cursor color isn't updated after theme switch</ID>
    <ID>CommentSpacing:InputField.kt$//do nothing</ID>
    <ID>CommentSpacing:InputField.kt$//do nothing, no need to set input type</ID>
    <ID>CommentSpacing:InputField.kt$//ensure that the EditText is initialized</ID>
    <ID>CommentSpacing:InputField.kt$//hint text alignment cannot be set to EditText</ID>
    <ID>CommentSpacing:InputField.kt$//hint text size cannot be set to EditText</ID>
    <ID>CommentSpacing:InputField.kt$//restore original selection</ID>
    <ID>CommentSpacing:ItemDetailsScreen.kt$//Ivy Wallet's ItemStatisticsScreen()</ID>
    <ID>CommentSpacing:ItemIcon.kt$//2.dp is too small padding</ID>
    <ID>CommentSpacing:ItemIcon.kt$//32.dp - 24.dp = 8.dp / 4 = 2.dp</ID>
    <ID>CommentSpacing:ItemIcon.kt$//48.dp - 32.dp = 16.dp / 4 = 4.dp</ID>
    <ID>CommentSpacing:ItemIcon.kt$//64.dp - 48.dp = 16.dp / 4 = 4.dp</ID>
    <ID>CommentSpacing:ItemIcon.kt$//do nothing for the old format of icons</ID>
    <ID>CommentSpacing:ItemStatisticScreen.kt$//Rounded corners top effect</ID>
    <ID>CommentSpacing:ItemStatisticScreen.kt$//Unspecified</ID>
    <ID>CommentSpacing:ItemStatisticScreen.kt$//itemColor is displayed below the clip</ID>
    <ID>CommentSpacing:ItemStatisticScreen.kt$//preview</ID>
    <ID>CommentSpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$//History</ID>
    <ID>CommentSpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$//Overdue</ID>
    <ID>CommentSpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$//TODO: Rework Overdue to FP</ID>
    <ID>CommentSpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$//TODO: Rework Upcoming to FP</ID>
    <ID>CommentSpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$//Upcoming</ID>
    <ID>CommentSpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$//the server deletes transactions + planned payments for the account</ID>
    <ID>CommentSpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$//unspecifiedCategory==false is explicitly checked to accommodate for a temp AccountTransfers Category during Reports Screen</ID>
    <ID>CommentSpacing:IvyAndroidApp.kt$//I don't want strings.xml to handle something different than String at this point</ID>
    <ID>CommentSpacing:IvyColorPicker.kt$//Dark</ID>
    <ID>CommentSpacing:IvyColorPicker.kt$//Light</ID>
    <ID>CommentSpacing:IvyColorPicker.kt$//Primary</ID>
    <ID>CommentSpacing:IvyColorPicker.kt$//java.lang.IllegalStateException: pending composition has not been applied</ID>
    <ID>CommentSpacing:IvyColorPicker.kt$//listState.scrollToItem breaks the tests</ID>
    <ID>CommentSpacing:IvyColors.kt$//--------------------------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:IvyColors.kt$//Dark</ID>
    <ID>CommentSpacing:IvyColors.kt$//Light</ID>
    <ID>CommentSpacing:IvyColors.kt$//Primary</ID>
    <ID>CommentSpacing:IvyLineChart.kt$//24.dp</ID>
    <ID>CommentSpacing:IvyLineChart.kt$//Lerp: (start + x * (end - start)) = value</ID>
    <ID>CommentSpacing:IvyLineChart.kt$//TODO: Fix</ID>
    <ID>CommentSpacing:IvyLineChart.kt$//marginFromX //TODO: FIX</ID>
    <ID>CommentSpacing:IvyLineChart.kt$//recurse</ID>
    <ID>CommentSpacing:IvyLineChart.kt$//x * (end - start) = value - start</ID>
    <ID>CommentSpacing:IvyLineChart.kt$//x = (value - start) / (end - start)</ID>
    <ID>CommentSpacing:IvyModal.kt$//Bottom padding</ID>
    <ID>CommentSpacing:IvySwitch.kt$//Circle</ID>
    <ID>CommentSpacing:IvyViewPager.kt$//(-1f to 1f)</ID>
    <ID>CommentSpacing:IvyViewPager.kt$//Pages to pre-load</ID>
    <ID>CommentSpacing:IvyViewPager.kt$//current page</ID>
    <ID>CommentSpacing:IvyViewPager.kt$//next page</ID>
    <ID>CommentSpacing:IvyViewPager.kt$//next page (offset = 1f)</ID>
    <ID>CommentSpacing:IvyViewPager.kt$//previous page</ID>
    <ID>CommentSpacing:IvyViewPager.kt$//previous page (offset = -1f)</ID>
    <ID>CommentSpacing:IvyWalletCtx.kt$IvyWalletCtx$//---------------------- Optimization ----------------------------</ID>
    <ID>CommentSpacing:IvyWalletCtx.kt$IvyWalletCtx$//------------------------------------------ State ---------------------------------------------</ID>
    <ID>CommentSpacing:IvyWalletCtx.kt$IvyWalletCtx$//------------------------------------------- Navigation ----------------------------------------</ID>
    <ID>CommentSpacing:IvyWalletCtx.kt$IvyWalletCtx$//Activity help -------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:IvyWalletCtx.kt$IvyWalletCtx$//Testing --------------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:IvyWalletCtx.kt$IvyWalletCtx$//if (BuildConfig.DEBUG) Constants.PREMIUM_INITIAL_VALUE_DEBUG else false</ID>
    <ID>CommentSpacing:IvyWalletCtx.kt$IvyWalletCtx$//this is default value</ID>
    <ID>CommentSpacing:KPIs.kt$KPIs$//Paywall</ID>
    <ID>CommentSpacing:KPIs.kt$KPIs$//Premium</ID>
    <ID>CommentSpacing:Keyboard.kt$//callback as soon as the layout is set with whether the keyboard is open or not</ID>
    <ID>CommentSpacing:Keyboard.kt$//get init state of keyboard</ID>
    <ID>CommentSpacing:Keyboard.kt$//since the observer is hit quite often, only callback when there is a change.</ID>
    <ID>CommentSpacing:Keyboard.kt$//whenever the layout resizes/changes, callback with the state of the keyboard.</ID>
    <ID>CommentSpacing:LoanDetailsScreen.kt$//Rounded corners top effect</ID>
    <ID>CommentSpacing:LoanDetailsScreen.kt$//Spacer(modifier = Modifier.width(8.dp))</ID>
    <ID>CommentSpacing:LoanDetailsScreen.kt$//Support UI for Old Versions where</ID>
    <ID>CommentSpacing:LoanDetailsScreen.kt$//do Nothing</ID>
    <ID>CommentSpacing:LoanDetailsScreen.kt$//do nothing</ID>
    <ID>CommentSpacing:LoanDetailsScreen.kt$//itemColor is displayed below the clip</ID>
    <ID>CommentSpacing:LoanDetailsScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:LoanDetailsViewModel.kt$LoanDetailsViewModel$//Using a local variable to calculate the amount and then reassigning to</ID>
    <ID>CommentSpacing:LoanDetailsViewModel.kt$LoanDetailsViewModel$//close screen</ID>
    <ID>CommentSpacing:LoanModal.kt$//+1 because Spacer width 24.dp</ID>
    <ID>CommentSpacing:LoanModal.kt$//breaks UI tests</ID>
    <ID>CommentSpacing:LoanModal.kt$//enabled = nameTextFieldValue.text.isNotNullOrBlank() &amp;&amp; amount &gt; 0 &amp;&amp; ((createLoanTrans &amp;&amp; selectedAcc != null) || !createLoanTrans)</ID>
    <ID>CommentSpacing:LoanRecord.kt$LoanRecord$//This is used store the converted amount for currencies which are different from the loan account currency</ID>
    <ID>CommentSpacing:LoanRecordDTO.kt$LoanRecordDTO$//This is used store the converted amount for currencies which are different from the loan account currency</ID>
    <ID>CommentSpacing:LoanRecordEntity.kt$LoanRecordEntity$//This is used store the converted amount for currencies which are different from the loan account currency</ID>
    <ID>CommentSpacing:LoanRecordModal.kt$//+1 because Spacer width 24.dp</ID>
    <ID>CommentSpacing:LoanRecordModal.kt$//Unchecks the Recalculate Option if Recalculate Checkbox is not visible</ID>
    <ID>CommentSpacing:LoanRecordModal.kt$//breaks UI tests</ID>
    <ID>CommentSpacing:LoanRecordModal.kt$//enabled = amount &gt; 0 &amp;&amp; ((createLoanRecordTrans &amp;&amp; selectedAcc != null) || !createLoanRecordTrans)</ID>
    <ID>CommentSpacing:LoanRecordModal.kt$//fix broken tests</ID>
    <ID>CommentSpacing:LoanRecordUploader.kt$LoanRecordUploader$//Delete on server</ID>
    <ID>CommentSpacing:LoanRecordUploader.kt$LoanRecordUploader$//delete from local db</ID>
    <ID>CommentSpacing:LoanRecordUploader.kt$LoanRecordUploader$//flag as synced</ID>
    <ID>CommentSpacing:LoanRecordUploader.kt$LoanRecordUploader$//update</ID>
    <ID>CommentSpacing:LoanService.kt$LoanService$//LOAN RECORDS ----------------------------------------------------------------</ID>
    <ID>CommentSpacing:LoanUploader.kt$LoanUploader$//Delete on server</ID>
    <ID>CommentSpacing:LoanUploader.kt$LoanUploader$//delete from local db</ID>
    <ID>CommentSpacing:LoanUploader.kt$LoanUploader$//flag as synced</ID>
    <ID>CommentSpacing:LoanUploader.kt$LoanUploader$//update</ID>
    <ID>CommentSpacing:LoansScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//+ &amp; x button</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//24.dp</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//80.dp</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//Add EXPENSE ------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//Add TRANSFER ----------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//Click area</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//consume click</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//consume click, do nothing</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//prevent double open of the screen</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//swipe up</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//swipe up left</ID>
    <ID>CommentSpacing:MainBottomBar.kt$//swipe up right</ID>
    <ID>CommentSpacing:MainViewModel.kt$MainViewModel$//Exiting (the backstack will close the app)</ID>
    <ID>CommentSpacing:MainViewModel.kt$MainViewModel$//Sync exchange rates</ID>
    <ID>CommentSpacing:MainViewModel.kt$MainViewModel$//sync app data</ID>
    <ID>CommentSpacing:MoreInfo.kt$//More Info Button + Info Modal</ID>
    <ID>CommentSpacing:MoreMenu.kt$//Ivy Wallet's Home More menu</ID>
    <ID>CommentSpacing:OnboardingPrivacyTC.kt$//24+8=32.dp</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 0 - Splash ----------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 0 -------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 1 - Login -----------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 1 -------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 2 - Choose path -----------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 2 -------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 3 - Currency --------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 3 -------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 4 - Accounts --------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 4 -------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 5 - Categories ------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//------------------------------------- Step 5 -------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//-------------------------------------- Routes ------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//Route logged user</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//Route new user</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//do nothing, consume back</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//fresh user</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//let the user exit the app</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//the rest below is not UI stuff so I don't care</ID>
    <ID>CommentSpacing:OnboardingRouter.kt$OnboardingRouter$//user with Ivy account</ID>
    <ID>CommentSpacing:OnboardingToolbar.kt$//enlarge click area</ID>
    <ID>CommentSpacing:OnboardingViewModel.kt$OnboardingViewModel$//--------------------- Accounts ---------------------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingViewModel.kt$OnboardingViewModel$//---------------------------- Categories ------------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingViewModel.kt$OnboardingViewModel$//Only OnboardingRouter stuff</ID>
    <ID>CommentSpacing:OnboardingViewModel.kt$OnboardingViewModel$//Step 1 ---------------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingViewModel.kt$OnboardingViewModel$//Step 2 ---------------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:OnboardingViewModel.kt$OnboardingViewModel$//reset login with Google operation state</ID>
    <ID>CommentSpacing:PaywallLogic.kt$PaywallLogic$//+1 for the account being added</ID>
    <ID>CommentSpacing:PaywallLogic.kt$PaywallLogic$//+1 for the category being added</ID>
    <ID>CommentSpacing:PaywallLogic.kt$PaywallLogic$//+1 for the item being added</ID>
    <ID>CommentSpacing:PaywallScreen.kt$//16.dp padding from IvyToolbar already =&gt; 24.dp - 16.dp = 8.dp</ID>
    <ID>CommentSpacing:PaywallScreen.kt$//last item spacer</ID>
    <ID>CommentSpacing:PeriodSelector.kt$//preview</ID>
    <ID>CommentSpacing:PieChart.kt$PieChartView$//draw</ID>
    <ID>CommentSpacing:PieChartAct.kt$PieChartAct$//for unspecified</ID>
    <ID>CommentSpacing:PieChartStatisticScreen.kt$//Balance mini row</ID>
    <ID>CommentSpacing:PieChartStatisticScreen.kt$//Unspecified category = Gray</ID>
    <ID>CommentSpacing:PieChartStatisticScreen.kt$//no selectedCategory</ID>
    <ID>CommentSpacing:PieChartStatisticScreen.kt$//preview</ID>
    <ID>CommentSpacing:PieChartStatisticScreen.kt$//scroll hack</ID>
    <ID>CommentSpacing:PieChartStatisticScreen.kt$//selectedCategory &amp;&amp; we're selected</ID>
    <ID>CommentSpacing:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$//Delete on server</ID>
    <ID>CommentSpacing:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$//delete from local db</ID>
    <ID>CommentSpacing:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$//flag as synced</ID>
    <ID>CommentSpacing:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$//update</ID>
    <ID>CommentSpacing:PlannedPaymentsGenerator.kt$PlannedPaymentsGenerator$//delete all not happened transactions</ID>
    <ID>CommentSpacing:PlannedPaymentsGenerator.kt$PlannedPaymentsGenerator$//generate transaction</ID>
    <ID>CommentSpacing:PlannedPaymentsGenerator.kt$PlannedPaymentsGenerator$//skip first N happened transactions</ID>
    <ID>CommentSpacing:PlannedPaymentsLazyColumn.kt$//last spacer - scroll hack</ID>
    <ID>CommentSpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$//0.03%</ID>
    <ID>CommentSpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$//0.22%</ID>
    <ID>CommentSpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$//delete paid oneTime planned payment rules</ID>
    <ID>CommentSpacing:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$//One Time</ID>
    <ID>CommentSpacing:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$//Recurring</ID>
    <ID>CommentSpacing:PlansSheet.kt$//Lifetime plan</ID>
    <ID>CommentSpacing:PlansSheet.kt$//Subscription</ID>
    <ID>CommentSpacing:PreloadDataLogic.kt$PreloadDataLogic$//Preload data only if the user has less than 2 accounts</ID>
    <ID>CommentSpacing:RecurringRuleModal.kt$//One-time &amp; Multiple Times</ID>
    <ID>CommentSpacing:ReorderModal.kt$//It's first in it's priority</ID>
    <ID>CommentSpacing:ReorderModal.kt$//It's last in it's priority</ID>
    <ID>CommentSpacing:ReorderModal.kt$//Ivy Wallet's reorder modal</ID>
    <ID>CommentSpacing:ReportScreen.kt$//Export CSV</ID>
    <ID>CommentSpacing:ReportScreen.kt$//Filter</ID>
    <ID>CommentSpacing:ReportScreen.kt$//consume clicks</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//!NOTE: Amount must be converted to baseCurrency amount</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Accounts</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Amount</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Categories</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Excluded Keywords</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Included Keywords</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Time Period</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Transaction Type</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Overdue</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Transfers In</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Transfers Out</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Upcoming</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//clear filter</ID>
    <ID>CommentSpacing:RestClient.kt$RestClient.Companion$//Add AUTH headers</ID>
    <ID>CommentSpacing:RestClient.kt$RestClient.Companion$//Handle Server errors</ID>
    <ID>CommentSpacing:RestClient.kt$RestClient.Companion$//Session not initialized, yet - do nothing</ID>
    <ID>CommentSpacing:RestClient.kt$RestClient.Companion$//TODO: SECURITY - Considering trusting only Ivy's cert</ID>
    <ID>CommentSpacing:RootActivity.kt$RootActivity$//Helpers for Compose UI</ID>
    <ID>CommentSpacing:RootActivity.kt$RootActivity$//display nothing</ID>
    <ID>CommentSpacing:RootActivity.kt$RootActivity$//month-1 because LocalDate start from 1 and date picker starts from 0</ID>
    <ID>CommentSpacing:RootViewModel.kt$RootViewModel$//App Lock &amp; UserInactivity --------------------------------------------------------------------</ID>
    <ID>CommentSpacing:RootViewModel.kt$RootViewModel$//by default we assume that the app is locked</ID>
    <ID>CommentSpacing:RootViewModel.kt$RootViewModel$//initial app locked state</ID>
    <ID>CommentSpacing:Screens.kt$EditTransaction$//extras</ID>
    <ID>CommentSpacing:SearchScreen.kt$//add keyboard height margin at bototm so the list can scroll to bottom</ID>
    <ID>CommentSpacing:SearchScreen.kt$//enlarge click area</ID>
    <ID>CommentSpacing:SearchScreen.kt$//scroll to top when transactions are changed</ID>
    <ID>CommentSpacing:SelectedCategory.kt$SelectedCategory$//null - Unspecified</ID>
    <ID>CommentSpacing:SettingsScreen.kt$//Spacer(Modifier.weight(1f))</ID>
    <ID>CommentSpacing:SettingsScreen.kt$//last item spacer</ID>
    <ID>CommentSpacing:SettingsScreen.kt$//not synced</ID>
    <ID>CommentSpacing:SettingsScreen.kt$//onboarding toolbar include paddingBottom 16.dp</ID>
    <ID>CommentSpacing:SettingsScreen.kt$//synced</ID>
    <ID>CommentSpacing:SettingsViewModel.kt$SettingsViewModel$//go to home screen</ID>
    <ID>CommentSpacing:SettingsViewModel.kt$SettingsViewModel$//wait for sync to finish</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//----------------------------- App Settings -----------------------------------------------</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//----------------------------- Others -----------------------------------------------</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//-------------------------------- Bank Integrations temp ----------------------------------</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//-------------------------------- Customer Journey ----------------------------------------</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//-------------------------------------- UX ------------------------------------------------</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//-----------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//------------------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//Analytics</ID>
    <ID>CommentSpacing:SharedPrefs.kt$SharedPrefs.Companion$//Sync</ID>
    <ID>CommentSpacing:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$//all titles used for the specific account</ID>
    <ID>CommentSpacing:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$//all titles used for the specific category</ID>
    <ID>CommentSpacing:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$//exclude already suggested suggestions so they're ordered by priority at the end</ID>
    <ID>CommentSpacing:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$//last resort, suggest by account</ID>
    <ID>CommentSpacing:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$//ordered by N times used</ID>
    <ID>CommentSpacing:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$//suggest by category</ID>
    <ID>CommentSpacing:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$//suggest by title</ID>
    <ID>CommentSpacing:Switch.kt$//Circle</ID>
    <ID>CommentSpacing:TimePeriod.kt$TimePeriod$//e.g. Correct: 14.10-13.11 (Incorrect: 14.10-14.11)</ID>
    <ID>CommentSpacing:TimePeriod.kt$TimePeriod$//not this year</ID>
    <ID>CommentSpacing:TimePeriod.kt$TimePeriod$//startDayOfMonth != 1 just shift N day the month forward so to should +1 month</ID>
    <ID>CommentSpacing:TimePeriod.kt$TimePeriod$//this year</ID>
    <ID>CommentSpacing:TimePeriod.kt$TimePeriod.Companion$//Examples month = Nov. startDate = 7; Period = from Nov (7) till Dec (6)</ID>
    <ID>CommentSpacing:TimePeriod.kt$TimePeriod.Companion$//new monthly period has already started then observe it =&gt; current month</ID>
    <ID>CommentSpacing:TimePeriod.kt$TimePeriod.Companion$//new monthly period hasn't yet started then observe the ongoing one =&gt; previous month</ID>
    <ID>CommentSpacing:Title.kt$//scroll to top for better UX</ID>
    <ID>CommentSpacing:Toolbar.kt$//show nothing</ID>
    <ID>CommentSpacing:Transaction.kt$Transaction$//TODO: Remove default values &amp; introduce Transaction#dummy() method</ID>
    <ID>CommentSpacing:Transaction.kt$Transaction$//This refers to the loan id that is linked with a transaction</ID>
    <ID>CommentSpacing:Transaction.kt$Transaction$//This refers to the loan record id that is linked with a transaction</ID>
    <ID>CommentSpacing:TransactionCard.kt$//Normal Expense</ID>
    <ID>CommentSpacing:TransactionCard.kt$//Overdue Expense</ID>
    <ID>CommentSpacing:TransactionCard.kt$//Pay/Get button</ID>
    <ID>CommentSpacing:TransactionCard.kt$//TODO: Optimize this</ID>
    <ID>CommentSpacing:TransactionCard.kt$//Transfer</ID>
    <ID>CommentSpacing:TransactionCard.kt$//Upcoming Expense</ID>
    <ID>CommentSpacing:TransactionDTO.kt$TransactionDTO$//This refers to the loan id that is linked with a transaction</ID>
    <ID>CommentSpacing:TransactionDTO.kt$TransactionDTO$//This refers to the loan record id that is linked with a transaction</ID>
    <ID>CommentSpacing:TransactionDao.kt$TransactionDao$//Smart Title Suggestions</ID>
    <ID>CommentSpacing:TransactionEntity.kt$TransactionEntity$//Set isSynced &amp;&amp; isDeleted to false so they aren't accounted in the equals check</ID>
    <ID>CommentSpacing:TransactionEntity.kt$TransactionEntity$//This refers to the loan id that is linked with a transaction</ID>
    <ID>CommentSpacing:TransactionEntity.kt$TransactionEntity$//This refers to the loan record id that is linked with a transaction</ID>
    <ID>CommentSpacing:TransactionReminderLogic.kt$TransactionReminderLogic$//8 PM has passed, we'll start reminding from tomorrow</ID>
    <ID>CommentSpacing:TransactionReminderLogic.kt$TransactionReminderLogic$//8 PM is in the future, we can start reminder today</ID>
    <ID>CommentSpacing:TransactionReminderWorker.kt$TransactionReminderWorker$//Double check is needed because the user can switch off notifications in settings after it has been scheduled to show notifications for the next day</ID>
    <ID>CommentSpacing:TransactionReminderWorker.kt$TransactionReminderWorker$//Have less than 1 two transactions today, remind them</ID>
    <ID>CommentSpacing:TransactionUploader.kt$TransactionUploader$//Delete on server</ID>
    <ID>CommentSpacing:TransactionUploader.kt$TransactionUploader$//delete from local db</ID>
    <ID>CommentSpacing:TransactionUploader.kt$TransactionUploader$//flag as synced</ID>
    <ID>CommentSpacing:TransactionUploader.kt$TransactionUploader$//update</ID>
    <ID>CommentSpacing:TransactionViewModel.kt$TransactionViewModel$//TODO: Handle properly transfers exchange rate</ID>
    <ID>CommentSpacing:TransactionViewModel.kt$TransactionViewModel$//TODO: Handle transfers properly</ID>
    <ID>CommentSpacing:TransactionViewModel.kt$TransactionViewModel$//TRANSFER w/o toAccount</ID>
    <ID>CommentSpacing:Transactions.kt$//guard</ID>
    <ID>CommentSpacing:Transactions.kt$//last spacer - scroll hack</ID>
    <ID>CommentSpacing:TrnByIdAct.kt$TrnByIdAct$//transactionId</ID>
    <ID>CommentSpacing:TrnDateDividers.kt$//this case shouldn't happen</ID>
    <ID>CommentSpacing:TrnEvent.kt$TrnEvent$//----------------------------</ID>
    <ID>CommentSpacing:TrnState.kt$TrnState.NewTransaction$//--------------------------</ID>
    <ID>CommentSpacing:TrnState.kt$TrnState.NewTransaction$//Transfers</ID>
    <ID>CommentSpacing:UIExt.kt$//callback as soon as the layout is set with whether the keyboard is open or not</ID>
    <ID>CommentSpacing:UIExt.kt$//get init state of keyboard</ID>
    <ID>CommentSpacing:UIExt.kt$//since the observer is hit quite often, only callback when there is a change.</ID>
    <ID>CommentSpacing:UIExt.kt$//whenever the layout resizes/changes, callback with the state of the keyboard.</ID>
    <ID>CommentSpacing:ViewPager.kt$//0f to 1f</ID>
    <ID>CommentSpacing:ViewPager.kt$//page appears</ID>
    <ID>CommentSpacing:ViewPager.kt$//page disappears</ID>
    <ID>CommentSpacing:ViewPager.kt$//pageOffset &lt;0 when moving forward</ID>
    <ID>CommentSpacing:WalletAccountLogic.kt$WalletAccountLogic$//TODO: Remove this once Bank Integration trn sync is properly implemented</ID>
    <ID>CommentSpacing:WalletAccountLogic.kt$WalletAccountLogic$//add expense</ID>
    <ID>CommentSpacing:WalletAccountLogic.kt$WalletAccountLogic$//add income</ID>
    <ID>CommentSpacing:WalletAccountLogic.kt$WalletAccountLogic$//transfer out</ID>
    <ID>CommentSpacing:WalletAccountLogic.kt$WalletAccountLogic$//transfers in</ID>
    <ID>CommentSpacing:WalletCategoryLogic.kt$WalletCategoryLogic$//TODO: Transfer zero operation</ID>
    <ID>CommentSpacing:WalletCharts.kt$//recurse</ID>
    <ID>CommentSpacing:WalletCharts.kt$//scroll hack</ID>
    <ID>CommentSpacing:WalletValueFunctions.kt$WalletValueFunctions$//Do not remove copy()</ID>
    <ID>CommentSpacing:WebViewScreen.kt$//Activate Dark mode if the user uses Dark theme &amp; it's supported</ID>
    <ID>CommentSpacing:WebViewScreen.kt$//Android WebView should not be a in a scroll container :/</ID>
    <ID>CommentSpacing:WebViewScreen.kt$//Chrome Client is compatible with most of websites</ID>
    <ID>CommentSpacing:WebViewScreen.kt$//because anchor links doesn't work</ID>
    <ID>CommentSpacing:WebViewScreen.kt$//https://stackoverflow.com/questions/3039555/android-webview-anchor-link-jump-link-not-working</ID>
    <ID>CommentSpacing:WrapContentRow.kt$//Reset x</ID>
    <ID>CommentSpacing:WrapContentRow.kt$//item is overflowing -&gt; move it to a new row</ID>
    <ID>CommentSpacing:build.gradle.kts$//-------------------------------------------------------</ID>
    <ID>CommentSpacing:build.gradle.kts$//Exclude this files so Jetpack Compose UI tests can build</ID>
    <ID>CommentSpacing:build.gradle.kts$//Must match kotlinVersion from dependencies.kt</ID>
    <ID>CommentSpacing:build.gradle.kts$//Required by Kotest</ID>
    <ID>CommentSpacing:build.gradle.kts$//URL: https://developers.google.com/android/guides/google-services-plugin</ID>
    <ID>CommentSpacing:build.gradle.kts$//https://mvnrepository.com/artifact/com.android.tools.build/gradle?repo=google</ID>
    <ID>CommentSpacing:dependencies.kt$//---------------------------------------------------------------------------------</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://developer.android.com/jetpack/androidx/releases/core</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://developer.android.com/jetpack/androidx/releases/recyclerview</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://developer.android.com/jetpack/androidx/releases/work</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://developer.android.com/training/dependency-injection/hilt-jetpack#workmanager</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/JakeWharton/timber/releases</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/airbnb/lottie-android</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/google/gson</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/greenrobot/EventBus/releases</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/jeziellago/compose-markdown</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/notKamui/Keval - evaluate math expressions (calculator)</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://github.com/square/retrofit</ID>
    <ID>CommentSpacing:dependencies.kt$//URL: https://mvnrepository.com/artifact/androidx.hilt/hilt-lifecycle-viewmodel?repo=google</ID>
    <ID>CommentSpacing:dependencies.kt$//https://developer.android.com/jetpack/androidx/releases/appcompat</ID>
    <ID>CommentSpacing:dependencies.kt$Project$//App</ID>
    <ID>CommentSpacing:dependencies.kt$Project$//Compile SDK &amp; Build Tools</ID>
    <ID>CommentSpacing:dependencies.kt$Project$//Version</ID>
    <ID>ComplexCondition:AnalyticsReportScreen.kt$loading || onboardingReport == null || kpis == null || health == null || userStats == null</ID>
    <ID>ComplexCondition:EditTransactionViewModel.kt$EditTransactionViewModel$customExchangeRateState.value.showCard &amp;&amp; toAccCurrencyCode == customExchangeRateState.value.toCurrencyCode &amp;&amp; fromAccCurrencyCode == customExchangeRateState.value.fromCurrencyCode &amp;&amp; !resetRate</ID>
    <ID>ComplexCondition:Transactions.kt$(upcoming == null || upcoming.trns.isEmpty()) &amp;&amp; (overdue == null || overdue.trns.isEmpty()) &amp;&amp; history.isEmpty()</ID>
    <ID>ComposableNaming:Compose.kt$onEvent</ID>
    <ID>ComposableNaming:ComposeExt.kt$onScreenStart</ID>
    <ID>ComposableNaming:Keyboard.kt$hideKeyboard</ID>
    <ID>ComposableNaming:Keyboard.kt$showKeyboard</ID>
    <ID>ComposableNaming:UIExt.kt$setStatusBarDarkTextCompat</ID>
    <ID>ComposableParamOrder:AddKeywordModal.kt$AddKeywordModal</ID>
    <ID>ComposableParamOrder:AmountModal.kt$AmountKeyboard</ID>
    <ID>ComposableParamOrder:AmountModal.kt$AmountModal</ID>
    <ID>ComposableParamOrder:AmountModal.kt$KeypadCircleButton</ID>
    <ID>ComposableParamOrder:BackBottomBar.kt$BackBottomBar</ID>
    <ID>ComposableParamOrder:BalanceRow.kt$BalanceRow</ID>
    <ID>ComposableParamOrder:BalanceRow.kt$BalanceRowMedium</ID>
    <ID>ComposableParamOrder:BalanceRow.kt$BalanceRowMini</ID>
    <ID>ComposableParamOrder:BudgetBattery.kt$BudgetBattery</ID>
    <ID>ComposableParamOrder:BudgetScreen.kt$NoBudgetsEmptyState</ID>
    <ID>ComposableParamOrder:BufferBattery.kt$BufferBattery</ID>
    <ID>ComposableParamOrder:Button.kt$Button</ID>
    <ID>ComposableParamOrder:ButtonWithIcon.kt$Button</ID>
    <ID>ComposableParamOrder:CalculatorModal.kt$CalculatorModal</ID>
    <ID>ComposableParamOrder:CategoriesScreen.kt$AddedSpent</ID>
    <ID>ComposableParamOrder:CategoriesScreen.kt$SortModal</ID>
    <ID>ComposableParamOrder:CategoryCharts.kt$CategoriesChart</ID>
    <ID>ComposableParamOrder:ChangeTransactionTypeModal.kt$ChangeTransactionTypeModal</ID>
    <ID>ComposableParamOrder:ChartsScreen.kt$ChartButton</ID>
    <ID>ComposableParamOrder:Checkbox.kt$Checkbox</ID>
    <ID>ComposableParamOrder:Checkbox.kt$CheckboxWithText</ID>
    <ID>ComposableParamOrder:ChooseCategoryModal.kt$ChooseCategoryModal</ID>
    <ID>ComposableParamOrder:ChooseIconModal.kt$ChooseIconModal</ID>
    <ID>ComposableParamOrder:ChoosePeriodModal.kt$MonthButton</ID>
    <ID>ComposableParamOrder:ChooseStartDateOfMonthModal.kt$ChooseStartDateOfMonthModal</ID>
    <ID>ComposableParamOrder:CircleButtons.kt$CircleButton</ID>
    <ID>ComposableParamOrder:CircleButtons.kt$CircleButtonFilled</ID>
    <ID>ComposableParamOrder:CircleButtons.kt$CircleButtonFilledGradient</ID>
    <ID>ComposableParamOrder:CurrencyPicker.kt$CurrencyPicker</ID>
    <ID>ComposableParamOrder:CustomExchangeRateCard.kt$CustomExchangeRateCard</ID>
    <ID>ComposableParamOrder:DeleteModal.kt$DeleteModal</ID>
    <ID>ComposableParamOrder:DescriptionModal.kt$DescriptionModal</ID>
    <ID>ComposableParamOrder:EditBottomSheet.kt$AccountsRow</ID>
    <ID>ComposableParamOrder:EditBottomSheet.kt$Amount</ID>
    <ID>ComposableParamOrder:EditBottomSheet.kt$EditBottomSheet</ID>
    <ID>ComposableParamOrder:EditPlannedScreen.kt$UI</ID>
    <ID>ComposableParamOrder:EditTransactionScreen.kt$UI</ID>
    <ID>ComposableParamOrder:FilterOverlay.kt$TypeFilterCheckbox</ID>
    <ID>ComposableParamOrder:GradientCut.kt$GradientCutTop</ID>
    <ID>ComposableParamOrder:HomeHeader.kt$CashFlowInfo</ID>
    <ID>ComposableParamOrder:HomeHeader.kt$HeaderStickyRow</ID>
    <ID>ComposableParamOrder:HomeHeader.kt$HomeHeader</ID>
    <ID>ComposableParamOrder:HomeTab.kt$HomeLazyColumn</ID>
    <ID>ComposableParamOrder:IconButton.kt$IconButton</ID>
    <ID>ComposableParamOrder:ImportInstructions.kt$InstructionButton</ID>
    <ID>ComposableParamOrder:IncomeExpensesRow.kt$IncomeExpensesRow</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIcon</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconL</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconM</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconMDefaultIcon</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconS</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconSDefaultIcon</ID>
    <ID>ComposableParamOrder:ItemStatisticScreen.kt$Header</ID>
    <ID>ComposableParamOrder:ItemStatisticScreen.kt$UI</ID>
    <ID>ComposableParamOrder:IvyBasicTextField.kt$IvyBasicTextField</ID>
    <ID>ComposableParamOrder:IvyBorderButton.kt$IvyBorderButton</ID>
    <ID>ComposableParamOrder:IvyButton.kt$IvyButton</ID>
    <ID>ComposableParamOrder:IvyCheckbox.kt$IvyCheckbox</ID>
    <ID>ComposableParamOrder:IvyCheckbox.kt$IvyCheckboxWithText</ID>
    <ID>ComposableParamOrder:IvyChecklistTextField.kt$IvyChecklistTextField</ID>
    <ID>ComposableParamOrder:IvyCircleButton.kt$IvyCircleButton</ID>
    <ID>ComposableParamOrder:IvyDescriptionTextField.kt$IvyDescriptionTextField</ID>
    <ID>ComposableParamOrder:IvyIcon.kt$IvyIcon</ID>
    <ID>ComposableParamOrder:IvyIcon.kt$IvyIconScaled</ID>
    <ID>ComposableParamOrder:IvyLineChart.kt$IvyLineChart</ID>
    <ID>ComposableParamOrder:IvyModal.kt$IvyModal</ID>
    <ID>ComposableParamOrder:IvyModalComponents.kt$ModalCheck</ID>
    <ID>ComposableParamOrder:IvyModalComponents.kt$ModalDynamicPrimaryAction</ID>
    <ID>ComposableParamOrder:IvyModalComponents.kt$ModalPositiveButton</ID>
    <ID>ComposableParamOrder:IvyNameTextFieldValue.kt$IvyNameTextField</ID>
    <ID>ComposableParamOrder:IvyNumberTextField.kt$IvyNumberTextField</ID>
    <ID>ComposableParamOrder:IvyOutlinedButton.kt$IvyOutlinedButton</ID>
    <ID>ComposableParamOrder:IvyOutlinedButton.kt$IvyOutlinedButtonFillMaxWidth</ID>
    <ID>ComposableParamOrder:IvyOutlinedTextField.kt$IvyOutlinedTextField</ID>
    <ID>ComposableParamOrder:IvySwitch.kt$IvySwitch</ID>
    <ID>ComposableParamOrder:IvyText.kt$IvyText</ID>
    <ID>ComposableParamOrder:IvyTitleTextField.kt$IvyTitleTextField</ID>
    <ID>ComposableParamOrder:LoanDetailsScreen.kt$Header</ID>
    <ID>ComposableParamOrder:LoanDetailsScreen.kt$UI</ID>
    <ID>ComposableParamOrder:LoanModal.kt$AccountsRow</ID>
    <ID>ComposableParamOrder:LoanModal.kt$LoanModal</ID>
    <ID>ComposableParamOrder:LoanRecordModal.kt$AccountsRow</ID>
    <ID>ComposableParamOrder:LoanRecordModal.kt$LoanRecordModal</ID>
    <ID>ComposableParamOrder:LoansScreen.kt$NoLoansEmptyState</ID>
    <ID>ComposableParamOrder:MonthPickerModal.kt$MonthPickerModal</ID>
    <ID>ComposableParamOrder:OnboardingComponents.kt$OnboardingButton</ID>
    <ID>ComposableParamOrder:OnboardingProgressSlider.kt$OnboardingProgressSlider</ID>
    <ID>ComposableParamOrder:PeriodSelector.kt$PeriodSelector</ID>
    <ID>ComposableParamOrder:PieChartStatisticBottomBar.kt$PieChartStatisticBottomBar</ID>
    <ID>ComposableParamOrder:PieChartStatisticScreen.kt$Header</ID>
    <ID>ComposableParamOrder:PlannedPaymentsBottomBar.kt$PlannedPaymentsBottomBar</ID>
    <ID>ComposableParamOrder:PlannedPaymentsLazyColumn.kt$PlannedPaymentsLazyColumn</ID>
    <ID>ComposableParamOrder:PlansSheet.kt$PlansSheet</ID>
    <ID>ComposableParamOrder:Preview.kt$IvyPreview</ID>
    <ID>ComposableParamOrder:PrimaryAttributeColumn.kt$PrimaryAttributeColumn</ID>
    <ID>ComposableParamOrder:ProgressBar.kt$ProgressBar</ID>
    <ID>ComposableParamOrder:ProgressModal.kt$ProgressModal</ID>
    <ID>ComposableParamOrder:ReorderModal.kt$ReorderModal</ID>
    <ID>ComposableParamOrder:ReorderModal.kt$ReorderModalSingleType</ID>
    <ID>ComposableParamOrder:ScreenTitle.kt$ScreenTitle</ID>
    <ID>ComposableParamOrder:SettingsScreen.kt$AppSwitch</ID>
    <ID>ComposableParamOrder:SettingsScreen.kt$SettingsButtonRow</ID>
    <ID>ComposableParamOrder:SettingsScreen.kt$UI</ID>
    <ID>ComposableParamOrder:Shapes.kt$Shape</ID>
    <ID>ComposableParamOrder:Shapes.kt$ShapeOutlined</ID>
    <ID>ComposableParamOrder:Switch.kt$Switch</ID>
    <ID>ComposableParamOrder:Title.kt$Title</ID>
    <ID>ComposableParamOrder:WrapContentRow.kt$WrapContentRow</ID>
    <ID>CompositionLocalAllowlist:IvyTheme.kt$LocalIvyColors</ID>
    <ID>CompositionLocalAllowlist:IvyTheme.kt$LocalIvyShapes</ID>
    <ID>CompositionLocalAllowlist:IvyTheme.kt$LocalIvyTypography</ID>
    <ID>CompositionLocalAllowlist:IvyUI.kt$LocalIvyContext</ID>
    <ID>ConstructorParameterNaming:LoanTransactionsLogic.kt$LoanTransactionsLogic$val Loan: LTLoanMapper</ID>
    <ID>ConstructorParameterNaming:LoanTransactionsLogic.kt$LoanTransactionsLogic$val LoanRecord: LTLoanRecordMapper</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _accountSuggestions: MutableLiveData&lt;List&lt;CreateAccountData&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _accounts: MutableLiveData&lt;List&lt;AccountBalance&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _categories: MutableLiveData&lt;List&lt;Category&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _categorySuggestions: MutableLiveData&lt;List&lt;CreateCategoryData&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _opGoogleSignIn: MutableLiveData&lt;OpResult&lt;Unit&gt;?&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _state: MutableLiveData&lt;OnboardingState&gt;</ID>
    <ID>ConstructorParameterNaming:ReorderModal.kt$Adapter$private val ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit</ID>
    <ID>CyclomaticComplexMethod:AccountModal.kt$@Composable fun BoxWithConstraintsScope.AccountModal( modal: AccountModalData?, onCreateAccount: (CreateAccountData) -&gt; Unit, onEditAccount: (Account, balance: Double) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:AnalyticsReportViewModel.kt$AnalyticsReportViewModel$fun start( startDate: LocalDateTime? = this.startDate.value, endDate: LocalDateTime? = this.endDate.value, )</ID>
    <ID>CyclomaticComplexMethod:BudgetBattery.kt$@Composable fun BudgetBattery( modifier: Modifier = Modifier, currency: String, expenses: Double, budget: Double, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:CSVViewModel.kt$CSVViewModel$private suspend fun handleEvent(event: CSVEvent)</ID>
    <ID>CyclomaticComplexMethod:DonateScreen.kt$@Composable private fun DonateOptionPicker( option: DonateOption, onSelect: (DonateOption) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditTransaction, transactionType: TransactionType, baseCurrency: String, initialTitle: String?, titleSuggestions: Set&lt;String&gt;, description: String?, category: Category?, dateTime: LocalDateTime?, account: Account?, toAccount: Account?, dueDate: LocalDateTime?, amount: Double, loanData: EditTransactionDisplayLoan = EditTransactionDisplayLoan(), backgroundProcessing: Boolean = false, customExchangeRateState: CustomExchangeRateState, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, hasChanges: Boolean = false, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onDueDateChanged: (LocalDateTime?) -&gt; Unit, onSetDateTime: (LocalDateTime) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onPayPlannedPayment: () -&gt; Unit, onSave: (closeScreen: Boolean) -&gt; Unit, onSetHasChanges: (hasChanges: Boolean) -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, onExchangeRateChanged: (Double?) -&gt; Unit = { } )</ID>
    <ID>CyclomaticComplexMethod:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun updateCustomExchangeRateState( toAccount: Account? = null, fromAccount: Account? = null, amt: Double? = null, exchangeRate: Double? = null, resetRate: Boolean = false )</ID>
    <ID>CyclomaticComplexMethod:ExportCSVLogic.kt$ExportCSVLogic$private fun Transaction.toCSV( baseCurrency: String, accountMap: Map&lt;UUID, Account&gt;, categoryMap: Map&lt;UUID, Category&gt; ): String</ID>
    <ID>CyclomaticComplexMethod:HomeViewModel.kt$HomeViewModel$override suspend fun handleEvent(event: HomeEvent): suspend () -&gt; HomeState</ID>
    <ID>CyclomaticComplexMethod:InputField.kt$fun EditText.setupInputType( inputType: IvyInputType, imeAction: IvyImeAction, onImeActionListener: ((EditText) -&gt; Unit)? )</ID>
    <ID>CyclomaticComplexMethod:LoanModal.kt$@Composable fun BoxWithConstraintsScope.LoanModal( accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, modal: LoanModalData?, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, onPerformCalculations: () -&gt; Unit = {}, dismiss: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:LoanRecordModal.kt$@Composable fun BoxWithConstraintsScope.LoanRecordModal( modal: LoanRecordModalData?, accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, onDelete: (LoanRecord) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:MainBottomBar.kt$@Composable fun BoxWithConstraintsScope.BottomBar( tab: MainTab, selectTab: (MainTab) -&gt; Unit, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, showAddAccountModal: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ParseFields.kt$fun parseTransactionType( value: String, metadata: TrnTypeMetadata ): TransactionType?</ID>
    <ID>CyclomaticComplexMethod:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$suspend fun payOrGet( transactions: List&lt;Transaction&gt;, syncTransaction: Boolean = true, skipTransaction: Boolean = false, onUpdateUI: suspend (paidTransactions: List&lt;Transaction&gt;) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:PlansSheet.kt$@Composable private fun ColumnScope.PlanCard( plan: Plan, purchased: Boolean, selectedPlan: Plan?, monthlyPlan: Plan?, onClick: () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:ReportViewModel.kt$ReportViewModel$private suspend fun filterTransactions( baseCurrency: String, accounts: List&lt;Account&gt;, filter: ReportFilter, ): List&lt;Transaction&gt;</ID>
    <ID>CyclomaticComplexMethod:RootActivity.kt$RootActivity$@ExperimentalFoundationApi @ExperimentalAnimationApi @Composable private fun BoxWithConstraintsScope.Screens(screen: Screen?)</ID>
    <ID>CyclomaticComplexMethod:TransactionCard.kt$@Composable fun TransactionCard( baseData: AppBaseData, transaction: Transaction, onPayOrGet: (Transaction) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onClick: (Transaction) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:TransactionViewModel.kt$TransactionViewModel$override suspend fun handleEvent(event: TrnEvent): suspend () -&gt; TrnState</ID>
    <ID>CyclomaticComplexMethod:ViewPager.kt$@Composable fun Pager( state: PagerState, modifier: Modifier = Modifier, pageContent: @Composable PagerScope.() -&gt; Unit )</ID>
    <ID>EmptyCatchBlock:CSVImporter.kt$CSVImporter${ }</ID>
    <ID>EmptyCatchBlock:ComposeExt.kt${ }</ID>
    <ID>EmptyCatchBlock:IntervalPickerRow.kt${ }</ID>
    <ID>EmptyClassBlock:AccountsUpdatedEvent.kt$AccountsUpdatedEvent${ }</ID>
    <ID>EmptyDefaultConstructor:IvyBilling.kt$IvyBilling$( )</ID>
    <ID>EmptyFunctionBlock:AccountCharts.kt${ }</ID>
    <ID>EmptyFunctionBlock:RestClient.kt$RestClient.Companion.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:RootViewModel.kt$RootViewModel.&lt;no name provided&gt;${ }</ID>
    <ID>ExplicitItLambdaParameter:TimeValue.kt${ index, it -&gt; Value( x = index.toDouble(), y = it.value ) }</ID>
    <ID>ExplicitItLambdaParameter:TimeValue.kt${ index, it -&gt; Value( x = index.toDouble(), y = it.value.toDouble() ) }</ID>
    <ID>Filename:dependencies.kt$com.ivy.wallet.buildsrc.dependencies.kt</ID>
    <ID>FinalNewline:AccValueFunctions.kt$com.ivy.wallet.domain.pure.transaction.AccValueFunctions.kt</ID>
    <ID>FinalNewline:Account.kt$com.ivy.wallet.domain.data.core.Account.kt</ID>
    <ID>FinalNewline:AccountBalance.kt$com.ivy.wallet.ui.onboarding.model.AccountBalance.kt</ID>
    <ID>FinalNewline:AccountByIdAct.kt$com.ivy.wallet.domain.action.account.AccountByIdAct.kt</ID>
    <ID>FinalNewline:AccountCharts.kt$com.ivy.wallet.ui.charts.charts.AccountCharts.kt</ID>
    <ID>FinalNewline:AccountCreator.kt$com.ivy.wallet.domain.deprecated.logic.AccountCreator.kt</ID>
    <ID>FinalNewline:AccountDao.kt$com.ivy.wallet.io.persistence.dao.AccountDao.kt</ID>
    <ID>FinalNewline:AccountData.kt$com.ivy.wallet.ui.accounts.AccountData.kt</ID>
    <ID>FinalNewline:AccountDataAct.kt$com.ivy.wallet.domain.action.viewmodel.account.AccountDataAct.kt</ID>
    <ID>FinalNewline:AccountEntity.kt$com.ivy.wallet.io.persistence.data.AccountEntity.kt</ID>
    <ID>FinalNewline:AccountFunctions.kt$com.ivy.wallet.domain.pure.account.AccountFunctions.kt</ID>
    <ID>FinalNewline:AccountModal.kt$com.ivy.wallet.ui.theme.modal.edit.AccountModal.kt</ID>
    <ID>FinalNewline:AccountService.kt$com.ivy.wallet.io.network.service.AccountService.kt</ID>
    <ID>FinalNewline:AccountState.kt$com.ivy.wallet.ui.accounts.AccountState.kt</ID>
    <ID>FinalNewline:AccountSync.kt$com.ivy.wallet.domain.deprecated.sync.item.AccountSync.kt</ID>
    <ID>FinalNewline:AccountUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.AccountUploader.kt</ID>
    <ID>FinalNewline:AccountsAct.kt$com.ivy.wallet.domain.action.account.AccountsAct.kt</ID>
    <ID>FinalNewline:AccountsEvent.kt$com.ivy.wallet.ui.accounts.AccountsEvent.kt</ID>
    <ID>FinalNewline:AccountsResponse.kt$com.ivy.wallet.io.network.request.account.AccountsResponse.kt</ID>
    <ID>FinalNewline:AccountsUpdatedEvent.kt$com.ivy.wallet.domain.event.AccountsUpdatedEvent.kt</ID>
    <ID>FinalNewline:AccountsViewModel.kt$com.ivy.wallet.ui.accounts.AccountsViewModel.kt</ID>
    <ID>FinalNewline:ActivityResultExt.kt$com.ivy.wallet.utils.ActivityResultExt.kt</ID>
    <ID>FinalNewline:AddKeywordModal.kt$com.ivy.wallet.ui.theme.modal.AddKeywordModal.kt</ID>
    <ID>FinalNewline:AddPrimaryAttributeButton.kt$com.ivy.wallet.ui.theme.components.AddPrimaryAttributeButton.kt</ID>
    <ID>FinalNewline:AddRateModal.kt$com.ivy.wallet.ui.exchangerates.modal.AddRateModal.kt</ID>
    <ID>FinalNewline:AddTransactionWidget.kt$com.ivy.wallet.ui.widget.AddTransactionWidget.kt</ID>
    <ID>FinalNewline:AddTransactionWidgetClick.kt$com.ivy.wallet.ui.widget.AddTransactionWidgetClick.kt</ID>
    <ID>FinalNewline:AddTransactionWidgetCompact.kt$com.ivy.wallet.ui.widget.AddTransactionWidgetCompact.kt</ID>
    <ID>FinalNewline:AllTrnsAct.kt$com.ivy.wallet.domain.action.transaction.AllTrnsAct.kt</ID>
    <ID>FinalNewline:AmountCurrency.kt$com.ivy.wallet.ui.theme.wallet.AmountCurrency.kt</ID>
    <ID>FinalNewline:AmountFormatting.kt$com.ivy.wallet.utils.AmountFormatting.kt</ID>
    <ID>FinalNewline:AnalyticsEvent.kt$com.ivy.wallet.domain.data.analytics.AnalyticsEvent.kt</ID>
    <ID>FinalNewline:AnalyticsReportResponse.kt$com.ivy.wallet.io.network.request.analytics.AnalyticsReportResponse.kt</ID>
    <ID>FinalNewline:AnalyticsReportViewModel.kt$com.ivy.wallet.ui.analytics.AnalyticsReportViewModel.kt</ID>
    <ID>FinalNewline:AnalyticsService.kt$com.ivy.wallet.io.network.service.AnalyticsService.kt</ID>
    <ID>FinalNewline:AnalyticsTab.kt$com.ivy.wallet.ui.analytics.AnalyticsTab.kt</ID>
    <ID>FinalNewline:Android.kt$com.ivy.design.utils.Android.kt</ID>
    <ID>FinalNewline:Animation.kt$com.ivy.design.utils.Animation.kt</ID>
    <ID>FinalNewline:AppBaseData.kt$com.ivy.wallet.ui.data.AppBaseData.kt</ID>
    <ID>FinalNewline:AppModuleDI.kt$com.ivy.wallet.AppModuleDI.kt</ID>
    <ID>FinalNewline:AuthProviderType.kt$com.ivy.wallet.domain.data.AuthProviderType.kt</ID>
    <ID>FinalNewline:AuthResponse.kt$com.ivy.wallet.io.network.request.auth.AuthResponse.kt</ID>
    <ID>FinalNewline:AuthService.kt$com.ivy.wallet.io.network.service.AuthService.kt</ID>
    <ID>FinalNewline:BackBottomBar.kt$com.ivy.wallet.ui.theme.components.BackBottomBar.kt</ID>
    <ID>FinalNewline:Background.kt$com.ivy.design.l1_buildingBlocks.data.Background.kt</ID>
    <ID>FinalNewline:BackupLogic.kt$com.ivy.wallet.domain.deprecated.logic.zip.BackupLogic.kt</ID>
    <ID>FinalNewline:BalanceChartAct.kt$com.ivy.wallet.domain.action.charts.BalanceChartAct.kt</ID>
    <ID>FinalNewline:BalanceRow.kt$com.ivy.wallet.ui.theme.components.BalanceRow.kt</ID>
    <ID>FinalNewline:BalanceViewModel.kt$com.ivy.wallet.ui.balance.BalanceViewModel.kt</ID>
    <ID>FinalNewline:BaseCurrencyAct.kt$com.ivy.wallet.domain.action.settings.BaseCurrencyAct.kt</ID>
    <ID>FinalNewline:Budget.kt$com.ivy.wallet.domain.data.core.Budget.kt</ID>
    <ID>FinalNewline:BudgetBattery.kt$com.ivy.wallet.ui.theme.components.BudgetBattery.kt</ID>
    <ID>FinalNewline:BudgetCreator.kt$com.ivy.wallet.domain.deprecated.logic.BudgetCreator.kt</ID>
    <ID>FinalNewline:BudgetDTO.kt$com.ivy.wallet.io.network.data.BudgetDTO.kt</ID>
    <ID>FinalNewline:BudgetDao.kt$com.ivy.wallet.io.persistence.dao.BudgetDao.kt</ID>
    <ID>FinalNewline:BudgetEntity.kt$com.ivy.wallet.io.persistence.data.BudgetEntity.kt</ID>
    <ID>FinalNewline:BudgetModal.kt$com.ivy.wallet.ui.theme.modal.BudgetModal.kt</ID>
    <ID>FinalNewline:BudgetService.kt$com.ivy.wallet.io.network.service.BudgetService.kt</ID>
    <ID>FinalNewline:BudgetSync.kt$com.ivy.wallet.domain.deprecated.sync.item.BudgetSync.kt</ID>
    <ID>FinalNewline:BudgetUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.BudgetUploader.kt</ID>
    <ID>FinalNewline:BudgetViewModel.kt$com.ivy.wallet.ui.budget.BudgetViewModel.kt</ID>
    <ID>FinalNewline:BudgetsAct.kt$com.ivy.wallet.domain.action.budget.BudgetsAct.kt</ID>
    <ID>FinalNewline:BudgetsResponse.kt$com.ivy.wallet.io.network.request.budget.BudgetsResponse.kt</ID>
    <ID>FinalNewline:BufferBattery.kt$com.ivy.wallet.ui.theme.components.BufferBattery.kt</ID>
    <ID>FinalNewline:BufferInfo.kt$com.ivy.wallet.ui.data.BufferInfo.kt</ID>
    <ID>FinalNewline:BufferModal.kt$com.ivy.wallet.ui.theme.modal.BufferModal.kt</ID>
    <ID>FinalNewline:ButtonWithIcon.kt$com.ivy.design.l2_components.ButtonWithIcon.kt</ID>
    <ID>FinalNewline:CSVEvent.kt$com.ivy.wallet.ui.csv.CSVEvent.kt</ID>
    <ID>FinalNewline:CSVImporter.kt$com.ivy.wallet.domain.deprecated.logic.csv.CSVImporter.kt</ID>
    <ID>FinalNewline:CSVImporterV2.kt$com.ivy.wallet.ui.csv.domain.CSVImporterV2.kt</ID>
    <ID>FinalNewline:CSVMapper.kt$com.ivy.wallet.domain.deprecated.logic.csv.CSVMapper.kt</ID>
    <ID>FinalNewline:CSVNormalizer.kt$com.ivy.wallet.domain.deprecated.logic.csv.CSVNormalizer.kt</ID>
    <ID>FinalNewline:CSVRow.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.CSVRow.kt</ID>
    <ID>FinalNewline:CSVState.kt$com.ivy.wallet.ui.csv.CSVState.kt</ID>
    <ID>FinalNewline:CSVViewModel.kt$com.ivy.wallet.ui.csv.CSVViewModel.kt</ID>
    <ID>FinalNewline:CalcAccBalanceAct.kt$com.ivy.wallet.domain.action.account.CalcAccBalanceAct.kt</ID>
    <ID>FinalNewline:CalcAccIncomeExpenseAct.kt$com.ivy.wallet.domain.action.account.CalcAccIncomeExpenseAct.kt</ID>
    <ID>FinalNewline:CalcBufferDiffAct.kt$com.ivy.wallet.domain.action.settings.CalcBufferDiffAct.kt</ID>
    <ID>FinalNewline:CalcIncomeExpenseAct.kt$com.ivy.wallet.domain.action.wallet.CalcIncomeExpenseAct.kt</ID>
    <ID>FinalNewline:CalcTrnsIncomeExpenseAct.kt$com.ivy.wallet.domain.action.transaction.CalcTrnsIncomeExpenseAct.kt</ID>
    <ID>FinalNewline:CalculatorModal.kt$com.ivy.wallet.ui.theme.modal.edit.CalculatorModal.kt</ID>
    <ID>FinalNewline:Card.kt$com.ivy.design.l3_ivyComponents.Card.kt</ID>
    <ID>FinalNewline:CatValueFunctions.kt$com.ivy.wallet.domain.pure.transaction.CatValueFunctions.kt</ID>
    <ID>FinalNewline:CategoriesAct.kt$com.ivy.wallet.domain.action.category.CategoriesAct.kt</ID>
    <ID>FinalNewline:CategoriesScreen.kt$com.ivy.wallet.ui.category.CategoriesScreen.kt</ID>
    <ID>FinalNewline:Category.kt$com.ivy.wallet.domain.data.core.Category.kt</ID>
    <ID>FinalNewline:Category.kt$com.ivy.wallet.ui.edit.core.Category.kt</ID>
    <ID>FinalNewline:CategoryAmount.kt$com.ivy.wallet.ui.statistic.level1.CategoryAmount.kt</ID>
    <ID>FinalNewline:CategoryByIdAct.kt$com.ivy.wallet.domain.action.category.CategoryByIdAct.kt</ID>
    <ID>FinalNewline:CategoryCreator.kt$com.ivy.wallet.domain.deprecated.logic.CategoryCreator.kt</ID>
    <ID>FinalNewline:CategoryDTO.kt$com.ivy.wallet.io.network.data.CategoryDTO.kt</ID>
    <ID>FinalNewline:CategoryDao.kt$com.ivy.wallet.io.persistence.dao.CategoryDao.kt</ID>
    <ID>FinalNewline:CategoryData.kt$com.ivy.wallet.ui.category.CategoryData.kt</ID>
    <ID>FinalNewline:CategoryEntity.kt$com.ivy.wallet.io.persistence.data.CategoryEntity.kt</ID>
    <ID>FinalNewline:CategoryIncomeWithAccountFiltersAct.kt$com.ivy.wallet.domain.action.category.CategoryIncomeWithAccountFiltersAct.kt</ID>
    <ID>FinalNewline:CategoryModal.kt$com.ivy.wallet.ui.theme.modal.edit.CategoryModal.kt</ID>
    <ID>FinalNewline:CategoryService.kt$com.ivy.wallet.io.network.service.CategoryService.kt</ID>
    <ID>FinalNewline:CategorySync.kt$com.ivy.wallet.domain.deprecated.sync.item.CategorySync.kt</ID>
    <ID>FinalNewline:CategoryTrnsBetweenAct.kt$com.ivy.wallet.domain.action.category.CategoryTrnsBetweenAct.kt</ID>
    <ID>FinalNewline:CategoryUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.CategoryUploader.kt</ID>
    <ID>FinalNewline:CategoryValues.kt$com.ivy.wallet.ui.charts.CategoryValues.kt</ID>
    <ID>FinalNewline:ChangeTransactionTypeModal.kt$com.ivy.wallet.ui.theme.components.ChangeTransactionTypeModal.kt</ID>
    <ID>FinalNewline:ChartPeriod.kt$com.ivy.wallet.domain.pure.charts.ChartPeriod.kt</ID>
    <ID>FinalNewline:ChartType.kt$com.ivy.wallet.ui.charts.ChartType.kt</ID>
    <ID>FinalNewline:ChartsCore.kt$com.ivy.wallet.domain.pure.charts.ChartsCore.kt</ID>
    <ID>FinalNewline:CheckEmailRequest.kt$com.ivy.wallet.io.network.request.auth.CheckEmailRequest.kt</ID>
    <ID>FinalNewline:CheckEmailResponse.kt$com.ivy.wallet.io.network.request.auth.CheckEmailResponse.kt</ID>
    <ID>FinalNewline:Checkbox.kt$com.ivy.design.l2_components.Checkbox.kt</ID>
    <ID>FinalNewline:ChooseCategoryModal.kt$com.ivy.wallet.ui.theme.modal.edit.ChooseCategoryModal.kt</ID>
    <ID>FinalNewline:ChoosePeriodModal.kt$com.ivy.wallet.ui.theme.modal.ChoosePeriodModal.kt</ID>
    <ID>FinalNewline:ChooseStartDateOfMonthModal.kt$com.ivy.wallet.ui.theme.modal.ChooseStartDateOfMonthModal.kt</ID>
    <ID>FinalNewline:CircleButtons.kt$com.ivy.wallet.ui.theme.components.CircleButtons.kt</ID>
    <ID>FinalNewline:ClosedTimeRange.kt$com.ivy.wallet.domain.pure.data.ClosedTimeRange.kt</ID>
    <ID>FinalNewline:ColoredItemCard.kt$com.ivy.design.l4_patterns.ColoredItemCard.kt</ID>
    <ID>FinalNewline:Colors.kt$com.ivy.design.l0_system.Colors.kt</ID>
    <ID>FinalNewline:ColumnRoot.kt$com.ivy.design.l1_buildingBlocks.ColumnRoot.kt</ID>
    <ID>FinalNewline:Compose.kt$com.ivy.design.utils.Compose.kt</ID>
    <ID>FinalNewline:ComposeExt.kt$com.ivy.wallet.utils.ComposeExt.kt</ID>
    <ID>FinalNewline:Constants.kt$com.ivy.wallet.Constants.kt</ID>
    <ID>FinalNewline:CreateAccountData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateAccountData.kt</ID>
    <ID>FinalNewline:CreateBudgetData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateBudgetData.kt</ID>
    <ID>FinalNewline:CreateCategoryData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateCategoryData.kt</ID>
    <ID>FinalNewline:CreateLoanData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateLoanData.kt</ID>
    <ID>FinalNewline:CreateLoanRecordData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateLoanRecordData.kt</ID>
    <ID>FinalNewline:CrupdateBudgetRequest.kt$com.ivy.wallet.io.network.request.budget.CrupdateBudgetRequest.kt</ID>
    <ID>FinalNewline:CurrencyModal.kt$com.ivy.wallet.ui.theme.modal.CurrencyModal.kt</ID>
    <ID>FinalNewline:CurrencyPicker.kt$com.ivy.wallet.ui.theme.components.CurrencyPicker.kt</ID>
    <ID>FinalNewline:CustomExchangeRateCard.kt$com.ivy.wallet.ui.theme.components.CustomExchangeRateCard.kt</ID>
    <ID>FinalNewline:CustomExchangeRateState.kt$com.ivy.wallet.domain.data.CustomExchangeRateState.kt</ID>
    <ID>FinalNewline:CustomerJourney.kt$com.ivy.wallet.ui.home.CustomerJourney.kt</ID>
    <ID>FinalNewline:CustomerJourneyCardData.kt$com.ivy.wallet.domain.deprecated.logic.model.CustomerJourneyCardData.kt</ID>
    <ID>FinalNewline:DataCircle.kt$com.ivy.wallet.ui.analytics.DataCircle.kt</ID>
    <ID>FinalNewline:DateExt.kt$com.ivy.wallet.utils.DateExt.kt</ID>
    <ID>FinalNewline:DefaultImportSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.DefaultImportSteps.kt</ID>
    <ID>FinalNewline:DeleteAccountRequest.kt$com.ivy.wallet.io.network.request.account.DeleteAccountRequest.kt</ID>
    <ID>FinalNewline:DeleteAllData.kt$com.ivy.design.l4_patterns.delete.DeleteAllData.kt</ID>
    <ID>FinalNewline:DeleteBudgetRequest.kt$com.ivy.wallet.io.network.request.budget.DeleteBudgetRequest.kt</ID>
    <ID>FinalNewline:DeleteButton.kt$com.ivy.wallet.ui.theme.components.DeleteButton.kt</ID>
    <ID>FinalNewline:DeleteItem.kt$com.ivy.design.l4_patterns.delete.DeleteItem.kt</ID>
    <ID>FinalNewline:DeleteLoanRecordRequest.kt$com.ivy.wallet.io.network.request.loan.DeleteLoanRecordRequest.kt</ID>
    <ID>FinalNewline:DeleteLoanRequest.kt$com.ivy.wallet.io.network.request.loan.DeleteLoanRequest.kt</ID>
    <ID>FinalNewline:DeleteModal.kt$com.ivy.wallet.ui.theme.modal.DeleteModal.kt</ID>
    <ID>FinalNewline:DeletePlannedPaymentRuleRequest.kt$com.ivy.wallet.io.network.request.planned.DeletePlannedPaymentRuleRequest.kt</ID>
    <ID>FinalNewline:DeleteTransactionRequest.kt$com.ivy.wallet.io.network.request.transaction.DeleteTransactionRequest.kt</ID>
    <ID>FinalNewline:DeleteWalletCategoryRequest.kt$com.ivy.wallet.io.network.request.category.DeleteWalletCategoryRequest.kt</ID>
    <ID>FinalNewline:Description.kt$com.ivy.wallet.ui.edit.core.Description.kt</ID>
    <ID>FinalNewline:DescriptionModal.kt$com.ivy.wallet.ui.theme.modal.edit.DescriptionModal.kt</ID>
    <ID>FinalNewline:DisplayBudget.kt$com.ivy.wallet.ui.budget.model.DisplayBudget.kt</ID>
    <ID>FinalNewline:DisplayLoan.kt$com.ivy.wallet.ui.loan.data.DisplayLoan.kt</ID>
    <ID>FinalNewline:Dividers.kt$com.ivy.design.l1_buildingBlocks.Dividers.kt</ID>
    <ID>FinalNewline:DonateEvent.kt$com.ivy.wallet.ui.donate.DonateEvent.kt</ID>
    <ID>FinalNewline:DonateModal.kt$com.ivy.wallet.ui.donate.DonateModal.kt</ID>
    <ID>FinalNewline:DonateOption.kt$com.ivy.wallet.ui.donate.data.DonateOption.kt</ID>
    <ID>FinalNewline:DonateScreen.kt$com.ivy.wallet.ui.donate.DonateScreen.kt</ID>
    <ID>FinalNewline:DonateState.kt$com.ivy.wallet.ui.donate.DonateState.kt</ID>
    <ID>FinalNewline:DonateViewModel.kt$com.ivy.wallet.ui.donate.DonateViewModel.kt</ID>
    <ID>FinalNewline:DueDate.kt$com.ivy.wallet.ui.edit.core.DueDate.kt</ID>
    <ID>FinalNewline:DueSection.kt$com.ivy.wallet.ui.data.DueSection.kt</ID>
    <ID>FinalNewline:DueTrnsAct.kt$com.ivy.wallet.domain.action.transaction.DueTrnsAct.kt</ID>
    <ID>FinalNewline:DueTrnsInfoAct.kt$com.ivy.wallet.domain.action.viewmodel.home.DueTrnsInfoAct.kt</ID>
    <ID>FinalNewline:EditBottomSheet.kt$com.ivy.wallet.ui.edit.core.EditBottomSheet.kt</ID>
    <ID>FinalNewline:EditContentCard.kt$com.ivy.design.l4_patterns.EditContentCard.kt</ID>
    <ID>FinalNewline:EditLoanRecordData.kt$com.ivy.wallet.domain.deprecated.logic.model.EditLoanRecordData.kt</ID>
    <ID>FinalNewline:EditPlannedScreen.kt$com.ivy.wallet.ui.planned.edit.EditPlannedScreen.kt</ID>
    <ID>FinalNewline:EditPlannedViewModel.kt$com.ivy.wallet.ui.planned.edit.EditPlannedViewModel.kt</ID>
    <ID>FinalNewline:EditTransactionScreen.kt$com.ivy.wallet.ui.edit.EditTransactionScreen.kt</ID>
    <ID>FinalNewline:EditTransactionViewModel.kt$com.ivy.wallet.ui.edit.EditTransactionViewModel.kt</ID>
    <ID>FinalNewline:EmailState.kt$com.ivy.wallet.domain.data.EmailState.kt</ID>
    <ID>FinalNewline:EncryptedSharedPrefs.kt$com.ivy.wallet.data.EncryptedSharedPrefs.kt</ID>
    <ID>FinalNewline:ErrorCode.kt$com.ivy.wallet.io.network.error.ErrorCode.kt</ID>
    <ID>FinalNewline:ExampleInstrumentedTest.kt$com.ivy.design.ExampleInstrumentedTest.kt</ID>
    <ID>FinalNewline:Exchange.kt$com.ivy.wallet.domain.pure.exchange.Exchange.kt</ID>
    <ID>FinalNewline:ExchangeRate.kt$com.ivy.wallet.domain.data.core.ExchangeRate.kt</ID>
    <ID>FinalNewline:ExchangeRateDTO.kt$com.ivy.wallet.io.network.data.ExchangeRateDTO.kt</ID>
    <ID>FinalNewline:ExchangeRateDao.kt$com.ivy.wallet.io.persistence.dao.ExchangeRateDao.kt</ID>
    <ID>FinalNewline:ExchangeRateEntity.kt$com.ivy.wallet.io.persistence.data.ExchangeRateEntity.kt</ID>
    <ID>FinalNewline:ExchangeRatesLogic.kt$com.ivy.wallet.domain.deprecated.logic.currency.ExchangeRatesLogic.kt</ID>
    <ID>FinalNewline:ExchangeRatesResponse.kt$com.ivy.wallet.io.network.request.currency.ExchangeRatesResponse.kt</ID>
    <ID>FinalNewline:ExchangeRatesScreen.kt$com.ivy.wallet.ui.exchangerates.ExchangeRatesScreen.kt</ID>
    <ID>FinalNewline:ExchangeRatesService.kt$com.ivy.wallet.io.network.service.ExchangeRatesService.kt</ID>
    <ID>FinalNewline:ExchangeRatesViewModel.kt$com.ivy.wallet.ui.exchangerates.ExchangeRatesViewModel.kt</ID>
    <ID>FinalNewline:ExchangeTrns.kt$com.ivy.wallet.domain.pure.exchange.ExchangeTrns.kt</ID>
    <ID>FinalNewline:ExpImagesService.kt$com.ivy.wallet.io.network.service.ExpImagesService.kt</ID>
    <ID>FinalNewline:ExportCSVLogic.kt$com.ivy.wallet.domain.deprecated.logic.csv.ExportCSVLogic.kt</ID>
    <ID>FinalNewline:FAB.kt$com.ivy.design.l3_ivyComponents.button.FAB.kt</ID>
    <ID>FinalNewline:FetchAllTrnsFromServerAct.kt$com.ivy.wallet.domain.action.transaction.FetchAllTrnsFromServerAct.kt</ID>
    <ID>FinalNewline:FetchImagesAct.kt$com.ivy.wallet.domain.action.viewmodel.experiment.FetchImagesAct.kt</ID>
    <ID>FinalNewline:FileUtil.kt$com.ivy.wallet.utils.FileUtil.kt</ID>
    <ID>FinalNewline:FilterOverlay.kt$com.ivy.wallet.ui.reports.FilterOverlay.kt</ID>
    <ID>FinalNewline:FinancistoSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.FinancistoSteps.kt</ID>
    <ID>FinalNewline:FirebaseExt.kt$com.ivy.wallet.utils.FirebaseExt.kt</ID>
    <ID>FinalNewline:FoldTransactions.kt$com.ivy.wallet.domain.pure.transaction.FoldTransactions.kt</ID>
    <ID>FinalNewline:FortuneCitySteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.FortuneCitySteps.kt</ID>
    <ID>FinalNewline:FromToTimeRange.kt$com.ivy.wallet.ui.onboarding.model.FromToTimeRange.kt</ID>
    <ID>FinalNewline:GesturesExt.kt$com.ivy.wallet.utils.GesturesExt.kt</ID>
    <ID>FinalNewline:GitHubBackup.kt$com.ivy.wallet.backup.github.GitHubBackup.kt</ID>
    <ID>FinalNewline:GitHubBackupCard.kt$com.ivy.wallet.backup.github.ui.GitHubBackupCard.kt</ID>
    <ID>FinalNewline:GitHubBackupScreen.kt$com.ivy.wallet.backup.github.ui.GitHubBackupScreen.kt</ID>
    <ID>FinalNewline:GitHubBackupStatus.kt$com.ivy.wallet.backup.github.ui.GitHubBackupStatus.kt</ID>
    <ID>FinalNewline:GitHubBackupViewModel.kt$com.ivy.wallet.backup.github.ui.GitHubBackupViewModel.kt</ID>
    <ID>FinalNewline:GitHubBackupViewState.kt$com.ivy.wallet.backup.github.ui.GitHubBackupViewState.kt</ID>
    <ID>FinalNewline:GitHubClient.kt$com.ivy.wallet.backup.github.GitHubClient.kt</ID>
    <ID>FinalNewline:GitHubCredentials.kt$com.ivy.wallet.backup.github.GitHubCredentials.kt</ID>
    <ID>FinalNewline:GitHubPATMigration.kt$com.ivy.wallet.migrations.impl.GitHubPATMigration.kt</ID>
    <ID>FinalNewline:GitHubWorkerMigration.kt$com.ivy.wallet.migrations.impl.GitHubWorkerMigration.kt</ID>
    <ID>FinalNewline:GoogleSignInRequest.kt$com.ivy.wallet.io.network.request.auth.GoogleSignInRequest.kt</ID>
    <ID>FinalNewline:GradientCut.kt$com.ivy.wallet.ui.theme.components.GradientCut.kt</ID>
    <ID>FinalNewline:GsonTypeAdapters.kt$com.ivy.wallet.io.network.GsonTypeAdapters.kt</ID>
    <ID>FinalNewline:HasTrnsAct.kt$com.ivy.wallet.domain.action.viewmodel.home.HasTrnsAct.kt</ID>
    <ID>FinalNewline:Health.kt$com.ivy.wallet.ui.analytics.model.Health.kt</ID>
    <ID>FinalNewline:HealthTab.kt$com.ivy.wallet.ui.analytics.tab.HealthTab.kt</ID>
    <ID>FinalNewline:HistoryDateDivider.kt$com.ivy.wallet.ui.component.transaction.HistoryDateDivider.kt</ID>
    <ID>FinalNewline:HistoryTrnsAct.kt$com.ivy.wallet.domain.action.transaction.HistoryTrnsAct.kt</ID>
    <ID>FinalNewline:HistoryWithDateDivsAct.kt$com.ivy.wallet.domain.action.transaction.HistoryWithDateDivsAct.kt</ID>
    <ID>FinalNewline:HomeEvent.kt$com.ivy.wallet.ui.home.HomeEvent.kt</ID>
    <ID>FinalNewline:HomeHeader.kt$com.ivy.wallet.ui.home.HomeHeader.kt</ID>
    <ID>FinalNewline:HomeMoreMenu.kt$com.ivy.wallet.ui.home.HomeMoreMenu.kt</ID>
    <ID>FinalNewline:HomeState.kt$com.ivy.wallet.ui.home.HomeState.kt</ID>
    <ID>FinalNewline:HomeTab.kt$com.ivy.wallet.ui.home.HomeTab.kt</ID>
    <ID>FinalNewline:HomeViewModel.kt$com.ivy.wallet.ui.home.HomeViewModel.kt</ID>
    <ID>FinalNewline:IconButton.kt$com.ivy.design.l2_components.IconButton.kt</ID>
    <ID>FinalNewline:ImportFrom.kt$com.ivy.wallet.ui.csvimport.flow.ImportFrom.kt</ID>
    <ID>FinalNewline:ImportProcessing.kt$com.ivy.wallet.ui.csvimport.flow.ImportProcessing.kt</ID>
    <ID>FinalNewline:ImportResult.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.ImportResult.kt</ID>
    <ID>FinalNewline:ImportResultUI.kt$com.ivy.wallet.ui.csvimport.flow.ImportResultUI.kt</ID>
    <ID>FinalNewline:ImportStep.kt$com.ivy.wallet.ui.csvimport.ImportStep.kt</ID>
    <ID>FinalNewline:ImportType.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.ImportType.kt</ID>
    <ID>FinalNewline:ImportViewModel.kt$com.ivy.wallet.ui.csvimport.ImportViewModel.kt</ID>
    <ID>FinalNewline:IncomeExpensePair.kt$com.ivy.wallet.domain.pure.data.IncomeExpensePair.kt</ID>
    <ID>FinalNewline:InitiateResetPasswordRequest.kt$com.ivy.wallet.io.network.request.auth.InitiateResetPasswordRequest.kt</ID>
    <ID>FinalNewline:InitiateResetPasswordResponse.kt$com.ivy.wallet.io.network.request.auth.InitiateResetPasswordResponse.kt</ID>
    <ID>FinalNewline:InputError.kt$com.ivy.wallet.utils.InputError.kt</ID>
    <ID>FinalNewline:InputField.kt$com.ivy.design.l2_components.InputField.kt</ID>
    <ID>FinalNewline:Insets.kt$com.ivy.design.utils.Insets.kt</ID>
    <ID>FinalNewline:IntervalPickerRow.kt$com.ivy.wallet.ui.theme.components.IntervalPickerRow.kt</ID>
    <ID>FinalNewline:IntervalType.kt$com.ivy.wallet.domain.data.IntervalType.kt</ID>
    <ID>FinalNewline:ItemDetailsScreen.kt$com.ivy.design.l5_concept.ItemDetailsScreen.kt</ID>
    <ID>FinalNewline:ItemIcon.kt$com.ivy.wallet.ui.theme.components.ItemIcon.kt</ID>
    <ID>FinalNewline:ItemStatisticScreen.kt$com.ivy.wallet.ui.statistic.level2.ItemStatisticScreen.kt</ID>
    <ID>FinalNewline:ItemStatisticViewModel.kt$com.ivy.wallet.ui.statistic.level2.ItemStatisticViewModel.kt</ID>
    <ID>FinalNewline:IvyAnalytics.kt$com.ivy.wallet.io.network.IvyAnalytics.kt</ID>
    <ID>FinalNewline:IvyAndroidApp.kt$com.ivy.wallet.IvyAndroidApp.kt</ID>
    <ID>FinalNewline:IvyAnimation.kt$com.ivy.wallet.utils.IvyAnimation.kt</ID>
    <ID>FinalNewline:IvyBasicTextField.kt$com.ivy.wallet.ui.theme.components.IvyBasicTextField.kt</ID>
    <ID>FinalNewline:IvyBilling.kt$com.ivy.wallet.android.billing.IvyBilling.kt</ID>
    <ID>FinalNewline:IvyBorderButton.kt$com.ivy.wallet.ui.theme.components.IvyBorderButton.kt</ID>
    <ID>FinalNewline:IvyButton.kt$com.ivy.wallet.ui.theme.components.IvyButton.kt</ID>
    <ID>FinalNewline:IvyCheckbox.kt$com.ivy.wallet.ui.theme.components.IvyCheckbox.kt</ID>
    <ID>FinalNewline:IvyChecklistTextField.kt$com.ivy.wallet.ui.theme.components.IvyChecklistTextField.kt</ID>
    <ID>FinalNewline:IvyCircleButton.kt$com.ivy.wallet.ui.theme.components.IvyCircleButton.kt</ID>
    <ID>FinalNewline:IvyColorPicker.kt$com.ivy.wallet.ui.theme.components.IvyColorPicker.kt</ID>
    <ID>FinalNewline:IvyColors.kt$com.ivy.design.l0_system.IvyColors.kt</ID>
    <ID>FinalNewline:IvyColors.kt$com.ivy.wallet.ui.theme.IvyColors.kt</ID>
    <ID>FinalNewline:IvyComponents.kt$com.ivy.wallet.ui.theme.components.IvyComponents.kt</ID>
    <ID>FinalNewline:IvyContext.kt$com.ivy.design.IvyContext.kt</ID>
    <ID>FinalNewline:IvyDataStore.kt$com.ivy.wallet.io.persistence.datastore.IvyDataStore.kt</ID>
    <ID>FinalNewline:IvyDescriptionTextField.kt$com.ivy.wallet.ui.theme.components.IvyDescriptionTextField.kt</ID>
    <ID>FinalNewline:IvyDesign.kt$com.ivy.design.api.IvyDesign.kt</ID>
    <ID>FinalNewline:IvyDivider.kt$com.ivy.wallet.ui.theme.components.IvyDivider.kt</ID>
    <ID>FinalNewline:IvyDividerDot.kt$com.ivy.wallet.ui.theme.components.IvyDividerDot.kt</ID>
    <ID>FinalNewline:IvyDomainUtils.kt$com.ivy.wallet.domain.pure.util.IvyDomainUtils.kt</ID>
    <ID>FinalNewline:IvyFileReader.kt$com.ivy.wallet.domain.deprecated.logic.csv.IvyFileReader.kt</ID>
    <ID>FinalNewline:IvyIcon.kt$com.ivy.design.l1_buildingBlocks.IvyIcon.kt</ID>
    <ID>FinalNewline:IvyIcon.kt$com.ivy.wallet.ui.theme.components.IvyIcon.kt</ID>
    <ID>FinalNewline:IvyLineChart.kt$com.ivy.wallet.ui.theme.components.charts.linechart.IvyLineChart.kt</ID>
    <ID>FinalNewline:IvyModal.kt$com.ivy.wallet.ui.theme.modal.IvyModal.kt</ID>
    <ID>FinalNewline:IvyModalComponents.kt$com.ivy.wallet.ui.theme.modal.IvyModalComponents.kt</ID>
    <ID>FinalNewline:IvyNameTextFieldValue.kt$com.ivy.wallet.ui.theme.components.IvyNameTextFieldValue.kt</ID>
    <ID>FinalNewline:IvyNotification.kt$com.ivy.wallet.android.notification.IvyNotification.kt</ID>
    <ID>FinalNewline:IvyNotificationChannel.kt$com.ivy.wallet.android.notification.IvyNotificationChannel.kt</ID>
    <ID>FinalNewline:IvyOutlinedButton.kt$com.ivy.wallet.ui.theme.components.IvyOutlinedButton.kt</ID>
    <ID>FinalNewline:IvyOutlinedTextField.kt$com.ivy.wallet.ui.theme.components.IvyOutlinedTextField.kt</ID>
    <ID>FinalNewline:IvyPadding.kt$com.ivy.design.l1_buildingBlocks.data.IvyPadding.kt</ID>
    <ID>FinalNewline:IvyRoomDatabase.kt$com.ivy.wallet.io.persistence.IvyRoomDatabase.kt</ID>
    <ID>FinalNewline:IvySession.kt$com.ivy.wallet.io.network.IvySession.kt</ID>
    <ID>FinalNewline:IvyShapes.kt$com.ivy.design.l0_system.IvyShapes.kt</ID>
    <ID>FinalNewline:IvySwitch.kt$com.ivy.wallet.ui.theme.components.IvySwitch.kt</ID>
    <ID>FinalNewline:IvySync.kt$com.ivy.wallet.domain.deprecated.sync.IvySync.kt</ID>
    <ID>FinalNewline:IvyText.kt$com.ivy.design.l1_buildingBlocks.IvyText.kt</ID>
    <ID>FinalNewline:IvyTitleTextField.kt$com.ivy.wallet.ui.theme.components.IvyTitleTextField.kt</ID>
    <ID>FinalNewline:IvyToolbar.kt$com.ivy.wallet.ui.theme.components.IvyToolbar.kt</ID>
    <ID>FinalNewline:IvyTypography.kt$com.ivy.design.l0_system.IvyTypography.kt</ID>
    <ID>FinalNewline:IvyUI.kt$com.ivy.design.api.IvyUI.kt</ID>
    <ID>FinalNewline:IvyViewPager.kt$com.ivy.wallet.ui.theme.components.IvyViewPager.kt</ID>
    <ID>FinalNewline:IvyWalletCompleteData.kt$com.ivy.wallet.domain.data.IvyWalletCompleteData.kt</ID>
    <ID>FinalNewline:IvyWalletDatastore.kt$com.ivy.wallet.data.IvyWalletDatastore.kt</ID>
    <ID>FinalNewline:IvyWalletDesign.kt$com.ivy.design.api.systems.IvyWalletDesign.kt</ID>
    <ID>FinalNewline:IvyWalletSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.IvyWalletSteps.kt</ID>
    <ID>FinalNewline:KPIs.kt$com.ivy.wallet.ui.analytics.model.KPIs.kt</ID>
    <ID>FinalNewline:KPIsTab.kt$com.ivy.wallet.ui.analytics.tab.KPIsTab.kt</ID>
    <ID>FinalNewline:KTWMoneyMangerSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.KTWMoneyMangerSteps.kt</ID>
    <ID>FinalNewline:Keyboard.kt$com.ivy.design.utils.Keyboard.kt</ID>
    <ID>FinalNewline:KtorClient.kt$com.ivy.wallet.backup.ktor.KtorClient.kt</ID>
    <ID>FinalNewline:KtorClientModule.kt$com.ivy.wallet.backup.ktor.KtorClientModule.kt</ID>
    <ID>FinalNewline:LTLoanRecordMapper.kt$com.ivy.wallet.domain.deprecated.logic.loantrasactions.LTLoanRecordMapper.kt</ID>
    <ID>FinalNewline:LastNTimeRange.kt$com.ivy.wallet.ui.onboarding.model.LastNTimeRange.kt</ID>
    <ID>FinalNewline:Loan.kt$com.ivy.wallet.domain.data.core.Loan.kt</ID>
    <ID>FinalNewline:LoanBottomBar.kt$com.ivy.wallet.ui.loan.LoanBottomBar.kt</ID>
    <ID>FinalNewline:LoanByIdAct.kt$com.ivy.wallet.domain.action.loan.LoanByIdAct.kt</ID>
    <ID>FinalNewline:LoanCreator.kt$com.ivy.wallet.domain.deprecated.logic.LoanCreator.kt</ID>
    <ID>FinalNewline:LoanDTO.kt$com.ivy.wallet.io.network.data.LoanDTO.kt</ID>
    <ID>FinalNewline:LoanDao.kt$com.ivy.wallet.io.persistence.dao.LoanDao.kt</ID>
    <ID>FinalNewline:LoanDetailsScreen.kt$com.ivy.wallet.ui.loandetails.LoanDetailsScreen.kt</ID>
    <ID>FinalNewline:LoanDetailsViewModel.kt$com.ivy.wallet.ui.loandetails.LoanDetailsViewModel.kt</ID>
    <ID>FinalNewline:LoanEntity.kt$com.ivy.wallet.io.persistence.data.LoanEntity.kt</ID>
    <ID>FinalNewline:LoanModal.kt$com.ivy.wallet.ui.theme.modal.LoanModal.kt</ID>
    <ID>FinalNewline:LoanRecord.kt$com.ivy.wallet.domain.data.core.LoanRecord.kt</ID>
    <ID>FinalNewline:LoanRecordCreator.kt$com.ivy.wallet.domain.deprecated.logic.LoanRecordCreator.kt</ID>
    <ID>FinalNewline:LoanRecordDTO.kt$com.ivy.wallet.io.network.data.LoanRecordDTO.kt</ID>
    <ID>FinalNewline:LoanRecordDao.kt$com.ivy.wallet.io.persistence.dao.LoanRecordDao.kt</ID>
    <ID>FinalNewline:LoanRecordEntity.kt$com.ivy.wallet.io.persistence.data.LoanRecordEntity.kt</ID>
    <ID>FinalNewline:LoanRecordModal.kt$com.ivy.wallet.ui.theme.modal.LoanRecordModal.kt</ID>
    <ID>FinalNewline:LoanRecordSync.kt$com.ivy.wallet.domain.deprecated.sync.item.LoanRecordSync.kt</ID>
    <ID>FinalNewline:LoanRecordUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.LoanRecordUploader.kt</ID>
    <ID>FinalNewline:LoanRecordsResponse.kt$com.ivy.wallet.io.network.request.loan.LoanRecordsResponse.kt</ID>
    <ID>FinalNewline:LoanService.kt$com.ivy.wallet.io.network.service.LoanService.kt</ID>
    <ID>FinalNewline:LoanSync.kt$com.ivy.wallet.domain.deprecated.sync.item.LoanSync.kt</ID>
    <ID>FinalNewline:LoanTransactionsCore.kt$com.ivy.wallet.domain.deprecated.logic.loantrasactions.LoanTransactionsCore.kt</ID>
    <ID>FinalNewline:LoanType.kt$com.ivy.wallet.domain.data.LoanType.kt</ID>
    <ID>FinalNewline:LoanUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.LoanUploader.kt</ID>
    <ID>FinalNewline:LoanViewModel.kt$com.ivy.wallet.ui.loan.LoanViewModel.kt</ID>
    <ID>FinalNewline:LoansAct.kt$com.ivy.wallet.domain.action.loan.LoansAct.kt</ID>
    <ID>FinalNewline:LoansResponse.kt$com.ivy.wallet.io.network.request.loan.LoansResponse.kt</ID>
    <ID>FinalNewline:LoansScreen.kt$com.ivy.wallet.ui.loan.LoansScreen.kt</ID>
    <ID>FinalNewline:LogEventRequest.kt$com.ivy.wallet.io.network.request.analytics.LogEventRequest.kt</ID>
    <ID>FinalNewline:LogoutLogic.kt$com.ivy.wallet.domain.deprecated.logic.LogoutLogic.kt</ID>
    <ID>FinalNewline:MVVMExt.kt$com.ivy.wallet.utils.MVVMExt.kt</ID>
    <ID>FinalNewline:MainBottomBar.kt$com.ivy.wallet.ui.main.MainBottomBar.kt</ID>
    <ID>FinalNewline:MainScreen.kt$com.ivy.wallet.ui.main.MainScreen.kt</ID>
    <ID>FinalNewline:MainTab.kt$com.ivy.wallet.ui.main.MainTab.kt</ID>
    <ID>FinalNewline:MainViewModel.kt$com.ivy.wallet.ui.main.MainViewModel.kt</ID>
    <ID>FinalNewline:Migration.kt$com.ivy.wallet.migrations.Migration.kt</ID>
    <ID>FinalNewline:Migration105to106_TrnRecurringRules.kt$com.ivy.wallet.io.persistence.migration.Migration105to106_TrnRecurringRules.kt</ID>
    <ID>FinalNewline:Migration106to107_Wishlist.kt$com.ivy.wallet.io.persistence.migration.Migration106to107_Wishlist.kt</ID>
    <ID>FinalNewline:Migration107to108_Sync.kt$com.ivy.wallet.io.persistence.migration.Migration107to108_Sync.kt</ID>
    <ID>FinalNewline:Migration108to109_Users.kt$com.ivy.wallet.io.persistence.migration.Migration108to109_Users.kt</ID>
    <ID>FinalNewline:Migration109to110_PlannedPayments.kt$com.ivy.wallet.io.persistence.migration.Migration109to110_PlannedPayments.kt</ID>
    <ID>FinalNewline:Migration110to111_PlannedPaymentRule.kt$com.ivy.wallet.io.persistence.migration.Migration110to111_PlannedPaymentRule.kt</ID>
    <ID>FinalNewline:Migration111to112_User_testUser.kt$com.ivy.wallet.io.persistence.migration.Migration111to112_User_testUser.kt</ID>
    <ID>FinalNewline:Migration112to113_ExchangeRates.kt$com.ivy.wallet.io.persistence.migration.Migration112to113_ExchangeRates.kt</ID>
    <ID>FinalNewline:Migration113to114_Multi_Currency.kt$com.ivy.wallet.io.persistence.migration.Migration113to114_Multi_Currency.kt</ID>
    <ID>FinalNewline:Migration114to115_Category_Account_Icons.kt$com.ivy.wallet.io.persistence.migration.Migration114to115_Category_Account_Icons.kt</ID>
    <ID>FinalNewline:Migration115to116_Account_Include_In_Balance.kt$com.ivy.wallet.io.persistence.migration.Migration115to116_Account_Include_In_Balance.kt</ID>
    <ID>FinalNewline:Migration116to117_SalteEdgeIntgration.kt$com.ivy.wallet.io.persistence.migration.Migration116to117_SalteEdgeIntgration.kt</ID>
    <ID>FinalNewline:Migration117to118_Budgets.kt$com.ivy.wallet.io.persistence.migration.Migration117to118_Budgets.kt</ID>
    <ID>FinalNewline:Migration118to119_Loans.kt$com.ivy.wallet.io.persistence.migration.Migration118to119_Loans.kt</ID>
    <ID>FinalNewline:Migration119to120_LoanTransactions.kt$com.ivy.wallet.io.persistence.migration.Migration119to120_LoanTransactions.kt</ID>
    <ID>FinalNewline:Migration120to121_DropWishlistItem.kt$com.ivy.wallet.io.persistence.migration.Migration120to121_DropWishlistItem.kt</ID>
    <ID>FinalNewline:Migration122to123_ExchangeRates.kt$com.ivy.wallet.io.persistence.migration.Migration122to123_ExchangeRates.kt</ID>
    <ID>FinalNewline:MigrationsManager.kt$com.ivy.wallet.migrations.MigrationsManager.kt</ID>
    <ID>FinalNewline:MonefySteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.MonefySteps.kt</ID>
    <ID>FinalNewline:MoneyManagerPraseSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.MoneyManagerPraseSteps.kt</ID>
    <ID>FinalNewline:Month.kt$com.ivy.wallet.ui.theme.modal.model.Month.kt</ID>
    <ID>FinalNewline:MonthPickerModal.kt$com.ivy.wallet.ui.theme.modal.MonthPickerModal.kt</ID>
    <ID>FinalNewline:MoreInfo.kt$com.ivy.design.l4_patterns.MoreInfo.kt</ID>
    <ID>FinalNewline:MoreMenu.kt$com.ivy.design.l4_patterns.MoreMenu.kt</ID>
    <ID>FinalNewline:NameModal.kt$com.ivy.wallet.ui.theme.modal.NameModal.kt</ID>
    <ID>FinalNewline:NetworkError.kt$com.ivy.wallet.io.network.error.NetworkError.kt</ID>
    <ID>FinalNewline:NewEditScreenPref.kt$com.ivy.wallet.domain.data.preference.NewEditScreenPref.kt</ID>
    <ID>FinalNewline:NotificationService.kt$com.ivy.wallet.android.notification.NotificationService.kt</ID>
    <ID>FinalNewline:NukeService.kt$com.ivy.wallet.io.network.service.NukeService.kt</ID>
    <ID>FinalNewline:OnboardingAccounts.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingAccounts.kt</ID>
    <ID>FinalNewline:OnboardingCategories.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingCategories.kt</ID>
    <ID>FinalNewline:OnboardingComponents.kt$com.ivy.wallet.ui.theme.components.OnboardingComponents.kt</ID>
    <ID>FinalNewline:OnboardingPrivacyTC.kt$com.ivy.wallet.ui.onboarding.steps.archived.OnboardingPrivacyTC.kt</ID>
    <ID>FinalNewline:OnboardingProgressSlider.kt$com.ivy.wallet.ui.onboarding.components.OnboardingProgressSlider.kt</ID>
    <ID>FinalNewline:OnboardingReport.kt$com.ivy.wallet.ui.analytics.model.OnboardingReport.kt</ID>
    <ID>FinalNewline:OnboardingReportTab.kt$com.ivy.wallet.ui.analytics.tab.OnboardingReportTab.kt</ID>
    <ID>FinalNewline:OnboardingRouter.kt$com.ivy.wallet.ui.onboarding.viewmodel.OnboardingRouter.kt</ID>
    <ID>FinalNewline:OnboardingScreen.kt$com.ivy.wallet.ui.onboarding.OnboardingScreen.kt</ID>
    <ID>FinalNewline:OnboardingSetCurrency.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingSetCurrency.kt</ID>
    <ID>FinalNewline:OnboardingSetName.kt$com.ivy.wallet.ui.onboarding.steps.archived.OnboardingSetName.kt</ID>
    <ID>FinalNewline:OnboardingSplashLogin.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingSplashLogin.kt</ID>
    <ID>FinalNewline:OnboardingState.kt$com.ivy.wallet.ui.onboarding.OnboardingState.kt</ID>
    <ID>FinalNewline:OnboardingToolbar.kt$com.ivy.wallet.ui.onboarding.components.OnboardingToolbar.kt</ID>
    <ID>FinalNewline:OnboardingType.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingType.kt</ID>
    <ID>FinalNewline:OnboardingViewModel.kt$com.ivy.wallet.ui.onboarding.viewmodel.OnboardingViewModel.kt</ID>
    <ID>FinalNewline:OneMoneySteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.OneMoneySteps.kt</ID>
    <ID>FinalNewline:OpResult.kt$com.ivy.wallet.utils.OpResult.kt</ID>
    <ID>FinalNewline:OpenIssueRequest.kt$com.ivy.wallet.io.network.request.github.OpenIssueRequest.kt</ID>
    <ID>FinalNewline:OpenIssueResponse.kt$com.ivy.wallet.io.network.request.github.OpenIssueResponse.kt</ID>
    <ID>FinalNewline:OverdueAct.kt$com.ivy.wallet.domain.action.viewmodel.home.OverdueAct.kt</ID>
    <ID>FinalNewline:ParseFields.kt$com.ivy.wallet.ui.csv.domain.ParseFields.kt</ID>
    <ID>FinalNewline:ParseStatus.kt$com.ivy.wallet.ui.csv.domain.ParseStatus.kt</ID>
    <ID>FinalNewline:PaywallLogic.kt$com.ivy.wallet.domain.deprecated.logic.PaywallLogic.kt</ID>
    <ID>FinalNewline:PaywallReason.kt$com.ivy.wallet.ui.paywall.PaywallReason.kt</ID>
    <ID>FinalNewline:PaywallViewModel.kt$com.ivy.wallet.ui.paywall.PaywallViewModel.kt</ID>
    <ID>FinalNewline:PeriodSelector.kt$com.ivy.wallet.ui.theme.wallet.PeriodSelector.kt</ID>
    <ID>FinalNewline:PieChart.kt$com.ivy.wallet.ui.statistic.level1.PieChart.kt</ID>
    <ID>FinalNewline:PieChartAct.kt$com.ivy.wallet.domain.action.charts.PieChartAct.kt</ID>
    <ID>FinalNewline:PieChartStatisticBottomBar.kt$com.ivy.wallet.ui.statistic.level1.PieChartStatisticBottomBar.kt</ID>
    <ID>FinalNewline:PieChartStatisticViewModel.kt$com.ivy.wallet.ui.statistic.level1.PieChartStatisticViewModel.kt</ID>
    <ID>FinalNewline:Plan.kt$com.ivy.wallet.android.billing.Plan.kt</ID>
    <ID>FinalNewline:PlanType.kt$com.ivy.wallet.android.billing.PlanType.kt</ID>
    <ID>FinalNewline:PlannedPaymentRule.kt$com.ivy.wallet.domain.data.core.PlannedPaymentRule.kt</ID>
    <ID>FinalNewline:PlannedPaymentRuleDTO.kt$com.ivy.wallet.io.network.data.PlannedPaymentRuleDTO.kt</ID>
    <ID>FinalNewline:PlannedPaymentRuleDao.kt$com.ivy.wallet.io.persistence.dao.PlannedPaymentRuleDao.kt</ID>
    <ID>FinalNewline:PlannedPaymentRuleEntity.kt$com.ivy.wallet.io.persistence.data.PlannedPaymentRuleEntity.kt</ID>
    <ID>FinalNewline:PlannedPaymentRuleService.kt$com.ivy.wallet.io.network.service.PlannedPaymentRuleService.kt</ID>
    <ID>FinalNewline:PlannedPaymentRuleUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.PlannedPaymentRuleUploader.kt</ID>
    <ID>FinalNewline:PlannedPaymentRulesResponse.kt$com.ivy.wallet.io.network.request.planned.PlannedPaymentRulesResponse.kt</ID>
    <ID>FinalNewline:PlannedPaymentSync.kt$com.ivy.wallet.domain.deprecated.sync.item.PlannedPaymentSync.kt</ID>
    <ID>FinalNewline:PlannedPaymentsBottomBar.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsBottomBar.kt</ID>
    <ID>FinalNewline:PlannedPaymentsGenerator.kt$com.ivy.wallet.domain.deprecated.logic.PlannedPaymentsGenerator.kt</ID>
    <ID>FinalNewline:PlannedPaymentsLazyColumn.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsLazyColumn.kt</ID>
    <ID>FinalNewline:PlannedPaymentsLogic.kt$com.ivy.wallet.domain.deprecated.logic.PlannedPaymentsLogic.kt</ID>
    <ID>FinalNewline:PlannedPaymentsScreen.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsScreen.kt</ID>
    <ID>FinalNewline:PlannedPaymentsViewModel.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsViewModel.kt</ID>
    <ID>FinalNewline:PlansSheet.kt$com.ivy.wallet.ui.paywall.PlansSheet.kt</ID>
    <ID>FinalNewline:Preference.kt$com.ivy.wallet.domain.data.preference.Preference.kt</ID>
    <ID>FinalNewline:PreferenceAct.kt$com.ivy.wallet.domain.action.settings.preference.PreferenceAct.kt</ID>
    <ID>FinalNewline:Preview.kt$com.ivy.design.utils.Preview.kt</ID>
    <ID>FinalNewline:PrimaryAttributeColumn.kt$com.ivy.wallet.ui.edit.PrimaryAttributeColumn.kt</ID>
    <ID>FinalNewline:ProgressBar.kt$com.ivy.wallet.ui.theme.components.ProgressBar.kt</ID>
    <ID>FinalNewline:ProgressModal.kt$com.ivy.wallet.ui.theme.modal.ProgressModal.kt</ID>
    <ID>FinalNewline:PropertyTestExample.kt$com.ivy.wallet.PropertyTestExample.kt</ID>
    <ID>FinalNewline:RateItem.kt$com.ivy.wallet.ui.exchangerates.component.RateItem.kt</ID>
    <ID>FinalNewline:RateUi.kt$com.ivy.wallet.ui.exchangerates.data.RateUi.kt</ID>
    <ID>FinalNewline:RatesEvent.kt$com.ivy.wallet.ui.exchangerates.RatesEvent.kt</ID>
    <ID>FinalNewline:RatesState.kt$com.ivy.wallet.ui.exchangerates.RatesState.kt</ID>
    <ID>FinalNewline:RecurringRule.kt$com.ivy.wallet.ui.planned.edit.RecurringRule.kt</ID>
    <ID>FinalNewline:RecurringRuleModal.kt$com.ivy.wallet.ui.theme.modal.RecurringRuleModal.kt</ID>
    <ID>FinalNewline:ReorderModal.kt$com.ivy.design.l4_patterns.ReorderModal.kt</ID>
    <ID>FinalNewline:ReorderModal.kt$com.ivy.wallet.ui.theme.components.ReorderModal.kt</ID>
    <ID>FinalNewline:Reorderable.kt$com.ivy.wallet.domain.data.Reorderable.kt</ID>
    <ID>FinalNewline:ReportFilter.kt$com.ivy.wallet.ui.reports.ReportFilter.kt</ID>
    <ID>FinalNewline:ReportScreen.kt$com.ivy.wallet.ui.reports.ReportScreen.kt</ID>
    <ID>FinalNewline:ReportScreenEvent.kt$com.ivy.wallet.ui.reports.ReportScreenEvent.kt</ID>
    <ID>FinalNewline:ReportScreenState.kt$com.ivy.wallet.ui.reports.ReportScreenState.kt</ID>
    <ID>FinalNewline:ReportViewModel.kt$com.ivy.wallet.ui.reports.ReportViewModel.kt</ID>
    <ID>FinalNewline:ResetPasswordRequest.kt$com.ivy.wallet.io.network.request.auth.ResetPasswordRequest.kt</ID>
    <ID>FinalNewline:RestClient.kt$com.ivy.wallet.io.network.RestClient.kt</ID>
    <ID>FinalNewline:RestError.kt$com.ivy.wallet.io.network.error.RestError.kt</ID>
    <ID>FinalNewline:RoomTypeConverters.kt$com.ivy.wallet.io.persistence.RoomTypeConverters.kt</ID>
    <ID>FinalNewline:RootActivity.kt$com.ivy.wallet.ui.RootActivity.kt</ID>
    <ID>FinalNewline:RootViewModel.kt$com.ivy.wallet.ui.RootViewModel.kt</ID>
    <ID>FinalNewline:RowMapping.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.RowMapping.kt</ID>
    <ID>FinalNewline:SaveTrnLocallyAct.kt$com.ivy.wallet.domain.action.viewmodel.transaction.SaveTrnLocallyAct.kt</ID>
    <ID>FinalNewline:ScreenTitle.kt$com.ivy.design.l3_ivyComponents.ScreenTitle.kt</ID>
    <ID>FinalNewline:SearchScreen.kt$com.ivy.wallet.ui.search.SearchScreen.kt</ID>
    <ID>FinalNewline:SearchViewModel.kt$com.ivy.wallet.ui.search.SearchViewModel.kt</ID>
    <ID>FinalNewline:SelectedCategory.kt$com.ivy.wallet.ui.statistic.level1.SelectedCategory.kt</ID>
    <ID>FinalNewline:ServerStopScreen.kt$com.ivy.wallet.ui.serverstop.ServerStopScreen.kt</ID>
    <ID>FinalNewline:ServerStopState.kt$com.ivy.wallet.ui.serverstop.ServerStopState.kt</ID>
    <ID>FinalNewline:ServerStopViewModel.kt$com.ivy.wallet.ui.serverstop.ServerStopViewModel.kt</ID>
    <ID>FinalNewline:SetPreferenceAct.kt$com.ivy.wallet.domain.action.settings.preference.SetPreferenceAct.kt</ID>
    <ID>FinalNewline:Settings.kt$com.ivy.wallet.domain.data.core.Settings.kt</ID>
    <ID>FinalNewline:SettingsAct.kt$com.ivy.wallet.domain.action.settings.SettingsAct.kt</ID>
    <ID>FinalNewline:SettingsDTO.kt$com.ivy.wallet.io.network.data.SettingsDTO.kt</ID>
    <ID>FinalNewline:SettingsDao.kt$com.ivy.wallet.io.persistence.dao.SettingsDao.kt</ID>
    <ID>FinalNewline:SettingsEntity.kt$com.ivy.wallet.io.persistence.data.SettingsEntity.kt</ID>
    <ID>FinalNewline:SettingsScreen.kt$com.ivy.wallet.ui.settings.SettingsScreen.kt</ID>
    <ID>FinalNewline:SettingsViewModel.kt$com.ivy.wallet.ui.settings.SettingsViewModel.kt</ID>
    <ID>FinalNewline:Shapes.kt$com.ivy.design.l1_buildingBlocks.Shapes.kt</ID>
    <ID>FinalNewline:SharedPrefs.kt$com.ivy.wallet.io.persistence.SharedPrefs.kt</ID>
    <ID>FinalNewline:ShortAmountTest.kt$com.ivy.wallet.ShortAmountTest.kt</ID>
    <ID>FinalNewline:ShouldHideBalanceAct.kt$com.ivy.wallet.domain.action.viewmodel.home.ShouldHideBalanceAct.kt</ID>
    <ID>FinalNewline:SignInRequest.kt$com.ivy.wallet.io.network.request.auth.SignInRequest.kt</ID>
    <ID>FinalNewline:SignUpRequest.kt$com.ivy.wallet.io.network.request.auth.SignUpRequest.kt</ID>
    <ID>FinalNewline:SmallTrnsPref.kt$com.ivy.wallet.domain.data.preference.SmallTrnsPref.kt</ID>
    <ID>FinalNewline:SmartTitleSuggestionsLogic.kt$com.ivy.wallet.domain.deprecated.logic.SmartTitleSuggestionsLogic.kt</ID>
    <ID>FinalNewline:SortOrder.kt$com.ivy.wallet.domain.data.SortOrder.kt</ID>
    <ID>FinalNewline:Spacers.kt$com.ivy.design.l1_buildingBlocks.Spacers.kt</ID>
    <ID>FinalNewline:SpendeeSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.SpendeeSteps.kt</ID>
    <ID>FinalNewline:StartDayOfMonthAct.kt$com.ivy.wallet.domain.action.global.StartDayOfMonthAct.kt</ID>
    <ID>FinalNewline:Suggestions.kt$com.ivy.wallet.ui.onboarding.components.Suggestions.kt</ID>
    <ID>FinalNewline:Switch.kt$com.ivy.design.l2_components.Switch.kt</ID>
    <ID>FinalNewline:SyncExchangeRatesAct.kt$com.ivy.wallet.domain.action.exchange.SyncExchangeRatesAct.kt</ID>
    <ID>FinalNewline:TestScreen.kt$com.ivy.wallet.ui.test.TestScreen.kt</ID>
    <ID>FinalNewline:TestViewModel.kt$com.ivy.wallet.ui.test.TestViewModel.kt</ID>
    <ID>FinalNewline:Theme.kt$com.ivy.design.l0_system.Theme.kt</ID>
    <ID>FinalNewline:TimePeriod.kt$com.ivy.wallet.ui.onboarding.model.TimePeriod.kt</ID>
    <ID>FinalNewline:TimeValue.kt$com.ivy.wallet.ui.charts.TimeValue.kt</ID>
    <ID>FinalNewline:Title.kt$com.ivy.wallet.ui.edit.core.Title.kt</ID>
    <ID>FinalNewline:Transaction.kt$com.ivy.wallet.domain.data.core.Transaction.kt</ID>
    <ID>FinalNewline:TransactionCard.kt$com.ivy.wallet.ui.component.transaction.TransactionCard.kt</ID>
    <ID>FinalNewline:TransactionDTO.kt$com.ivy.wallet.io.network.data.TransactionDTO.kt</ID>
    <ID>FinalNewline:TransactionDao.kt$com.ivy.wallet.io.persistence.dao.TransactionDao.kt</ID>
    <ID>FinalNewline:TransactionDateTime.kt$com.ivy.wallet.ui.edit.TransactionDateTime.kt</ID>
    <ID>FinalNewline:TransactionEntity.kt$com.ivy.wallet.io.persistence.data.TransactionEntity.kt</ID>
    <ID>FinalNewline:TransactionHistoryDateDivider.kt$com.ivy.wallet.domain.data.TransactionHistoryDateDivider.kt</ID>
    <ID>FinalNewline:TransactionHistoryItem.kt$com.ivy.wallet.domain.data.TransactionHistoryItem.kt</ID>
    <ID>FinalNewline:TransactionReminderLogic.kt$com.ivy.wallet.domain.deprecated.logic.notification.TransactionReminderLogic.kt</ID>
    <ID>FinalNewline:TransactionReminderWorker.kt$com.ivy.wallet.domain.deprecated.logic.notification.TransactionReminderWorker.kt</ID>
    <ID>FinalNewline:TransactionSectionDivider.kt$com.ivy.wallet.ui.component.transaction.TransactionSectionDivider.kt</ID>
    <ID>FinalNewline:TransactionService.kt$com.ivy.wallet.io.network.service.TransactionService.kt</ID>
    <ID>FinalNewline:TransactionSync.kt$com.ivy.wallet.domain.deprecated.sync.item.TransactionSync.kt</ID>
    <ID>FinalNewline:TransactionType.kt$com.ivy.wallet.domain.data.TransactionType.kt</ID>
    <ID>FinalNewline:TransactionUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.TransactionUploader.kt</ID>
    <ID>FinalNewline:TransactionViewModel.kt$com.ivy.wallet.ui.transaction.TransactionViewModel.kt</ID>
    <ID>FinalNewline:TransactionsDividerLine.kt$com.ivy.wallet.ui.component.transaction.TransactionsDividerLine.kt</ID>
    <ID>FinalNewline:TransactionsResponse.kt$com.ivy.wallet.io.network.request.transaction.TransactionsResponse.kt</ID>
    <ID>FinalNewline:TrnByIdAct.kt$com.ivy.wallet.domain.action.transaction.TrnByIdAct.kt</ID>
    <ID>FinalNewline:TrnDate.kt$com.ivy.wallet.ui.transaction.data.TrnDate.kt</ID>
    <ID>FinalNewline:TrnDateDividers.kt$com.ivy.wallet.domain.pure.transaction.TrnDateDividers.kt</ID>
    <ID>FinalNewline:TrnEvent.kt$com.ivy.wallet.ui.transaction.TrnEvent.kt</ID>
    <ID>FinalNewline:TrnExchangeRate.kt$com.ivy.wallet.ui.transaction.data.TrnExchangeRate.kt</ID>
    <ID>FinalNewline:TrnFunctions.kt$com.ivy.wallet.domain.pure.transaction.TrnFunctions.kt</ID>
    <ID>FinalNewline:TrnState.kt$com.ivy.wallet.ui.transaction.TrnState.kt</ID>
    <ID>FinalNewline:TrnsWithDateDivsAct.kt$com.ivy.wallet.domain.action.transaction.TrnsWithDateDivsAct.kt</ID>
    <ID>FinalNewline:TrnsWithRangeAndAccFiltersAct.kt$com.ivy.wallet.domain.action.transaction.TrnsWithRangeAndAccFiltersAct.kt</ID>
    <ID>FinalNewline:TypographyExt.kt$com.ivy.design.l0_system.TypographyExt.kt</ID>
    <ID>FinalNewline:UIExt.kt$com.ivy.wallet.utils.UIExt.kt</ID>
    <ID>FinalNewline:UUIDSerializer.kt$com.ivy.wallet.backup.kotlinxserilzation.UUIDSerializer.kt</ID>
    <ID>FinalNewline:UiText.kt$com.ivy.wallet.utils.UiText.kt</ID>
    <ID>FinalNewline:UpcomingAct.kt$com.ivy.wallet.domain.action.viewmodel.home.UpcomingAct.kt</ID>
    <ID>FinalNewline:UpdateAccCacheAct.kt$com.ivy.wallet.domain.action.viewmodel.home.UpdateAccCacheAct.kt</ID>
    <ID>FinalNewline:UpdateAccountRequest.kt$com.ivy.wallet.io.network.request.account.UpdateAccountRequest.kt</ID>
    <ID>FinalNewline:UpdateCategoriesCacheAct.kt$com.ivy.wallet.domain.action.viewmodel.home.UpdateCategoriesCacheAct.kt</ID>
    <ID>FinalNewline:UpdateLoanRecordRequest.kt$com.ivy.wallet.io.network.request.loan.UpdateLoanRecordRequest.kt</ID>
    <ID>FinalNewline:UpdateLoanRequest.kt$com.ivy.wallet.io.network.request.loan.UpdateLoanRequest.kt</ID>
    <ID>FinalNewline:UpdatePlannedPaymentRuleRequest.kt$com.ivy.wallet.io.network.request.planned.UpdatePlannedPaymentRuleRequest.kt</ID>
    <ID>FinalNewline:UpdateSettingsAct.kt$com.ivy.wallet.domain.action.settings.UpdateSettingsAct.kt</ID>
    <ID>FinalNewline:UpdateStartDayOfMonthAct.kt$com.ivy.wallet.domain.action.global.UpdateStartDayOfMonthAct.kt</ID>
    <ID>FinalNewline:UpdateTransactionRequest.kt$com.ivy.wallet.io.network.request.transaction.UpdateTransactionRequest.kt</ID>
    <ID>FinalNewline:UpdateUserInfoRequest.kt$com.ivy.wallet.io.network.request.auth.UpdateUserInfoRequest.kt</ID>
    <ID>FinalNewline:UpdateUserInfoResponse.kt$com.ivy.wallet.io.network.request.auth.UpdateUserInfoResponse.kt</ID>
    <ID>FinalNewline:UpdateWalletCategoryRequest.kt$com.ivy.wallet.io.network.request.category.UpdateWalletCategoryRequest.kt</ID>
    <ID>FinalNewline:UploadTrnToServerAct.kt$com.ivy.wallet.domain.action.viewmodel.transaction.UploadTrnToServerAct.kt</ID>
    <ID>FinalNewline:User.kt$com.ivy.wallet.domain.data.core.User.kt</ID>
    <ID>FinalNewline:UserDTO.kt$com.ivy.wallet.io.network.data.UserDTO.kt</ID>
    <ID>FinalNewline:UserDao.kt$com.ivy.wallet.io.persistence.dao.UserDao.kt</ID>
    <ID>FinalNewline:UserEntity.kt$com.ivy.wallet.io.persistence.data.UserEntity.kt</ID>
    <ID>FinalNewline:UserStats.kt$com.ivy.wallet.ui.analytics.model.UserStats.kt</ID>
    <ID>FinalNewline:UserStatsTab.kt$com.ivy.wallet.ui.analytics.tab.UserStatsTab.kt</ID>
    <ID>FinalNewline:UtilExt.kt$com.ivy.wallet.utils.UtilExt.kt</ID>
    <ID>FinalNewline:Utils.kt$com.ivy.wallet.domain.pure.util.Utils.kt</ID>
    <ID>FinalNewline:Utils.kt$com.ivy.wallet.ui.component.transaction.Utils.kt</ID>
    <ID>FinalNewline:View.kt$com.ivy.design.utils.View.kt</ID>
    <ID>FinalNewline:WalletAccountLogic.kt$com.ivy.wallet.domain.deprecated.logic.WalletAccountLogic.kt</ID>
    <ID>FinalNewline:WalletBalanceWidget.kt$com.ivy.wallet.ui.widget.WalletBalanceWidget.kt</ID>
    <ID>FinalNewline:WalletBalanceWidgetActions.kt$com.ivy.wallet.ui.widget.WalletBalanceWidgetActions.kt</ID>
    <ID>FinalNewline:WalletBalanceWidgetContent.kt$com.ivy.wallet.ui.widget.WalletBalanceWidgetContent.kt</ID>
    <ID>FinalNewline:WalletByBudgetBakersSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.WalletByBudgetBakersSteps.kt</ID>
    <ID>FinalNewline:WalletCategoriesResponse.kt$com.ivy.wallet.io.network.request.category.WalletCategoriesResponse.kt</ID>
    <ID>FinalNewline:WalletCategoryLogic.kt$com.ivy.wallet.domain.deprecated.logic.WalletCategoryLogic.kt</ID>
    <ID>FinalNewline:WalletCharts.kt$com.ivy.wallet.domain.pure.charts.WalletCharts.kt</ID>
    <ID>FinalNewline:WalletDAOs.kt$com.ivy.wallet.domain.pure.data.WalletDAOs.kt</ID>
    <ID>FinalNewline:WalletUtil.kt$com.ivy.wallet.utils.WalletUtil.kt</ID>
    <ID>FinalNewline:WalletValueFunctions.kt$com.ivy.wallet.domain.pure.transaction.WalletValueFunctions.kt</ID>
    <ID>FinalNewline:WidgetBase.kt$com.ivy.wallet.ui.widget.WidgetBase.kt</ID>
    <ID>FinalNewline:WrapContentRow.kt$com.ivy.wallet.ui.theme.components.WrapContentRow.kt</ID>
    <ID>FinalNewline:ZipUtils.kt$com.ivy.wallet.domain.deprecated.logic.zip.ZipUtils.kt</ID>
    <ID>FinalNewline:dependencies.kt$com.ivy.wallet.buildsrc.dependencies.kt</ID>
    <ID>FinalNewline:ivy.lint.gradle.kts$.ivy.lint.gradle.kts</ID>
    <ID>FinalNewline:settings.gradle.kts$.settings.gradle.kts</ID>
    <ID>ForbiddenComment:AmountFormatting.kt$//TODO: Review, might cause trouble when integrating crypto</ID>
    <ID>ForbiddenComment:BudgetViewModel.kt$BudgetViewModel$//TODO: Re-work this by creating an FPAction for it</ID>
    <ID>ForbiddenComment:ChartsViewModel.kt$ChartsViewModel$//TODO: Implement</ID>
    <ID>ForbiddenComment:HomeViewModel.kt$HomeViewModel$//TODO: Refactor</ID>
    <ID>ForbiddenComment:ImportResultUI.kt$//TODO: Implement "See failed imports"</ID>
    <ID>ForbiddenComment:InputField.kt$//TODO: Fix bug where cursor color isn't updated after theme switch</ID>
    <ID>ForbiddenComment:ItemStatisticViewModel.kt$ItemStatisticViewModel$//TODO: Rework Overdue to FP</ID>
    <ID>ForbiddenComment:ItemStatisticViewModel.kt$ItemStatisticViewModel$//TODO: Rework Upcoming to FP</ID>
    <ID>ForbiddenComment:IvyLineChart.kt$//TODO: Fix</ID>
    <ID>ForbiddenComment:IvyLineChart.kt$//marginFromX //TODO: FIX</ID>
    <ID>ForbiddenComment:OnboardingViewModel.kt$OnboardingViewModel$// TODO: Delete this legacy code</ID>
    <ID>ForbiddenComment:RestClient.kt$RestClient.Companion$//TODO: SECURITY - Considering trusting only Ivy's cert</ID>
    <ID>ForbiddenComment:Transaction.kt$Transaction$//TODO: Remove default values &amp; introduce Transaction#dummy() method</ID>
    <ID>ForbiddenComment:TransactionCard.kt$//TODO: Optimize this</ID>
    <ID>ForbiddenComment:TransactionViewModel.kt$TransactionViewModel$//TODO: Handle properly transfers exchange rate</ID>
    <ID>ForbiddenComment:TransactionViewModel.kt$TransactionViewModel$//TODO: Handle transfers properly</ID>
    <ID>ForbiddenComment:WalletAccountLogic.kt$WalletAccountLogic$//TODO: Remove this once Bank Integration trn sync is properly implemented</ID>
    <ID>ForbiddenComment:WalletCategoryLogic.kt$WalletCategoryLogic$//TODO: Transfer zero operation</ID>
    <ID>FunctionNaming:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$internal fun io.gitlab.arturbosch.detekt.extensions.DetektExtension.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$internal fun org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors4ymijgaek646mzru18sdmblu7.kt$internal fun org.gradle.api.Project.`detekt`(configure: Action&lt;io.gitlab.arturbosch.detekt.extensions.DetektExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$internal fun org.gradle.api.artifacts.dsl.DependencyHandler.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$internal fun org.gradle.api.Project.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$internal fun org.gradle.api.Project.`reporting`(configure: Action&lt;org.gradle.api.reporting.ReportingExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorseessl0al0otcsbyqqruvoncpd.kt$internal fun org.gradle.api.reporting.ReportingExtension.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:AccountModal.kt$@Composable fun BoxWithConstraintsScope.AccountModal( modal: AccountModalData?, onCreateAccount: (CreateAccountData) -&gt; Unit, onEditAccount: (Account, balance: Double) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:AccountModal.kt$@Composable private fun AccountCurrency( currencyCode: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AccountModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:AccountsTab.kt$@Composable fun BoxWithConstraintsScope.AccountsTab(screen: Main)</ID>
    <ID>FunctionNaming:AccountsTab.kt$@Composable private fun AccountCard( baseCurrency: String, accountData: AccountData, onBalanceClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AccountsTab.kt$@Composable private fun AccountHeader( accountData: AccountData, currency: String, baseCurrency: String, contrastColor: Color, onBalanceClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AccountsTab.kt$@Composable private fun BoxWithConstraintsScope.UI( state: AccountState = AccountState(), onEventHandler: (AccountsEvent) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:AccountsTab.kt$@Preview @Composable private fun PreviewAccountsTab()</ID>
    <ID>FunctionNaming:AddKeywordModal.kt$@Composable fun BoxWithConstraintsScope.AddKeywordModal( id: UUID = UUID.randomUUID(), keyword: String, visible: Boolean, dismiss: () -&gt; Unit, onKeywordChanged: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:AddKeywordModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:AddPrimaryAttributeButton.kt$@Composable fun AddPrimaryAttributeButton( @DrawableRes icon: Int, text: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AddPrimaryAttributeButton.kt$@Preview @Composable private fun PreviewAddPrimaryAttributeButton()</ID>
    <ID>FunctionNaming:AddRateModal.kt$@Composable fun BoxWithConstraintsScope.AddRateModal( visible: Boolean, baseCurrency: String, dismiss: () -&gt; Unit, onAdd: (RatesEvent.AddRate) -&gt; Unit, )</ID>
    <ID>FunctionNaming:AddRateModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:AmountCurrency.kt$@Composable fun AmountCurrencyB1( amount: Double, currency: String, amountFontWeight: FontWeight = FontWeight.Bold, textColor: Color = UI.colors.pureInverse, shortenBigNumbers: Boolean = false )</ID>
    <ID>FunctionNaming:AmountCurrency.kt$@Composable fun AmountCurrencyB1Row( amount: Double, currency: String, amountFontWeight: FontWeight = FontWeight.Bold, textColor: Color = UI.colors.pureInverse )</ID>
    <ID>FunctionNaming:AmountCurrency.kt$@Composable fun AmountCurrencyB2Row( amount: Double, currency: String, amountFontWeight: FontWeight = FontWeight.ExtraBold, textColor: Color = UI.colors.pureInverse )</ID>
    <ID>FunctionNaming:AmountCurrency.kt$@Composable fun AmountCurrencyCaption( amount: Double, currency: String, amountFontWeight: FontWeight = FontWeight.ExtraBold, textColor: Color = UI.colors.pureInverse )</ID>
    <ID>FunctionNaming:AmountCurrency.kt$@Composable fun AmountCurrencyH1( amount: Double, currency: String, textColor: Color = UI.colors.pureInverse )</ID>
    <ID>FunctionNaming:AmountCurrency.kt$@Composable fun AmountCurrencyH2Row( amount: Double, currency: String, textColor: Color = UI.colors.pureInverse )</ID>
    <ID>FunctionNaming:AmountModal.kt$@Composable fun AmountCurrency( amount: String, currency: String )</ID>
    <ID>FunctionNaming:AmountModal.kt$@Composable fun AmountInput( currency: String, amount: String, decimalCountMax: Int = 2, setAmount: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:AmountModal.kt$@Composable fun AmountKeyboard( forCalculator: Boolean, ZeroRow: (@Composable RowScope.() -&gt; Unit)? = null, FirstRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, SecondRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, ThirdRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, FourthRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, onNumberPressed: (String) -&gt; Unit, onDecimalPoint: () -&gt; Unit, onBackspace: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:AmountModal.kt$@Composable fun BoxWithConstraintsScope.AmountModal( id: UUID, visible: Boolean, currency: String, initialAmount: Double?, decimalCountMax: Int = 2, Header: (@Composable () -&gt; Unit)? = null, amountSpacerTop: Dp = 64.dp, dismiss: () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, )</ID>
    <ID>FunctionNaming:AmountModal.kt$@Composable fun CircleNumberButton( forCalculator: Boolean, value: String, onNumberPressed: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:AmountModal.kt$@Composable fun KeypadCircleButton( text: String, textColor: Color = UI.colors.pureInverse, testTag: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AmountModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:AnalyticsReportScreen.kt$@Composable fun BoxWithConstraintsScope.AnalyticsReport(screen: AnalyticsReport)</ID>
    <ID>FunctionNaming:AnalyticsReportScreen.kt$@Composable private fun ColumnScope.Content( selectedTab: AnalyticsTab, onboardingReport: OnboardingReport, kpis: KPIs, health: Health, userStats: UserStats, setSelectedTab: (AnalyticsTab) -&gt; Unit, )</ID>
    <ID>FunctionNaming:AnalyticsReportScreen.kt$@Composable private fun UI( selectedTab: AnalyticsTab, startDate: LocalDateTime?, endDate: LocalDateTime?, onboardingReport: OnboardingReport?, kpis: KPIs?, health: Health?, userStats: UserStats?, loading: Boolean, onRefresh: () -&gt; Unit = {}, onSetStartDate: (LocalDateTime?) -&gt; Unit = {}, onSetEndDate: (LocalDateTime?) -&gt; Unit = {}, onSelectTab: (AnalyticsTab) -&gt; Unit = {}, onNukeTestEvents: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:AnalyticsReportScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:AppLockedScreen.kt$@Composable fun BoxWithConstraintsScope.AppLockedScreen( onShowOSBiometricsModal: () -&gt; Unit, onContinueWithoutAuthentication: () -&gt; Unit )</ID>
    <ID>FunctionNaming:AppLockedScreen.kt$@Preview @Composable private fun Preview_Locked()</ID>
    <ID>FunctionNaming:BackBottomBar.kt$@Composable fun BoxWithConstraintsScope.BackBottomBar( bottomInset: Dp = navigationBarInset().toDensityDp(), onBack: () -&gt; Unit, PrimaryAction: @Composable () -&gt; Unit, )</ID>
    <ID>FunctionNaming:BalanceRow.kt$@Composable fun BalanceRow( modifier: Modifier = Modifier, currency: String, balance: Double, hiddenMode: Boolean = false, textColor: Color = UI.colors.pureInverse, decimalPaddingTop: Dp = 12.dp, spacerCurrency: Dp = 12.dp, spacerDecimal: Dp = 8.dp, currencyFontSize: TextUnit? = null, integerFontSize: TextUnit? = null, decimalFontSize: TextUnit? = null, currencyUpfront: Boolean = true, balanceAmountPrefix: String? = null, shortenBigNumbers: Boolean = false, )</ID>
    <ID>FunctionNaming:BalanceRow.kt$@Composable fun BalanceRowMedium( modifier: Modifier = Modifier, textColor: Color = UI.colors.pureInverse, currency: String, balance: Double, balanceAmountPrefix: String? = null, currencyUpfront: Boolean = true, shortenBigNumbers: Boolean = false, hiddenMode: Boolean = false, )</ID>
    <ID>FunctionNaming:BalanceRow.kt$@Composable fun BalanceRowMini( modifier: Modifier = Modifier, textColor: Color = UI.colors.pureInverse, currency: String, balance: Double, balanceAmountPrefix: String? = null, currencyUpfront: Boolean = true, shortenBigNumbers: Boolean = false, hiddenMode: Boolean = false, )</ID>
    <ID>FunctionNaming:BalanceRow.kt$@Composable private fun Currency( currency: String, currencyFontSize: TextUnit?, textColor: Color, )</ID>
    <ID>FunctionNaming:BalanceRow.kt$@Preview @Composable private fun Preview_Default()</ID>
    <ID>FunctionNaming:BalanceRow.kt$@Preview @Composable private fun Preview_Medium()</ID>
    <ID>FunctionNaming:BalanceRow.kt$@Preview @Composable private fun Preview_Mini()</ID>
    <ID>FunctionNaming:BalanceScreen.kt$@Composable fun BoxWithConstraintsScope.BalanceScreen(screen: BalanceScreen)</ID>
    <ID>FunctionNaming:BalanceScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( period: TimePeriod, baseCurrencyCode: String, currentBalance: Double, plannedPaymentsAmount: Double, balanceAfterPlannedPayments: Double, onSetPeriod: (TimePeriod) -&gt; Unit = {}, onPreviousMonth: () -&gt; Unit = {}, onNextMonth: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:BalanceScreen.kt$@Composable private fun ColumnScope.BalanceAfterPlannedPayments( currency: String, currentBalance: Double, plannedPaymentsAmount: Double, balanceAfterPlannedPayments: Double )</ID>
    <ID>FunctionNaming:BalanceScreen.kt$@Composable private fun ColumnScope.CloseButton()</ID>
    <ID>FunctionNaming:BalanceScreen.kt$@Composable private fun ColumnScope.CurrentBalance( currency: String, currentBalance: Double )</ID>
    <ID>FunctionNaming:BalanceScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Composable fun BudgetBattery( modifier: Modifier = Modifier, currency: String, expenses: Double, budget: Double, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_budget_0()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_100()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_125()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_25()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_50()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_75()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_90()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_expenses_0()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_expenses_negative()</ID>
    <ID>FunctionNaming:BudgetBattery.kt$@Preview @Composable private fun Preview_spent_very_low()</ID>
    <ID>FunctionNaming:BudgetBottomBar.kt$@Composable internal fun BoxWithConstraintsScope.BudgetBottomBar( onClose: () -&gt; Unit, onAdd: () -&gt; Unit )</ID>
    <ID>FunctionNaming:BudgetBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>FunctionNaming:BudgetModal.kt$@Composable fun BoxWithConstraintsScope.BudgetModal( modal: BudgetModalData?, onCreate: (CreateBudgetData) -&gt; Unit, onEdit: (Budget) -&gt; Unit, onDelete: (Budget) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:BudgetModal.kt$@Composable fun ModalNameInput( hint: String, autoFocusKeyboard: Boolean, textFieldValue: TextFieldValue, setTextFieldValue: (TextFieldValue) -&gt; Unit, )</ID>
    <ID>FunctionNaming:BudgetModal.kt$@Composable private fun CategoriesRow( categories: List&lt;Category&gt;, budgetCategoryIds: List&lt;UUID&gt;, onSetBudgetCategoryIds: (List&lt;UUID&gt;) -&gt; Unit, )</ID>
    <ID>FunctionNaming:BudgetModal.kt$@Preview @Composable private fun Preview_create()</ID>
    <ID>FunctionNaming:BudgetModal.kt$@Preview @Composable private fun Preview_edit()</ID>
    <ID>FunctionNaming:BudgetScreen.kt$@Composable fun BoxWithConstraintsScope.BudgetScreen(screen: BudgetScreen)</ID>
    <ID>FunctionNaming:BudgetScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( timeRange: FromToTimeRange?, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, displayBudgets: List&lt;DisplayBudget&gt;, appBudgetMax: Double, categoryBudgetsTotal: Double, onCreateBudget: (CreateBudgetData) -&gt; Unit = {}, onEditBudget: (Budget) -&gt; Unit = {}, onDeleteBudget: (Budget) -&gt; Unit = {}, onReorder: (List&lt;DisplayBudget&gt;) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:BudgetScreen.kt$@Composable private fun BudgetItem( displayBudget: DisplayBudget, baseCurrency: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:BudgetScreen.kt$@Composable private fun NoBudgetsEmptyState( modifier: Modifier = Modifier, emptyStateTitle: String, emptyStateText: String, )</ID>
    <ID>FunctionNaming:BudgetScreen.kt$@Composable private fun Toolbar( timeRange: FromToTimeRange?, baseCurrency: String, appBudgetMax: Double, categoryBudgetsTotal: Double, setReorderModalVisible: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:BudgetScreen.kt$@Preview @Composable private fun Preview_Budgets()</ID>
    <ID>FunctionNaming:BudgetScreen.kt$@Preview @Composable private fun Preview_Empty()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Composable fun BufferBattery( modifier: Modifier = Modifier, buffer: Double, balance: Double, currency: String, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_0()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_100()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_125()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_25()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_50()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_75()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_90()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_balance_0()</ID>
    <ID>FunctionNaming:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_very_low()</ID>
    <ID>FunctionNaming:BufferModal.kt$@Composable fun BoxWithConstraintsScope.BufferModal( modal: BufferModalData?, dismiss: () -&gt; Unit, onBufferChanged: (Double) -&gt; Unit )</ID>
    <ID>FunctionNaming:Button.kt$@Composable fun Button( modifier: Modifier = Modifier, text: String, background: Background = Background.Solid( color = UI.colors.primary, shape = UI.shapes.rFull, padding = padding( horizontal = 24.dp, vertical = 12.dp ) ), textStyle: TextStyle = UI.typo.b2.style( color = White, textAlign = TextAlign.Center ), onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:Button.kt$@Preview @Composable private fun Preview_FillMaxWidth()</ID>
    <ID>FunctionNaming:Button.kt$@Preview @Composable private fun Preview_Outlined()</ID>
    <ID>FunctionNaming:Button.kt$@Preview @Composable private fun Preview_Solid()</ID>
    <ID>FunctionNaming:ButtonWithIcon.kt$@Composable fun Button( modifier: Modifier = Modifier, text: String, mode: Mode = Mode.WRAP_CONTENT, background: Background = Background.Solid( color = UI.colors.primary, shape = UI.shapes.rFull, padding = padding( horizontal = 24.dp, vertical = 12.dp ) ), textStyle: TextStyle = UI.typo.b1.style( color = White, textAlign = TextAlign.Center ), @DrawableRes iconLeft: Int? = null, @DrawableRes iconRight: Int? = null, iconTint: Color = White, iconPadding: Dp = 12.dp, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconLeft_FillMax()</ID>
    <ID>FunctionNaming:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconLeft_Wrap()</ID>
    <ID>FunctionNaming:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconRight_FillMax()</ID>
    <ID>FunctionNaming:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconRight_Wrap()</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable fun CSVScreen( screen: CSVScreen )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable fun LabelContainsField( label: String, value: String, onValueChange: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable fun Spacer8(horizontal: Boolean = false)</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun AmountMetadata( multiplier: Int, onMetaChange: (Int) -&gt; Unit, )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun CSVCell( text: String, header: Boolean, even: Boolean )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun CSVRow( row: CSVRow, header: Boolean, even: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun DateMetadataUI( metadata: DateMetadata, onEvent: (CSVEvent) -&gt; Unit, )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun EnabledButton( text: String, enabled: Boolean, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun ImportButton( onFilePicked: (Uri) -&gt; Unit, )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun ImportUI( state: CSVState, launchedFromOnboarding: Boolean, onEvent: (CSVEvent) -&gt; Unit, )</ID>
    <ID>FunctionNaming:CSVScreen.kt$@Composable private fun TypeMetadata( metadata: TrnTypeMetadata, onEvent: (CSVEvent) -&gt; Unit )</ID>
    <ID>FunctionNaming:CalculatorModal.kt$@Composable fun BoxWithConstraintsScope.CalculatorModal( id: UUID = UUID.randomUUID(), initialAmount: Double?, visible: Boolean, currency: String, dismiss: () -&gt; Unit, onCalculation: (Double) -&gt; Unit )</ID>
    <ID>FunctionNaming:CalculatorModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:CategoriesBottomBar.kt$@Composable internal fun BoxWithConstraintsScope.CategoriesBottomBar( onClose: () -&gt; Unit, onAddCategory: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CategoriesBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable fun AddedSpent( modifier: Modifier = Modifier, textColor: Color = UI.colors.pureInverse, dividerColor: Color = UI.colors.medium, monthlyIncome: Double, monthlyExpenses: Double, currency: String, center: Boolean = true, dividerSpacer: Dp? = null, )</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable fun BoxWithConstraintsScope.CategoriesScreen(screen: Categories)</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable fun BoxWithConstraintsScope.SortModal( title: String = stringResource(R.string.sort_by), items: List&lt;SortOrder&gt;, visible: Boolean, initialType: SortOrder, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onSortOrderChanged: (SortOrder) -&gt; Unit )</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( state: CategoriesScreenState = CategoriesScreenState(), onEvent: (CategoriesScreenEvent) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable private fun CategoryCard( currency: String, categoryData: CategoryData, onLongClick: () -&gt; Unit, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable private fun CategoryHeader( categoryData: CategoryData, currency: String, contrastColor: Color, )</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable private fun LabelAmount( label: String, amount: Double, currency: String, textColor: Color, center: Boolean )</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Composable private fun SelectTypeButton( text: String, @DrawableRes icon: Int, selected: Boolean, selectedGradient: Gradient = GradientGreen, textSelectedColor: Color = White, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CategoriesScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:Category.kt$@Composable fun Category( category: Category?, onChooseCategory: () -&gt; Unit )</ID>
    <ID>FunctionNaming:Category.kt$@Composable private fun CategoryButton( category: Category, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:CategoryCharts.kt$@Composable private fun CategoriesChart( period: ChartPeriod, title: String, titleColor: Color = UI.colors.pureInverse, baseCurrencyCode: String, categoryValues: List&lt;CategoryValues&gt;, countChart: Boolean, )</ID>
    <ID>FunctionNaming:CategoryModal.kt$@Composable fun BoxWithConstraintsScope.CategoryModal( modal: CategoryModalData?, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:CategoryModal.kt$@Composable fun IconNameRow( hint: String, @DrawableRes defaultIcon: Int, color: Color, icon: String?, autoFocusKeyboard: Boolean, nameTextFieldValue: TextFieldValue, setNameTextFieldValue: (TextFieldValue) -&gt; Unit, showChooseIconModal: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CategoryModal.kt$@Preview @Composable private fun PreviewCategoryModal()</ID>
    <ID>FunctionNaming:ChangeTransactionTypeModal.kt$@Composable fun BoxWithConstraintsScope.ChangeTransactionTypeModal( title: String = stringResource(R.string.set_transaction_type), visible: Boolean, includeTransferType: Boolean, initialType: TransactionType, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onTransactionTypeChanged: (TransactionType) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChangeTransactionTypeModal.kt$@Composable private fun TransactionTypeButton( transactionType: TransactionType, selected: Boolean, selectedGradient: Gradient, textSelectedColor: Color, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ChangeTransactionTypeModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ChartsScreen.kt$@Composable fun BoxWithConstraintsScope.ChartsScreen(screen: Charts)</ID>
    <ID>FunctionNaming:ChartsScreen.kt$@Composable private fun ChartButton( modifier: Modifier = Modifier, chartType: ChartType, selected: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ChartsScreen.kt$@Composable private fun ChartsType( selectedChartType: ChartType, onSetChartType: (ChartType) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChartsScreen.kt$@Composable private fun Period( period: ChartPeriod, onSetPeriod: (ChartPeriod) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChartsScreen.kt$@Composable private fun Toolbar()</ID>
    <ID>FunctionNaming:ChartsScreen.kt$@Composable private fun UI( period: ChartPeriod, baseCurrencyCode: String, balanceChart: List&lt;SingleChartPoint&gt; = emptyList(), incomeExpenseChart: List&lt;IncomeExpenseChartPoint&gt; = emptyList(), categories: List&lt;Category&gt; = emptyList(), categoryExpenseValues: List&lt;CategoryValues&gt; = emptyList(), categoryExpenseCount: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeValues: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeCount: List&lt;CategoryValues&gt; = emptyList(), onLoadCategory: (Category) -&gt; Unit = {}, onRemoveCategory: (Category) -&gt; Unit = {}, onChangePeriod: (ChartPeriod) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:ChartsScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:Checkbox.kt$@Composable fun Checkbox( modifier: Modifier = Modifier, checked: Boolean, contentDescription: String = "checkbox", onCheckedChange: (checked: Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:Checkbox.kt$@Composable fun CheckboxWithText( modifier: Modifier = Modifier, checked: Boolean, text: String, textStyle: TextStyle = UI.typo.b2.style( color = UI.colors.pureInverse, fontWeight = FontWeight.SemiBold ), onCheckedChange: (checked: Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:Checkbox.kt$@Preview @Composable private fun PreviewIvyCheckboxWithText()</ID>
    <ID>FunctionNaming:ChooseCategoryModal.kt$@Composable fun AddNewButton( modifier: Modifier = Modifier, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ChooseCategoryModal.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.ChooseCategoryModal( id: UUID = UUID.randomUUID(), visible: Boolean, initialCategory: Category?, categories: List&lt;Category&gt;, showCategoryModal: (Category?) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ChooseCategoryModal.kt$@ExperimentalFoundationApi @Composable private fun CategoryButton( category: Category, selected: Boolean, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onDeselect: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:ChooseCategoryModal.kt$@ExperimentalFoundationApi @Composable private fun CategoryPicker( categories: List&lt;Category&gt;, selectedCategory: Category?, showCategoryModal: (Category?) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onSelected: (Category?) -&gt; Unit, )</ID>
    <ID>FunctionNaming:ChooseCategoryModal.kt$@ExperimentalFoundationApi @Preview @Composable private fun PreviewChooseCategoryModal()</ID>
    <ID>FunctionNaming:ChooseIconModal.kt$@Composable fun BoxWithConstraintsScope.ChooseIconModal( visible: Boolean, initialIcon: String?, color: Color, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onIconChosen: (String?) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChooseIconModal.kt$@Composable private fun Icon( icon: String, selected: Boolean, color: Color, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:ChooseIconModal.kt$@Composable private fun IconsRow( icons: List&lt;String&gt;, selectedIcon: String?, color: Color, onIconSelected: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChooseIconModal.kt$@Composable private fun Section( title: String )</ID>
    <ID>FunctionNaming:ChooseIconModal.kt$@Preview @Composable private fun ChooseIconModal()</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Composable fun BoxWithConstraintsScope.ChoosePeriodModal( modal: ChoosePeriodModalData?, dismiss: () -&gt; Unit, onPeriodSelected: (TimePeriod) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Composable private fun AllTime( timeRange: FromToTimeRange?, onSelected: (FromToTimeRange?) -&gt; Unit, )</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Composable private fun ChooseMonth( selectedMonthYear: MonthYear?, onSelected: (MonthYear) -&gt; Unit, )</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Composable private fun FromToRange( timeRange: FromToTimeRange?, onSelected: (FromToTimeRange?) -&gt; Unit, )</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Composable private fun IntervalFromToDate( border: IntervalBorder, dateTime: LocalDateTime?, otherEndDateTime: LocalDateTime?, onSelected: (LocalDateTime?) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Composable private fun LastNPeriod( modalScrollState: ScrollState, lastNTimeRange: LastNTimeRange?, onSelected: (LastNTimeRange) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Composable private fun MonthButton( modifier: Modifier = Modifier, selected: Boolean, text: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Preview @Composable private fun Preview_FromTo()</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Preview @Composable private fun Preview_LastN()</ID>
    <ID>FunctionNaming:ChoosePeriodModal.kt$@Preview @Composable private fun Preview_MonthSelected()</ID>
    <ID>FunctionNaming:ChooseStartDateOfMonthModal.kt$@Composable fun BoxWithConstraintsScope.ChooseStartDateOfMonthModal( id: UUID = UUID.randomUUID(), visible: Boolean, selectedStartDateOfMonth: Int, dismiss: () -&gt; Unit, onStartDateOfMonthSelected: (Int) -&gt; Unit, )</ID>
    <ID>FunctionNaming:ChooseStartDateOfMonthModal.kt$@Composable private fun ColumnScope.NumberRow( selectedNumber: Int, fromInclusive: Int, toInclusive: Int, onClick: (Int) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChooseStartDateOfMonthModal.kt$@Composable private fun NumberView( number: Int, selected: Boolean, onClick: (Int) -&gt; Unit )</ID>
    <ID>FunctionNaming:ChooseStartDateOfMonthModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:CircleButtons.kt$@Composable fun BackButton( modifier: Modifier = Modifier, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CircleButtons.kt$@Composable fun CircleButton( modifier: Modifier = Modifier, @DrawableRes icon: Int, contentDescription: String = "icon", backgroundColor: Color = UI.colors.pure, borderColor: Color = UI.colors.medium, tint: Color? = UI.colors.pureInverse, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CircleButtons.kt$@Composable fun CircleButtonFilled( modifier: Modifier = Modifier, @DrawableRes icon: Int, contentDescription: String = "icon", backgroundColor: Color = UI.colors.medium, tint: Color? = UI.colors.pureInverse, clickAreaPadding: Dp = 8.dp, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CircleButtons.kt$@Composable fun CircleButtonFilledGradient( modifier: Modifier = Modifier, @DrawableRes icon: Int, contentDescription: String = "icon", iconPadding: Dp = 8.dp, backgroundGradient: Gradient = Gradient.solid(UI.colors.medium), tint: Color? = UI.colors.pureInverse, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CircleButtons.kt$@Composable fun CloseButton( modifier: Modifier = Modifier, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CircleButtons.kt$@Preview @Composable private fun PreviewBackButton()</ID>
    <ID>FunctionNaming:CircleButtons.kt$@Preview @Composable private fun PreviewCloseButton()</ID>
    <ID>FunctionNaming:ColumnRoot.kt$@Composable fun ColumnRoot( modifier: Modifier = Modifier, statusBarPadding: Boolean = true, navigationBarsPadding: Boolean = true, verticalArrangement: Arrangement.Vertical = Arrangement.Top, horizontalAlignment: Alignment.Horizontal = Alignment.Start, Content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:CurrencyModal.kt$@Composable fun BoxWithConstraintsScope.CurrencyModal( title: String, initialCurrency: IvyCurrency?, visible: Boolean, dismiss: () -&gt; Unit, id: UUID = UUID.randomUUID(), onSetCurrency: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:CurrencyModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:CurrencyPicker.kt$@Composable fun CurrencyPicker( modifier: Modifier = Modifier, initialSelectedCurrency: IvyCurrency?, preselectedCurrency: IvyCurrency = IvyCurrency.getDefault(), includeKeyboardShownInsetSpacer: Boolean, lastItemSpacer: Dp = 0.dp, onKeyboardShown: (keyboardVisible: Boolean) -&gt; Unit = {}, onSelectedCurrencyChanged: (IvyCurrency) -&gt; Unit )</ID>
    <ID>FunctionNaming:CurrencyPicker.kt$@Composable private fun CurrencyItemCard( currency: IvyCurrency, selected: Boolean, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:CurrencyPicker.kt$@Composable private fun CurrencyList( searchQueryLowercase: String, selectedCurrency: IvyCurrency, lastItemSpacer: Dp, onCurrencySelected: (IvyCurrency) -&gt; Unit )</ID>
    <ID>FunctionNaming:CurrencyPicker.kt$@Composable private fun LetterDividerItem( spacerTop: Dp, letterDivider: LetterDivider )</ID>
    <ID>FunctionNaming:CurrencyPicker.kt$@Composable private fun SearchInput( searchTextFieldValue: TextFieldValue, onSetSearchTextFieldValue: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:CurrencyPicker.kt$@Composable private fun SelectedCurrencyCard( currency: IvyCurrency, preselected: Boolean, )</ID>
    <ID>FunctionNaming:CurrencyPicker.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:CustomExchangeRateCard.kt$@Composable fun CustomExchangeRateCard( modifier: Modifier = Modifier, title: String = stringResource(R.string.exchange_rate), fromCurrencyCode: String, toCurrencyCode: String, exchangeRate: Double, onRefresh: () -&gt; Unit = {}, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CustomExchangeRateCard.kt$@Preview @Composable private fun Preview_OneTime()</ID>
    <ID>FunctionNaming:CustomerJourney.kt$@Composable fun CustomerJourney( customerJourneyCards: List&lt;CustomerJourneyCardData&gt;, onDismiss: (CustomerJourneyCardData) -&gt; Unit )</ID>
    <ID>FunctionNaming:CustomerJourney.kt$@Composable fun CustomerJourneyCard( cardData: CustomerJourneyCardData, onDismiss: () -&gt; Unit, onCTA: () -&gt; Unit )</ID>
    <ID>FunctionNaming:CustomerJourney.kt$@Preview @Composable private fun PreviewCard()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewAddPlannedPaymentCard()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewAdjustBalanceCard()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewDidYouKnow_ExpensesPieChart()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewDidYouKnow_PinAddTransactionWidgetCard()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewIvyTelegram_2()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewIvyWallet_gitHubBackups()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewIvyWallet_isOpenSource()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewJoinTelegram()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewRateUsCard()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewRateUs_2()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewShareIvyWallet()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$fun didYouKnow_expensesPieChart()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$fun didYouKnow_pinAddTransactionWidgetCard()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$fun rateUsCard_2()</ID>
    <ID>FunctionNaming:DataCircle.kt$@Composable fun DataCircle( count: Int, metric: String, circleColor: Color, parentCount: Int?, avgCount: Double? = null )</ID>
    <ID>FunctionNaming:DefaultImportSteps.kt$@Composable fun DefaultImportSteps( videoUrl: String? = null, articleUrl: String? = null, onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:DeleteButton.kt$@Composable fun DeleteButton( modifier: Modifier = Modifier, hasShadow: Boolean = true, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:DeleteModal.kt$@Composable fun BoxWithConstraintsScope.DeleteModal( id: UUID = UUID.randomUUID(), title: String, description: String, visible: Boolean, buttonText: String = stringResource(R.string.delete), iconStart: Int = R.drawable.ic_delete, dismiss: () -&gt; Unit, onDelete: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Description.kt$@Composable fun Description( description: String?, onAddDescription: () -&gt; Unit, onEditDescription: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:Description.kt$@Composable private fun DescriptionText( description: String, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Description.kt$@Preview @Composable private fun PreviewDescription_Empty()</ID>
    <ID>FunctionNaming:Description.kt$@Preview @Composable private fun PreviewDescription_withText()</ID>
    <ID>FunctionNaming:DescriptionModal.kt$@Composable fun BoxWithConstraintsScope.DescriptionModal( id: UUID = UUID.randomUUID(), visible: Boolean, description: String?, onDescriptionChanged: (String?) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:DescriptionModal.kt$@Preview @Composable private fun PreviewDescriptionModal_emptyText()</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun &lt;T : ModuleDependency&gt; DependencyHandler.`detekt`( dependency: T, dependencyConfiguration: T.() -&gt; Unit ): T</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun ArtifactHandler.`detekt`( artifactNotation: Any, configureAction: ConfigurablePublishArtifact.() -&gt; Unit ): PublishArtifact</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun ArtifactHandler.`detekt`(artifactNotation: Any): PublishArtifact</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detekt`(constraintNotation: Any): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detekt`(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( dependencyNotation: Provider&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( dependencyNotation: ProviderConvertible&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( dependencyNotation: String, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`(dependencyNotation: Any): Dependency?</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun &lt;T : ModuleDependency&gt; DependencyHandler.`detektPlugins`( dependency: T, dependencyConfiguration: T.() -&gt; Unit ): T</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun ArtifactHandler.`detektPlugins`( artifactNotation: Any, configureAction: ConfigurablePublishArtifact.() -&gt; Unit ): PublishArtifact</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun ArtifactHandler.`detektPlugins`(artifactNotation: Any): PublishArtifact</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detektPlugins`(constraintNotation: Any): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detektPlugins`(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( dependencyNotation: Provider&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( dependencyNotation: ProviderConvertible&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( dependencyNotation: String, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`(dependencyNotation: Any): Dependency?</ID>
    <ID>FunctionNaming:Dividers.kt$@Composable fun ColumnScope.DividerW( weight: Float = 1f, width: Dp = 1.dp, color: Color = UI.colors.gray, shape: Shape = UI.shapes.rFull )</ID>
    <ID>FunctionNaming:Dividers.kt$@Composable fun Divider( modifier: Modifier = Modifier, color: Color = UI.colors.gray, shape: Shape = UI.shapes.rFull )</ID>
    <ID>FunctionNaming:Dividers.kt$@Composable fun DividerH( size: DividerSize = DividerSize.FillMax( padding = 16.dp ), width: Dp = 1.dp, color: Color = UI.colors.gray, shape: Shape = UI.shapes.rFull )</ID>
    <ID>FunctionNaming:Dividers.kt$@Composable fun DividerV( size: DividerSize = DividerSize.FillMax( padding = 16.dp ), width: Dp = 1.dp, color: Color = UI.colors.gray, shape: Shape = UI.shapes.rFull )</ID>
    <ID>FunctionNaming:Dividers.kt$@Composable fun RowScope.DividerW( weight: Float = 1f, height: Dp = 1.dp, color: Color = UI.colors.gray, shape: Shape = UI.shapes.rFull )</ID>
    <ID>FunctionNaming:Dividers.kt$@Preview @Composable private fun PreviewDivider()</ID>
    <ID>FunctionNaming:Dividers.kt$@Preview @Composable private fun PreviewHorizontalDivider_fillMax()</ID>
    <ID>FunctionNaming:Dividers.kt$@Preview @Composable private fun PreviewHorizontalDivider_fixed()</ID>
    <ID>FunctionNaming:Dividers.kt$@Preview @Composable private fun PreviewVerticalDivider_fillMax()</ID>
    <ID>FunctionNaming:Dividers.kt$@Preview @Composable private fun PreviewVerticalDivider_fixed()</ID>
    <ID>FunctionNaming:DonateModal.kt$@Composable fun BoxWithConstraintsScope.DonateModal( visible: Boolean, dismiss: () -&gt; Unit, onGooglePlay: () -&gt; Unit, onGitHubSponsors: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:DonateModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:DonateScreen.kt$@Composable fun BoxWithConstraintsScope.DonateScreen(screen: DonateScreen)</ID>
    <ID>FunctionNaming:DonateScreen.kt$@Composable private fun BoxWithConstraintsScope.DonateButton( onGooglePlayDonate: () -&gt; Unit )</ID>
    <ID>FunctionNaming:DonateScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( onEvent: (DonateEvent) -&gt; Unit )</ID>
    <ID>FunctionNaming:DonateScreen.kt$@Composable private fun DonateOptionPicker( option: DonateOption, onSelect: (DonateOption) -&gt; Unit )</ID>
    <ID>FunctionNaming:DonateScreen.kt$@Composable private fun OptionPickerButton( @DrawableRes icon: Int, contentDescription: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:DonateScreen.kt$@Composable private fun ScreenContent()</ID>
    <ID>FunctionNaming:DonateScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:DueDate.kt$@Composable fun DueDate( dueDate: LocalDateTime, onPickDueDate: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:DueDate.kt$@Composable private fun DueDateCard( dueDate: LocalDateTime, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:DueDate.kt$@Preview @Composable private fun Preview_OneTime()</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable fun BoxWithConstraintsScope.EditBottomSheet( initialTransactionId: UUID?, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, amount: Double, currency: String, convertedAmount: Double? = null, convertedAmountCurrencyCode: String? = null, amountModalShown: Boolean, setAmountModalShown: (Boolean) -&gt; Unit, ActionButton: @Composable () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun Account( account: Account, selected: Boolean, testTag: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun AccountsRow( modifier: Modifier = Modifier, accounts: List&lt;Account&gt;, selectedAccount: Account?, childrenTestTag: String? = null, onSelectedAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun AddAccount( onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun Amount( type: TransactionType, amount: Double, currency: String, percentExpanded: Float, label: String, account: Account?, showConvertedAmountText: String? = null, onShowAmountModal: () -&gt; Unit, onAccountMiniClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun BottomBar( keyboardShown: Boolean, keyboardShownInsetDp: Dp, setBottomBarHeight: (Int) -&gt; Unit, expanded: Boolean, internalExpanded: Boolean, setInternalExpanded: (Boolean) -&gt; Unit, navBarPadding: Dp, ActionButton: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun LabelAccountMini( percentExpanded: Float, label: String, account: Account?, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun SheetHeader( percentExpanded: Float, label: String, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Composable private fun TransferRowMini( percentCollapsed: Float, fromAccount: Account?, toAccount: Account?, onSetExpanded: () -&gt; Unit )</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:EditBottomSheet.kt$@Preview @Composable private fun Preview_Transfer()</ID>
    <ID>FunctionNaming:EditPlannedScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.EditPlannedScreen(screen: EditPlanned)</ID>
    <ID>FunctionNaming:EditPlannedScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditPlanned, startDate: LocalDateTime?, intervalN: Int?, intervalType: IntervalType?, oneTime: Boolean, type: TransactionType, currency: String, initialTitle: String?, description: String?, category: Category?, account: Account?, amount: Double, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onSave: () -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:EditPlannedScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.EditTransactionScreen(screen: EditTransaction)</ID>
    <ID>FunctionNaming:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditTransaction, transactionType: TransactionType, baseCurrency: String, initialTitle: String?, titleSuggestions: Set&lt;String&gt;, description: String?, category: Category?, dateTime: LocalDateTime?, account: Account?, toAccount: Account?, dueDate: LocalDateTime?, amount: Double, loanData: EditTransactionDisplayLoan = EditTransactionDisplayLoan(), backgroundProcessing: Boolean = false, customExchangeRateState: CustomExchangeRateState, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, hasChanges: Boolean = false, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onDueDateChanged: (LocalDateTime?) -&gt; Unit, onSetDateTime: (LocalDateTime) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onPayPlannedPayment: () -&gt; Unit, onSave: (closeScreen: Boolean) -&gt; Unit, onSetHasChanges: (hasChanges: Boolean) -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, onExchangeRateChanged: (Double?) -&gt; Unit = { } )</ID>
    <ID>FunctionNaming:EditTransactionScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ExchangeRatesScreen.kt$@Composable fun BoxWithConstraintsScope.ExchangeRatesScreen()</ID>
    <ID>FunctionNaming:ExchangeRatesScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( state: RatesState, onEvent: (RatesEvent) -&gt; Unit, )</ID>
    <ID>FunctionNaming:ExchangeRatesScreen.kt$@Composable private fun SearchField( onSearch: (String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:ExchangeRatesScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable fun BoxWithConstraintsScope.FilterOverlay( visible: Boolean, baseCurrency: String, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, filter: ReportFilter?, onClose: () -&gt; Unit, onSetFilter: (ReportFilter?) -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable fun ListItem( icon: String?, @DrawableRes defaultIcon: Int, text: String, selectedColor: Color?, onClick: (selected: Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun AccountsFilter( allAccounts: List&lt;Account&gt;, filter: ReportFilter?, nonNullFilter: (ReportFilter?) -&gt; ReportFilter, onSetFilter: (ReportFilter) -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun AddKeywordButton( text: String, onCLick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun AmountFilter( baseCurrency: String, filter: ReportFilter?, onShowMinAmountModal: () -&gt; Unit, onShowMaxAmountModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun CategoriesFilter( allCategories: List&lt;Category&gt;, filter: ReportFilter?, nonNullFilter: (ReportFilter?) -&gt; ReportFilter, onSetFilter: (ReportFilter) -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun FilterDivider()</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun FilterTitleText( text: String, active: Boolean, inactiveColor: Color = Color.Gray )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun Keyword( keyword: String, borderColor: Color, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun KeywordsFilter( filter: ReportFilter?, nonNullFilter: (ReportFilter?) -&gt; ReportFilter, onSetFilter: (ReportFilter) -&gt; Unit, onShowIncludeKeywordModal: () -&gt; Unit, onShowExcludeKeywordModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun ListFilterTitle( text: String, active: Boolean, itemsSelected: Int, onClearAll: () -&gt; Unit, onSelectAll: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun PeriodFilter( filter: ReportFilter?, onShowPeriodChooserModal: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun TypeFilter( filter: ReportFilter?, nonNullFilter: (ReportFilter?) -&gt; ReportFilter, onSetFilter: (ReportFilter) -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Composable private fun TypeFilterCheckbox( modifier: Modifier = Modifier, trnType: TransactionType, filter: ReportFilter?, nonFilter: (ReportFilter?) -&gt; ReportFilter, onSetFilter: (ReportFilter) -&gt; Unit )</ID>
    <ID>FunctionNaming:FilterOverlay.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:FinancistoSteps.kt$@Composable fun FinancistoSteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:FortuneCitySteps.kt$@Composable fun FortuneCitySteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:GitHubBackupCard.kt$@Composable fun GitHubBackupCard( modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GitHubBackupCard.kt$@Composable private fun BackupDisabled( modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GitHubBackupCard.kt$@Composable private fun GitHubIcon( modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GitHubBackupCard.kt$@Composable private fun LastBackup( viewModel: GitHubBackupViewModel, )</ID>
    <ID>FunctionNaming:GitHubBackupCard.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun BackupEnabled( viewModel: GitHubBackupViewModel, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GitHubBackupScreen.kt$@Composable private fun ColumnScope.HeaderInfo()</ID>
    <ID>FunctionNaming:GitHubBackupScreen.kt$@Composable private fun Content( modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GitHubBackupScreen.kt$@Composable private fun InfoButton( infoUrl: String, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:GitHubBackupScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun GitHubBackupScreen()</ID>
    <ID>FunctionNaming:GitHubBackupStatus.kt$@Composable fun GitHubBackupStatus( viewModel: GitHubBackupViewModel, )</ID>
    <ID>FunctionNaming:GradientCut.kt$@Composable fun BoxWithConstraintsScope.GradientCutBottom( height: Dp = 96.dp, alpha: Float = 1f, zIndex: Float? = null )</ID>
    <ID>FunctionNaming:GradientCut.kt$@Composable fun BoxWithConstraintsScope.GradientCutTop( modifier: Modifier = Modifier, height: Dp, )</ID>
    <ID>FunctionNaming:HealthTab.kt$@Composable fun ColumnScope.HealthTab( onboardedUsers: Int, localAccountCount: Int?, health: Health )</ID>
    <ID>FunctionNaming:HealthTab.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:HistoryDateDivider.kt$@Composable fun HistoryDateDivider( date: LocalDate, spacerTop: Dp, baseCurrency: String, income: Double, expenses: Double )</ID>
    <ID>FunctionNaming:HistoryDateDivider.kt$@Preview @Composable private fun Preview_OneYear_Ago()</ID>
    <ID>FunctionNaming:HistoryDateDivider.kt$@Preview @Composable private fun Preview_Today()</ID>
    <ID>FunctionNaming:HistoryDateDivider.kt$@Preview @Composable private fun Preview_Yesterday()</ID>
    <ID>FunctionNaming:HomeHeader.kt$@Composable private fun HeaderStickyRow( percentExpanded: Float, name: String, period: TimePeriod, currency: String, balance: Double, hideCurrentBalance: Boolean = false, onShowMonthModal: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:HomeHeader.kt$@Composable private fun IncomeExpenses( percentExpanded: Float, period: TimePeriod, currency: String, monthlyIncome: Double, monthlyExpenses: Double )</ID>
    <ID>FunctionNaming:HomeHeader.kt$@Composable private fun RowScope.HeaderCard( @DrawableRes icon: Int, backgroundGradient: Gradient, percentVisible: Float, textColor: Color, label: String, currency: String, amount: Double, testTag: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeHeader.kt$@ExperimentalAnimationApi @Composable fun CashFlowInfo( percentExpanded: Float = 1f, period: TimePeriod, currency: String, balance: Double, bufferDiff: Double, monthlyIncome: Double, monthlyExpenses: Double, hideCurrentBalance: Boolean, onOpenMoreMenu: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:HomeHeader.kt$@ExperimentalAnimationApi @Composable internal fun HomeHeader( expanded: Boolean, name: String, period: TimePeriod, currency: String, balance: Double, bufferDiff: Double, hideCurrentBalance: Boolean = false, onShowMonthModal: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable fun BoxWithConstraintsScope.MoreMenu( expanded: Boolean, balance: Double, buffer: Double, currency: String, theme: Theme, setExpanded: (Boolean) -&gt; Unit, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable private fun BoxWithConstraintsScope.DonateButton( percentExpanded: Float )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable private fun ColumnScope.Buffer( buffer: Double, currency: String, balance: Double, onBufferClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable private fun ColumnScope.Content( balance: Double, buffer: Double, currency: String, theme: Theme, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable private fun ColumnScope.OpenSource()</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable private fun MoreMenuButton( @DrawableRes icon: Int, label: String, backgroundColor: Color = UI.colors.pure, tint: Color = UI.colors.pureInverse, expandPadding: Dp = 14.dp, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable private fun QuickAccess( theme: Theme, onSwitchTheme: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Composable private fun SearchButton( onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:HomeMoreMenu.kt$@Preview @Composable private fun Preview_Expanded()</ID>
    <ID>FunctionNaming:HomeTab.kt$@ExperimentalAnimationApi @Composable fun HomeLazyColumn( hideBalanceRowState: MutableState&lt;Boolean&gt;, listState: LazyListState, buffer: BufferInfo, hideCurrentBalance: Boolean, period: TimePeriod, baseData: AppBaseData, upcoming: DueSection, overdue: DueSection, balance: BigDecimal, stats: IncomeExpensePair, history: List&lt;TransactionHistoryItem&gt;, customerJourneyCards: List&lt;CustomerJourneyCardData&gt;, setUpcomingExpanded: (Boolean) -&gt; Unit, setOverdueExpanded: (Boolean) -&gt; Unit, onOpenMoreMenu: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onPayOrGet: (Transaction) -&gt; Unit, onDismiss: (CustomerJourneyCardData) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:HomeTab.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.HomeTab(screen: Main)</ID>
    <ID>FunctionNaming:HomeTab.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: HomeState, onEvent: (HomeEvent) -&gt; Unit )</ID>
    <ID>FunctionNaming:HomeTab.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Preview @Composable private fun PreviewHomeTab()</ID>
    <ID>FunctionNaming:IconButton.kt$@Composable fun IconButton( modifier: Modifier = Modifier, @DrawableRes icon: Int, iconTint: Color = White, background: Background = Background.Solid( color = UI.colors.primary, shape = CircleShape, padding = padding(all = 8.dp) ), onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IconButton.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ImportFrom.kt$@Composable private fun ImportOption( importType: ImportType, onImportFrom: (ImportType) -&gt; Unit )</ID>
    <ID>FunctionNaming:ImportFrom.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.ImportFrom( hasSkip: Boolean, launchedFromOnboarding: Boolean, onSkip: () -&gt; Unit = {}, onImportFrom: (ImportType) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:ImportFrom.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@Composable fun ArticleButton( modifier: Modifier = Modifier, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@Composable fun InstructionButton( modifier: Modifier = Modifier, @DrawableRes icon: Int?, caption: String, text: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@Composable fun StepTitle( number: Int, title: String, description: String? = null, )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@Composable fun UploadFileStep( stepNumber: Int, text: String = stringResource(R.string.upload_csv_file), btnTitle: String = text, onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@Composable fun VideoArticleRow( videoUrl: String?, articleUrl: String? )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@Composable fun VideoButton( modifier: Modifier = Modifier, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@Composable private fun App( importType: ImportType )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.ImportInstructions( hasSkip: Boolean, importType: ImportType, onSkip: () -&gt; Unit, onUploadClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:ImportInstructions.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ImportProcessing.kt$@Composable fun ImportProcessing( progressPercent: Int )</ID>
    <ID>FunctionNaming:ImportProcessing.kt$@Composable private fun ProgressBar( progressPercent: Int )</ID>
    <ID>FunctionNaming:ImportProcessing.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ImportResultUI.kt$@Composable fun ImportResultUI( result: ImportResult, launchedFromOnboarding: Boolean, isManualCsvImport: Boolean = false, onTryAgain: (() -&gt; Unit)? = null, onFinish: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ImportResultUI.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ImportScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: Import, importStep: ImportStep, importType: ImportType?, importProgressPercent: Int, importResult: ImportResult?, onChooseImportType: (ImportType) -&gt; Unit = {}, onUploadCSVFile: () -&gt; Unit = {}, onSkip: () -&gt; Unit = {}, onFinish: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:ImportScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ImportScreen.kt$@OptIn(ExperimentalStdlibApi::class) @ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.ImportCSVScreen(screen: Import)</ID>
    <ID>FunctionNaming:ImportType.kt$ImportType$@Composable fun ImportSteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IncomeExpensesRow.kt$@Composable fun IncomeExpensesRow( modifier: Modifier = Modifier, textColor: Color = UI.colors.pureInverse, dividerColor: Color = UI.colors.medium, incomeLabel: String = stringResource(R.string.income_uppercase), income: Double, expensesLabel: String = stringResource(R.string.expenses_uppercase), expenses: Double, currency: String, center: Boolean = true, dividerSpacer: Dp? = null, )</ID>
    <ID>FunctionNaming:IncomeExpensesRow.kt$@Composable private fun LabelAmountColumn( label: String, amount: Double, currency: String, textColor: Color, center: Boolean )</ID>
    <ID>FunctionNaming:InputField.kt$@Deprecated("A new better componenet would be created soon.") @Composable fun InputField( modifier: Modifier = Modifier, initialText: String = "", hint: String = "", textStyle: TextStyle = UI.typo.b1.style( color = UI.colors.pureInverse, textAlign = TextAlign.Start ), hintStyle: TextStyle = UI.typo.b1.style( color = Color.Gray, textAlign = TextAlign.Start ), inputType: IvyInputType = IvyInputType.SHORT_TEXT, imeAction: IvyImeAction = IvyImeAction.DONE, onImeActionListener: ((EditText) -&gt; Unit)? = null, cursorColor: Color = UI.colors.pureInverse, highlightColor: Color = if (UI.colors.isLight) Purple1Light else Purple1Dark, focus: InputFieldFocus? = null, onTextChanged: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:InputField.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:IntervalPickerRow.kt$@Composable fun IntervalPickerRow( intervalN: Int, intervalType: IntervalType, onSetIntervalN: (Int) -&gt; Unit, onSetIntervalType: (IntervalType) -&gt; Unit )</ID>
    <ID>FunctionNaming:IntervalPickerRow.kt$@Composable private fun RowScope.IntervalTypeSelector( intervalN: Int, intervalType: IntervalType, onSetIntervalType: (IntervalType) -&gt; Unit )</ID>
    <ID>FunctionNaming:IntervalPickerRow.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Composable fun ItemIconL( modifier: Modifier = Modifier, iconName: String?, tint: Color = UI.colors.pureInverse, iconContentScale: ContentScale? = null, Default: (@Composable () -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Composable fun ItemIconM( modifier: Modifier = Modifier, iconName: String?, tint: Color = UI.colors.pureInverse, iconContentScale: ContentScale? = null, Default: (@Composable () -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Composable fun ItemIconMDefaultIcon( modifier: Modifier = Modifier, iconName: String?, tint: Color = UI.colors.pureInverse, @DrawableRes defaultIcon: Int )</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Composable fun ItemIconS( modifier: Modifier = Modifier, iconName: String?, tint: Color = UI.colors.pureInverse, iconContentScale: ContentScale? = null, Default: (@Composable () -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Composable fun ItemIconSDefaultIcon( modifier: Modifier = Modifier, iconName: String?, tint: Color = UI.colors.pureInverse, @DrawableRes defaultIcon: Int )</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Composable private fun ItemIcon( modifier: Modifier = Modifier, iconName: String?, size: String, tint: Color = UI.colors.pureInverse, iconContentScale: ContentScale? = null, Default: (@Composable () -&gt; Unit)? = null )</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Preview @Composable private fun Preview_L()</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Preview @Composable private fun Preview_M()</ID>
    <ID>FunctionNaming:ItemIcon.kt$@Preview @Composable private fun Preview_S()</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Composable fun BoxWithConstraintsScope.ItemStatisticScreen(screen: ItemStatistic)</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Composable fun IncomeExpensesCards( history: List&lt;TransactionHistoryItem&gt;, currency: String, income: Double, expenses: Double, hasAddButtons: Boolean, itemColor: Color, incomeHeaderCardClicked: () -&gt; Unit = {}, expenseHeaderCardClicked: () -&gt; Unit = {}, onAddTransaction: (TransactionType) -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Composable fun ItemStatisticToolbar( contrastColor: Color, onEdit: () -&gt; Unit, onDelete: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( period: TimePeriod, baseCurrency: String, currency: String, account: Account?, category: Category?, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, initWithTransactions: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, history: List&lt;TransactionHistoryItem&gt;, upcomingExpanded: Boolean = true, setUpcomingExpanded: (Boolean) -&gt; Unit = {}, upcomingIncome: Double = 0.0, upcomingExpenses: Double = 0.0, upcoming: List&lt;Transaction&gt; = emptyList(), overdueExpanded: Boolean = true, setOverdueExpanded: (Boolean) -&gt; Unit = {}, overdueIncome: Double = 0.0, overdueExpenses: Double = 0.0, overdue: List&lt;Transaction&gt; = emptyList(), onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onSetPeriod: (TimePeriod) -&gt; Unit, onEditAccount: (Account, Double) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onDelete: () -&gt; Unit, onPayOrGet: (Transaction) -&gt; Unit = {}, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Composable private fun Header( history: List&lt;TransactionHistoryItem&gt;, currency: String, baseCurrency: String, itemColor: Color, account: Account?, category: Category?, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, treatTransfersAsIncomeExpense: Boolean = false, onEdit: () -&gt; Unit, onDelete: () -&gt; Unit, onBalanceClick: () -&gt; Unit, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Composable private fun Item( itemColor: Color, contrastColor: Color, account: Account?, category: Category?, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Composable private fun RowScope.HeaderCard( title: String, currencyCode: String, amount: Double, transactionCount: Int, isIncome: Boolean, addButtonText: String?, itemColor: Color, onHeaderCardClicked: () -&gt; Unit = {}, onAddClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Preview @Composable private fun Preview_crypto()</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Preview @Composable private fun Preview_empty()</ID>
    <ID>FunctionNaming:ItemStatisticScreen.kt$@Preview @Composable private fun Preview_empty_upcoming()</ID>
    <ID>FunctionNaming:IvyBasicTextField.kt$@Composable fun IvyBasicTextField( modifier: Modifier = Modifier, value: TextFieldValue, textColor: Color = UI.colors.pureInverse, hint: String?, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions( autoCorrect = true, keyboardType = KeyboardType.Text, imeAction = ImeAction.Done, capitalization = KeyboardCapitalization.Sentences ), keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyBasicTextField.kt$@Preview @Composable private fun Preview_Filled()</ID>
    <ID>FunctionNaming:IvyBasicTextField.kt$@Preview @Composable private fun Preview_Hint()</ID>
    <ID>FunctionNaming:IvyBorderButton.kt$@Composable fun IvyBorderButton( modifier: Modifier = Modifier, text: String, textStyle: TextStyle = UI.typo.b2.style( color = UI.colors.pureInverse, fontWeight = FontWeight.Bold ), backgroundGradient: Gradient = Gradient.solid(UI.colors.mediumInverse), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = UI.colors.pureInverse, enabled: Boolean = true, wrapContentMode: Boolean = true, padding: Dp = 12.dp, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyBorderButton.kt$@Composable private fun IconEnd( icon: Int, tint: Color, )</ID>
    <ID>FunctionNaming:IvyBorderButton.kt$@Composable private fun IconStart( icon: Int, tint: Color, )</ID>
    <ID>FunctionNaming:IvyBorderButton.kt$@Preview @Composable private fun PreviewIvyBorderButton()</ID>
    <ID>FunctionNaming:IvyButton.kt$@Composable fun IvyButton( modifier: Modifier = Modifier, text: String, backgroundGradient: Gradient = GradientIvy, textStyle: TextStyle = UI.typo.b2.style( color = White, fontWeight = FontWeight.Bold ), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = White, enabled: Boolean = true, shadowAlpha: Float = 0.15f, wrapContentMode: Boolean = true, hasGlow: Boolean = true, padding: Dp = 12.dp, iconEdgePadding: Dp = 12.dp, iconTextPadding: Dp = 4.dp, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyButton.kt$@Composable private fun IconEnd( iconEdgePadding: Dp, iconTextPadding: Dp, icon: Int, tint: Color, )</ID>
    <ID>FunctionNaming:IvyButton.kt$@Composable private fun IconStart( iconEdgePadding: Dp, iconTextPadding: Dp, icon: Int, tint: Color, )</ID>
    <ID>FunctionNaming:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonFillMaxWidthWithIconEnd()</ID>
    <ID>FunctionNaming:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonFillMaxWidthWithIconStart()</ID>
    <ID>FunctionNaming:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonWrapContentWithIconEnd()</ID>
    <ID>FunctionNaming:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonWrapContentWithIconStart()</ID>
    <ID>FunctionNaming:IvyCheckbox.kt$@Composable fun IvyCheckbox( modifier: Modifier = Modifier, checked: Boolean, onCheckedChange: (checked: Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyCheckbox.kt$@Composable fun IvyCheckboxWithText( modifier: Modifier = Modifier, text: String, checked: Boolean, onCheckedChange: (checked: Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyCheckbox.kt$@Preview @Composable private fun PreviewIvyCheckboxWithText()</ID>
    <ID>FunctionNaming:IvyChecklistTextField.kt$@Composable fun IvyChecklistTextField( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, value: TextFieldValue, hint: String?, readOnly: Boolean = false, fontWeight: FontWeight = FontWeight.Medium, hintFontWeight: FontWeight = FontWeight.Medium, textColor: Color = UI.colors.pureInverse, hintColor: Color = UI.colors.mediumInverse, textAlign: TextAlign = TextAlign.Start, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = KeyboardOptions.Default, keyboardActions: KeyboardActions? = KeyboardActions.Default, paddingVertical: Dp = 16.dp, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyChecklistTextField.kt$@Preview @Composable private fun PreviewIvyTextField()</ID>
    <ID>FunctionNaming:IvyChecklistTextField.kt$@Preview @Composable private fun PreviewIvyTextField_longText()</ID>
    <ID>FunctionNaming:IvyCircleButton.kt$@Composable fun IvyCircleButton( modifier: Modifier = Modifier, backgroundPadding: Dp = 0.dp, backgroundGradient: Gradient = GradientIvy, horizontalGradient: Boolean = true, @DrawableRes icon: Int, tint: Color = White, enabled: Boolean = true, hasShadow: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyCircleButton.kt$@Preview @Composable private fun PreviewIvyCircleButton_Disabled()</ID>
    <ID>FunctionNaming:IvyCircleButton.kt$@Preview @Composable private fun PreviewIvyCircleButton_Enabled()</ID>
    <ID>FunctionNaming:IvyColorPicker.kt$@Composable fun ColumnScope.IvyColorPicker( selectedColor: Color, onColorSelected: (Color) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyColorPicker.kt$@Composable private fun ColorItem( index: Int, ivyColor: IvyColor, selectedColor: Color, onSelected: (IvyColor) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyColorPicker.kt$@Preview @Composable private fun PreviewIvyColorPicker()</ID>
    <ID>FunctionNaming:IvyComponents.kt$@Composable fun ActionsRow( modifier: Modifier = Modifier, lineColor: Color = UI.colors.medium, Content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyComposeApp.kt$@Composable fun IvyWalletComponentPreview( theme: Theme = Theme.LIGHT, Content: @Composable BoxScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyComposeApp.kt$@Composable fun IvyWalletPreview( theme: Theme = Theme.LIGHT, Content: @Composable BoxWithConstraintsScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyDescriptionTextField.kt$@Composable fun IvyDescriptionTextField( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, testTag: String = "desc_input", value: TextFieldValue, hint: String?, fontWeight: FontWeight = FontWeight.Medium, textColor: Color = UI.colors.pureInverse, hintColor: Color = UI.colors.mediumInverse, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = KeyboardOptions.Default, keyboardActions: KeyboardActions? = KeyboardActions.Default, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyDescriptionTextField.kt$@Preview @Composable private fun PreviewIvyTextField()</ID>
    <ID>FunctionNaming:IvyDescriptionTextField.kt$@Preview @Composable private fun PreviewIvyTextField_longText()</ID>
    <ID>FunctionNaming:IvyDivider.kt$@Composable fun IvyDividerLine( modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:IvyDivider.kt$@Composable fun IvyDividerLineRounded( modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:IvyDivider.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:IvyDividerDot.kt$@Composable fun IvyDividerDot()</ID>
    <ID>FunctionNaming:IvyDividerDot.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:IvyIcon.kt$@Composable fun IvyIcon( modifier: Modifier = Modifier, @DrawableRes icon: Int, tint: Color = UI.colors.pureInverse, contentDescription: String = "icon" )</ID>
    <ID>FunctionNaming:IvyIcon.kt$@Composable fun IvyIconScaled( modifier: Modifier = Modifier, @DrawableRes icon: Int, tint: Color = UI.colors.pureInverse, iconScale: IconScale, padding: Dp = when (iconScale) { IconScale.S -&gt; 4.dp IconScale.M -&gt; 4.dp IconScale.L -&gt; 4.dp }, contentDescription: String = "icon" )</ID>
    <ID>FunctionNaming:IvyLineChart.kt$@Composable fun IvyLineChart( modifier: Modifier = Modifier, height: Dp = 300.dp, functions: List&lt;Function&gt;, title: String, xLabel: (x: Double) -&gt; String, yLabel: (y: Double) -&gt; String, onTap: (TapEvent) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:IvyLineChart.kt$@Composable private fun IvyChart( modifier: Modifier, title: String, allValues: List&lt;Value&gt;, xLabel: (x: Double) -&gt; String, yLabel: (y: Double) -&gt; String, maxY: Double, minY: Double, functions: List&lt;Function&gt;, tapEvent: TapEvent?, onTap: (TapEvent) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyLineChart.kt$@Preview @Composable private fun Preview_IvyChart()</ID>
    <ID>FunctionNaming:IvyModal.kt$@Composable fun AddModalBackHandling( modalId: UUID?, visible: Boolean, action: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModal.kt$@Composable fun BoxScope.IvyModal( id: UUID?, visible: Boolean, dismiss: () -&gt; Unit, SecondaryActions: (@Composable () -&gt; Unit)? = null, PrimaryAction: @Composable () -&gt; Unit, scrollState: ScrollState? = rememberScrollState(), shiftIfKeyboardShown: Boolean = true, includeActionsRowPadding: Boolean = true, Content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModal.kt$@Composable fun ModalActionsRow( visible: Boolean, modalPercentVisible: Float, keyboardShownInsetDp: Dp, navBarPadding: Dp, onHeightChanged: (Int) -&gt; Unit, onClose: () -&gt; Unit, SecondaryActions: (@Composable () -&gt; Unit)? = null, PrimaryAction: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModal.kt$@Composable fun ModalPreviewActionRowSpacer()</ID>
    <ID>FunctionNaming:IvyModal.kt$@Composable private fun ModalBackHandling( modalId: UUID?, visible: Boolean, dismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModal.kt$@Preview @Composable private fun PreviewIvyModal_minimal()</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun &lt;T&gt; ModalAddSave( item: T, enabled: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalAdd( enabled: Boolean = true, testTag: String = "modal_add", onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalCheck( modifier: Modifier = Modifier, label: String, enabled: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalCreate( enabled: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalDelete( enabled: Boolean = true, testTag: String = "modal_delete", onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalDynamicPrimaryAction( initialEmpty: Boolean, initialChanged: Boolean, testTagSave: String = "tag_save", testTagDelete: String = "tag_delete", onDelete: () -&gt; Unit, dismiss: () -&gt; Unit, onSave: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalNegativeButton( text: String, @DrawableRes iconStart: Int, enabled: Boolean = true, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalPositiveButton( modifier: Modifier = Modifier, text: String, @DrawableRes iconStart: Int, enabled: Boolean = true, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalPrimaryButton( text: String, @DrawableRes iconStart: Int, enabled: Boolean = true, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalSave( modifier: Modifier = Modifier, enabled: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalSet( modifier: Modifier = Modifier, label: String = stringResource(R.string.set), enabled: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalSkip( text: String = stringResource(R.string.skip), onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyModalComponents.kt$@Composable fun ModalTitle( text: String )</ID>
    <ID>FunctionNaming:IvyModalDomainComponents.kt$@Composable fun ModalAmountSection( label: String, currency: String, amount: Double, Header: (@Composable () -&gt; Unit)? = null, amountPaddingTop: Dp = 48.dp, amountPaddingBottom: Dp = 48.dp, showAmountModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:IvyNameTextFieldValue.kt$@Composable fun IvyNameTextField( modifier: Modifier = Modifier, underlineModifier: Modifier = Modifier, value: TextFieldValue, textColor: Color = UI.colors.pureInverse, hint: String?, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions( autoCorrect = true, keyboardType = KeyboardType.Text, imeAction = ImeAction.Done, capitalization = KeyboardCapitalization.Sentences ), keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyNameTextFieldValue.kt$@Preview @Composable private fun PreviewIvyNameTextField()</ID>
    <ID>FunctionNaming:IvyNumberTextField.kt$@Composable fun IvyNumberTextField( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, value: TextFieldValue, hint: String?, fontWeight: FontWeight = FontWeight.ExtraBold, textColor: Color = UI.colors.pureInverse, hintColor: Color = Color.Gray, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = null, keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyNumberTextField.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:IvyOutlinedButton.kt$@Composable fun IvyOutlinedButton( modifier: Modifier = Modifier, text: String, @DrawableRes iconStart: Int?, solidBackground: Boolean = false, iconTint: Color = UI.colors.pureInverse, borderColor: Color = UI.colors.medium, textColor: Color = UI.colors.pureInverse, padding: Dp = 12.dp, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:IvyOutlinedButton.kt$@Composable fun IvyOutlinedButtonFillMaxWidth( modifier: Modifier = Modifier, text: String, @DrawableRes iconStart: Int?, solidBackground: Boolean = false, iconTint: Color = UI.colors.pureInverse, borderColor: Color = UI.colors.medium, textColor: Color = UI.colors.pureInverse, padding: Dp = 16.dp, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:IvyOutlinedButton.kt$@Preview @Composable private fun Preview_FillMaxWidth()</ID>
    <ID>FunctionNaming:IvyOutlinedTextField.kt$@Composable fun IvyOutlinedTextField( modifier: Modifier = Modifier, value: TextFieldValue, hint: String?, hintColor: Color = UI.colors.gray, backgroundColor: Color = UI.colors.primary, emptyBorderColor: Color = UI.colors.gray, textColor: Color = UI.colors.pureInverse, cursorColor: Color = UI.colors.pureInverse, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default, validateInput: (TextFieldValue) -&gt; Boolean = { it.text.isNotNullOrBlank() }, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyOutlinedTextField.kt$@Preview @Composable private fun PreviewOutlineTextField()</ID>
    <ID>FunctionNaming:IvySwitch.kt$@Composable fun IvySwitch( modifier: Modifier = Modifier, enabled: Boolean, onEnabledChange: (checked: Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvySwitch.kt$@Preview @Composable private fun PreviewIvySwitch()</ID>
    <ID>FunctionNaming:IvyText.kt$@Composable fun IvyText( modifier: Modifier = Modifier, text: String, typo: TextStyle, padding: IvyPadding? = null )</ID>
    <ID>FunctionNaming:IvyTheme.kt$@Composable fun IvyTheme( theme: Theme, design: IvyDesign, content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyTitleTextField.kt$@Composable fun ColumnScope.IvyTitleTextField( modifier: Modifier = Modifier, dividerModifier: Modifier = Modifier, value: TextFieldValue, textColor: Color = UI.colors.pureInverse, hint: String?, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions( autoCorrect = true, keyboardType = KeyboardType.Text, imeAction = ImeAction.Done, capitalization = KeyboardCapitalization.Sentences ), keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyTitleTextField.kt$@Preview @Composable private fun PreviewIvyTitleTextField()</ID>
    <ID>FunctionNaming:IvyToolbar.kt$@Composable fun IvyToolbar( onBack: () -&gt; Unit, backButtonType: BackButtonType = BackButtonType.BACK, paddingTop: Dp = 16.dp, paddingBottom: Dp = 16.dp, Content: @Composable RowScope.() -&gt; Unit = { } )</ID>
    <ID>FunctionNaming:IvyUI.kt$@Composable fun IvyUI( design: IvyDesign, Content: @Composable BoxWithConstraintsScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyViewPager.kt$@Composable fun IvyPager( state: IvyPagerState, pageContent: @Composable BoxScope.(page: Int) -&gt; Unit )</ID>
    <ID>FunctionNaming:IvyWalletSteps.kt$@Composable fun IvyWalletSteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:KPIsTab.kt$@Composable @Preview private fun Preview()</ID>
    <ID>FunctionNaming:KPIsTab.kt$@Composable fun ColumnScope.KPIsTab( kpis: KPIs, activeUsersCount: Int, onboardingCompletedEventCount: Int, onboardingStartedEventCount: Int, )</ID>
    <ID>FunctionNaming:KPIsTab.kt$@Composable private fun AccountCategoryTrnPlanned(kpis: KPIs)</ID>
    <ID>FunctionNaming:KPIsTab.kt$@Composable private fun BuyPlanOptions(kpis: KPIs)</ID>
    <ID>FunctionNaming:KPIsTab.kt$@Composable private fun ChoosePlanOptions(kpis: KPIs)</ID>
    <ID>FunctionNaming:KPIsTab.kt$@Composable private fun Paywall( kpis: KPIs, onboardingCompletedEventCount: Int )</ID>
    <ID>FunctionNaming:KTWMoneyMangerSteps.kt$@Composable fun KTWMoneyManagerSteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanBottomBar.kt$@Composable internal fun BoxWithConstraintsScope.LoanBottomBar( onClose: () -&gt; Unit, onAdd: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Composable fun BoxWithConstraintsScope.LoanDetailsScreen(screen: LoanDetails)</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( baseCurrency: String, loan: Loan?, displayLoanRecords: List&lt;DisplayLoanRecord&gt; = emptyList(), amountPaid: Double, loanAmountPaid: Double = 0.0, accounts: List&lt;Account&gt; = emptyList(), selectedLoanAccount: Account? = null, createLoanTransaction: Boolean = false, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onEditLoan: (Loan, Boolean) -&gt; Unit = { _, _ -&gt; }, onCreateLoanRecord: (CreateLoanRecordData) -&gt; Unit = {}, onEditLoanRecord: (EditLoanRecordData) -&gt; Unit = {}, onDeleteLoanRecord: (LoanRecord) -&gt; Unit = {}, onDeleteLoan: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Composable private fun Header( loan: Loan, baseCurrency: String, amountPaid: Double, loanAmountPaid: Double = 0.0, itemColor: Color, selectedLoanAccount: Account? = null, onAmountClick: () -&gt; Unit, onEditLoan: () -&gt; Unit, onDeleteLoan: () -&gt; Unit, onAddRecord: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Composable private fun LoanInfoCard( loan: Loan, baseCurrency: String, amountPaid: Double, loanAmountPaid: Double = 0.0, selectedLoanAccount: Account? = null, onAddRecord: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Composable private fun LoanItem( loan: Loan, contrastColor: Color, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Composable private fun LoanRecordItem( loan: Loan, loanRecord: LoanRecord, baseCurrency: String, loanBaseCurrency: String = "", account: Account? = null, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Composable private fun NoLoanRecordsEmptyState()</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Preview @Composable private fun Preview_Empty()</ID>
    <ID>FunctionNaming:LoanDetailsScreen.kt$@Preview @Composable private fun Preview_Records()</ID>
    <ID>FunctionNaming:LoanModal.kt$@Composable fun BoxWithConstraintsScope.LoanModal( accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, modal: LoanModalData?, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, onPerformCalculations: () -&gt; Unit = {}, dismiss: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:LoanModal.kt$@Composable private fun Account( account: Account, selected: Boolean, testTag: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanModal.kt$@Composable private fun AccountsRow( modifier: Modifier = Modifier, accounts: List&lt;Account&gt;, selectedAccount: Account?, childrenTestTag: String? = null, onSelectedAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanModal.kt$@Composable private fun AddAccount( onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanModal.kt$@Composable private fun ColumnScope.LoanTypePicker( type: LoanType, onTypeSelected: (LoanType) -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanModal.kt$@Composable private fun RowScope.SelectorButton( selected: Boolean, label: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:LoanRecordModal.kt$@Composable fun BoxWithConstraintsScope.LoanRecordModal( modal: LoanRecordModalData?, accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, onDelete: (LoanRecord) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanRecordModal.kt$@Composable private fun Account( account: Account, selected: Boolean, testTag: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanRecordModal.kt$@Composable private fun AccountsRow( modifier: Modifier = Modifier, accounts: List&lt;Account&gt;, selectedAccount: Account?, childrenTestTag: String? = null, onSelectedAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanRecordModal.kt$@Composable private fun AddAccount( onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanRecordModal.kt$@Composable private fun DateTimeRow( dateTime: LocalDateTime, onSetDateTime: (LocalDateTime) -&gt; Unit )</ID>
    <ID>FunctionNaming:LoanRecordModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Composable fun BoxWithConstraintsScope.LoansScreen(screen: Loans)</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( onEventHandler: (LoanScreenEvent) -&gt; Unit = {}, state: LoanScreenState = LoanScreenState() )</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Composable private fun ColumnScope.LoanInfo( displayLoan: DisplayLoan )</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Composable private fun LoanHeader( displayLoan: DisplayLoan, contrastColor: Color, )</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Composable private fun LoanItem( displayLoan: DisplayLoan, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Composable private fun NoLoansEmptyState( modifier: Modifier = Modifier, emptyStateTitle: String, emptyStateText: String, )</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Composable private fun Toolbar( setReorderModalVisible: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:LoansScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable fun BoxWithConstraintsScope.BottomBar( tab: MainTab, selectTab: (MainTab) -&gt; Unit, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, showAddAccountModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable private fun AddExpenseButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonCenterY: Float, clickAreaWidth: Int, onAddExpense: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable private fun AddIncomeButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonLeftX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddIncome: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable private fun AddTransferButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonRightX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddTransfer: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable private fun RowScope.Tab( @DrawableRes icon: Int, name: String, selected: Boolean, selectedColor: Color, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MainBottomBar.kt$@Composable private fun TransactionButtons( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:MainScreen.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.MainScreen(screen: Main)</ID>
    <ID>FunctionNaming:MainScreen.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: Main, tab: MainTab, baseCurrency: String, selectTab: (MainTab) -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, )</ID>
    <ID>FunctionNaming:MainScreen.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Preview @Composable private fun PreviewMainScreen()</ID>
    <ID>FunctionNaming:MonefySteps.kt$@Composable fun MonefySteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MoneyManagerPraseSteps.kt$@Composable fun MoneyManagerPraseSteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MonthPickerModal.kt$@Composable fun BoxWithConstraintsScope.MonthPickerModal( id: UUID = UUID.randomUUID(), initialDate: LocalDate, visible: Boolean, dismiss: () -&gt; Unit, onMonthSelected: (Int) -&gt; Unit )</ID>
    <ID>FunctionNaming:MonthPickerModal.kt$@Composable private fun MonthButton( month: Month, selected: Boolean, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:MonthPickerModal.kt$@Composable private fun MonthPicker( selectedMonth: Int, onMonthSelected: (Int) -&gt; Unit )</ID>
    <ID>FunctionNaming:MonthPickerModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:NameModal.kt$@Composable fun BoxWithConstraintsScope.NameModal( visible: Boolean, name: String, dismiss: () -&gt; Unit, id: UUID = UUID.randomUUID(), onNameChanged: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:NameModal.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@Composable fun BuyPremiumRow( itemLabelPlural: String, )</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@Composable fun PremiumInfo( itemLabelPlural: String, itemsCount: Int, freeItemsCount: Int )</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@Composable private fun AccountCard( baseCurrency: String, accountBalance: AccountBalance, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@Composable private fun Accounts( baseCurrency: String, accounts: List&lt;AccountBalance&gt;, onClick: (AccountBalance) -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.OnboardingAccounts( baseCurrency: String, suggestions: List&lt;CreateAccountData&gt;, accounts: List&lt;AccountBalance&gt;, onCreateAccount: (CreateAccountData) -&gt; Unit = { }, onEditAccount: (Account, Double) -&gt; Unit = { _, _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Accounts()</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Empty()</ID>
    <ID>FunctionNaming:OnboardingAccounts.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Premium()</ID>
    <ID>FunctionNaming:OnboardingCategories.kt$@Composable private fun Categories( categories: List&lt;Category&gt;, onClick: (Category) -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingCategories.kt$@Composable private fun CategoryCard( category: Category, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingCategories.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.OnboardingCategories( suggestions: List&lt;CreateCategoryData&gt;, categories: List&lt;Category&gt;, onCreateCategory: (CreateCategoryData) -&gt; Unit = { }, onEditCategory: (Category) -&gt; Unit = { _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Categories()</ID>
    <ID>FunctionNaming:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Empty()</ID>
    <ID>FunctionNaming:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Premium()</ID>
    <ID>FunctionNaming:OnboardingComponents.kt$@Composable fun OnboardingButton( modifier: Modifier = Modifier, text: String, textColor: Color, backgroundGradient: Gradient, @DrawableRes iconStart: Int? = null, hasNext: Boolean = false, enabled: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingComponents.kt$@Preview @Composable private fun PreviewOnboardingButton()</ID>
    <ID>FunctionNaming:OnboardingComponents.kt$@Preview @Composable private fun PreviewOnboardingTextField()</ID>
    <ID>FunctionNaming:OnboardingPrivacyTC.kt$@Composable fun OnboardingPrivacyTC( onAccepted: () -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingPrivacyTC.kt$@Composable private fun LongText()</ID>
    <ID>FunctionNaming:OnboardingPrivacyTC.kt$@Composable private fun SwipeToAgree( swipeToAgreeText: String, agreedText: String, onAgreed: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingPrivacyTC.kt$@Composable private fun TextLink( text: String, url: String, )</ID>
    <ID>FunctionNaming:OnboardingPrivacyTC.kt$@Composable private fun URLsRow()</ID>
    <ID>FunctionNaming:OnboardingPrivacyTC.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OnboardingProgressSlider.kt$@Composable fun OnboardingProgressSlider( modifier: Modifier = Modifier, selectedStep: Int, stepsCount: Int, selectedColor: Color )</ID>
    <ID>FunctionNaming:OnboardingProgressSlider.kt$@Composable private fun Line( width: Dp, color: Color )</ID>
    <ID>FunctionNaming:OnboardingReportTab.kt$@Composable fun ColumnScope.OnboardingReportTab( report: OnboardingReport )</ID>
    <ID>FunctionNaming:OnboardingReportTab.kt$@Composable private fun LoginGoogleOrLocalAccount( report: OnboardingReport )</ID>
    <ID>FunctionNaming:OnboardingReportTab.kt$@Composable private fun PrivacyTCorSetName( report: OnboardingReport )</ID>
    <ID>FunctionNaming:OnboardingReportTab.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OnboardingScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.OnboardingScreen(screen: Onboarding)</ID>
    <ID>FunctionNaming:OnboardingScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( onboardingState: OnboardingState, currency: IvyCurrency, opGoogleSignIn: OpResult&lt;Unit&gt;?, accountSuggestions: List&lt;CreateAccountData&gt;, accounts: List&lt;AccountBalance&gt;, categorySuggestions: List&lt;CreateCategoryData&gt;, categories: List&lt;Category&gt;, onLoginWithGoogle: () -&gt; Unit = {}, onSkip: () -&gt; Unit = {}, onStartImport: () -&gt; Unit = {}, onStartFresh: () -&gt; Unit = {}, onSetCurrency: (IvyCurrency) -&gt; Unit = {}, onCreateAccount: (CreateAccountData) -&gt; Unit = { }, onEditAccount: (Account, Double) -&gt; Unit = { _, _ -&gt; }, onAddAccountsDone: () -&gt; Unit = {}, onAddAccountsSkip: () -&gt; Unit = {}, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onEditCategory: (Category) -&gt; Unit = {}, onAddCategoryDone: () -&gt; Unit = {}, onAddCategorySkip: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:OnboardingScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun PreviewOnboarding()</ID>
    <ID>FunctionNaming:OnboardingSetCurrency.kt$@Composable fun BoxWithConstraintsScope.OnboardingSetCurrency( preselectedCurrency: IvyCurrency, onSetCurrency: (IvyCurrency) -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingSetCurrency.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OnboardingSetName.kt$@Composable fun OnboardingSetName( onNameSet: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingSetName.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OnboardingSplashLogin.kt$@Composable fun BoxWithConstraintsScope.OnboardingSplashLogin( onboardingState: OnboardingState, opGoogleSignIn: OpResult&lt;Unit&gt;?, onLoginWithGoogle: () -&gt; Unit, onSkip: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:OnboardingSplashLogin.kt$@Composable private fun LocalAccountExplanation()</ID>
    <ID>FunctionNaming:OnboardingSplashLogin.kt$@Composable private fun LoginButton( @DrawableRes icon: Int, text: String, textColor: Color, backgroundGradient: Gradient, hasShadow: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingSplashLogin.kt$@Composable private fun LoginSection( percentTransition: Float, opGoogleSignIn: OpResult&lt;Unit&gt;?, onLoginWithGoogle: () -&gt; Unit, onSkip: () -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingSplashLogin.kt$@Composable private fun LoginWithGoogleExplanation()</ID>
    <ID>FunctionNaming:OnboardingSplashLogin.kt$@Composable private fun PrivacyPolicyAndTC()</ID>
    <ID>FunctionNaming:OnboardingSplashLogin.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OnboardingToolbar.kt$@Composable fun OnboardingToolbar( hasSkip: Boolean, onBack: () -&gt; Unit, onSkip: () -&gt; Unit )</ID>
    <ID>FunctionNaming:OnboardingToolbar.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OnboardingType.kt$@Composable fun OnboardingType( onStartImport: () -&gt; Unit, onStartFresh: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:OnboardingType.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:OneMoneySteps.kt$@Composable fun OneMoneySteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:PaywallScreen.kt$@Composable private fun BenefitRow( benefit: Benefit, ExtraInfo: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:PaywallScreen.kt$@Composable private fun UsageText( usedCount: Int, freeCount: Int, itemName: String )</ID>
    <ID>FunctionNaming:PaywallScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.PaywallScreen(screen: Paywall, activity: RootActivity)</ID>
    <ID>FunctionNaming:PaywallScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, paywallReason: PaywallReason?, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, budgets: List&lt;Budget&gt;, loans: List&lt;Loan&gt;, onPlanSelected: (Plan?) -&gt; Unit = {}, onBuy: (Plan) -&gt; Unit, )</ID>
    <ID>FunctionNaming:PaywallScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:PeriodSelector.kt$@Composable fun PeriodSelector( modifier: Modifier = Modifier, period: TimePeriod, onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onShowChoosePeriodModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:PeriodSelector.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:PieChart.kt$@Composable fun PieChart( type: TransactionType, categoryAmounts: List&lt;CategoryAmount&gt;, selectedCategory: SelectedCategory?, onCategoryClicked: (Category?) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:PieChart.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:PieChartStatisticBottomBar.kt$@Composable fun BoxWithConstraintsScope.PieChartStatisticBottomBar( type: TransactionType, bottomInset: Dp = navigationBarInset().toDensityDp(), onClose: () -&gt; Unit, onAdd: (TransactionType) -&gt; Unit )</ID>
    <ID>FunctionNaming:PieChartStatisticBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>FunctionNaming:PieChartStatisticScreen.kt$@Composable private fun CategoryAmountCard( categoryAmount: CategoryAmount, currency: String, totalAmount: Double, selectedCategory: SelectedCategory?, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:PieChartStatisticScreen.kt$@Composable private fun Header( transactionType: TransactionType, period: TimePeriod, percentExpanded: Float, currency: String, amount: Double, showCloseButtonOnly: Boolean = false, onShowMonthModal: () -&gt; Unit, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, onClose: () -&gt; Unit, onAdd: (TransactionType) -&gt; Unit, )</ID>
    <ID>FunctionNaming:PieChartStatisticScreen.kt$@Composable private fun PercentText( amount: Double, totalAmount: Double, selectedState: Boolean, contrastColor: Color )</ID>
    <ID>FunctionNaming:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.PieChartStatisticScreen( screen: PieChartStatistic )</ID>
    <ID>FunctionNaming:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: PieChartStatisticState = PieChartStatisticState(), onEventHandler: (PieChartStatisticEvent) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Expense()</ID>
    <ID>FunctionNaming:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Income()</ID>
    <ID>FunctionNaming:PlannedPaymentCard.kt$@Composable fun LazyItemScope.PlannedPaymentCard( baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, plannedPayment: PlannedPaymentRule, onClick: (PlannedPaymentRule) -&gt; Unit, )</ID>
    <ID>FunctionNaming:PlannedPaymentCard.kt$@Composable private fun PlannedPaymentHeaderRow( plannedPayment: PlannedPaymentRule, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt; )</ID>
    <ID>FunctionNaming:PlannedPaymentCard.kt$@Composable private fun RuleTextRow( oneTime: Boolean, startDate: LocalDateTime?, intervalN: Int?, intervalType: IntervalType? )</ID>
    <ID>FunctionNaming:PlannedPaymentCard.kt$@Preview @Composable private fun Preview_oneTime()</ID>
    <ID>FunctionNaming:PlannedPaymentCard.kt$@Preview @Composable private fun Preview_recurring()</ID>
    <ID>FunctionNaming:PlannedPaymentCard.kt$@Preview @Composable private fun Preview_recurringError()</ID>
    <ID>FunctionNaming:PlannedPaymentsBottomBar.kt$@Composable fun BoxWithConstraintsScope.PlannedPaymentsBottomBar( bottomInset: Dp = navigationBarInset().toDensityDp(), onClose: () -&gt; Unit, onAdd: () -&gt; Unit )</ID>
    <ID>FunctionNaming:PlannedPaymentsBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>FunctionNaming:PlannedPaymentsLazyColumn.kt$@Composable fun PlannedPaymentsLazyColumn( Header: @Composable () -&gt; Unit, currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, listState: LazyListState = rememberLazyListState(), oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double, )</ID>
    <ID>FunctionNaming:PlannedPaymentsLazyColumn.kt$@Composable private fun LazyItemScope.NoPlannedPaymentsEmptyState()</ID>
    <ID>FunctionNaming:PlannedPaymentsScreen.kt$@Composable fun BoxWithConstraintsScope.PlannedPaymentsScreen(screen: PlannedPayments)</ID>
    <ID>FunctionNaming:PlannedPaymentsScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double )</ID>
    <ID>FunctionNaming:PlannedPaymentsScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:PlansSheet.kt$@Composable fun BoxWithConstraintsScope.PlansSheet( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, onPlansSheetHeightChanged: (Int) -&gt; Unit = {}, onPlanSelected: (Plan?) -&gt; Unit, onBuy: (Plan) -&gt; Unit )</ID>
    <ID>FunctionNaming:PlansSheet.kt$@Composable private fun BoxWithConstraintsScope.BottomBar( Action: @Composable () -&gt; Unit, setBottomBarHeight: (Int) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:PlansSheet.kt$@Composable private fun ColumnScope.PlanCard( plan: Plan, purchased: Boolean, selectedPlan: Plan?, monthlyPlan: Plan?, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:PlansSheet.kt$@Composable private fun LongNoticeText( plan: Plan? )</ID>
    <ID>FunctionNaming:PlansSheet.kt$@Composable private fun Plans( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, selectedPlan: Plan?, onSetSelectedPlan: (Plan?) -&gt; Unit, )</ID>
    <ID>FunctionNaming:PlansSheet.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:PlansSheet.kt$@Preview @Composable private fun Preview_Shitty()</ID>
    <ID>FunctionNaming:Preview.kt$@Composable fun IvyComponentPreview( design: IvyDesign = defaultDesign(), theme: Theme = Theme.LIGHT, content: @Composable BoxScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:Preview.kt$@Composable fun IvyPreview( theme: Theme = Theme.LIGHT, design: IvyDesign, Content: @Composable BoxWithConstraintsScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:PrimaryAttributeColumn.kt$@Composable fun PrimaryAttributeColumn( @DrawableRes icon: Int, title: String, TitleRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, onClick: () -&gt; Unit, Content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:PrimaryAttributeColumn.kt$@Preview @Composable private fun PreviewPrimaryAttributeColumn()</ID>
    <ID>FunctionNaming:ProgressBar.kt$@Composable fun ProgressBar( modifier: Modifier = Modifier, notFilledColor: Color = UI.colors.pure, positiveProgress: Boolean = true, percent: Double )</ID>
    <ID>FunctionNaming:ProgressBar.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ProgressModal.kt$@Composable fun BoxWithConstraintsScope.ProgressModal( id: UUID = UUID.randomUUID(), title: String, description: String, visible: Boolean, color: Color = UI.colors.orange, dismiss: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:RateItem.kt$@Composable fun RateItem( rate: RateUi, onDelete: (() -&gt; Unit)?, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:RateItem.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:RateItem.kt$@Preview @Composable private fun Preview_Delete()</ID>
    <ID>FunctionNaming:RecurringRule.kt$@Composable fun RecurringRule( startDate: LocalDateTime?, intervalN: Int?, intervalType: IntervalType?, oneTime: Boolean, onShowRecurringRuleModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:RecurringRule.kt$@Composable private fun RecurringRuleCard( startDate: LocalDateTime, intervalN: Int?, intervalType: IntervalType?, oneTime: Boolean, onClick: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:RecurringRule.kt$@Preview @Composable private fun Preview_Empty()</ID>
    <ID>FunctionNaming:RecurringRule.kt$@Preview @Composable private fun Preview_OneTime()</ID>
    <ID>FunctionNaming:RecurringRule.kt$@Preview @Composable private fun Preview_Repeat()</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Composable fun BoxWithConstraintsScope.RecurringRuleModal( modal: RecurringRuleModalData?, dismiss: () -&gt; Unit, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, )</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Composable private fun DateRow( dateTime: LocalDateTime, onDatePicked: (LocalDateTime) -&gt; Unit )</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Composable private fun MultipleTimes( startDate: LocalDateTime, intervalN: Int, intervalType: IntervalType, modalScrollState: ScrollState, onSetStartDate: (LocalDateTime) -&gt; Unit, onSetIntervalN: (Int) -&gt; Unit, onSetIntervalType: (IntervalType) -&gt; Unit )</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Composable private fun OneTime( date: LocalDateTime, onDatePicked: (LocalDateTime) -&gt; Unit )</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Composable private fun RowScope.TimesSelectorButton( selected: Boolean, label: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Composable private fun TimesSelector( oneTime: Boolean, onSetOneTime: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Preview @Composable private fun Preview_multipleTimes()</ID>
    <ID>FunctionNaming:RecurringRuleModal.kt$@Preview @Composable private fun Preview_oneTime()</ID>
    <ID>FunctionNaming:ReorderModal.kt$@Composable fun &lt;T : Reorderable&gt; BoxScope.ReorderModal( visible: Boolean, id: UUID = UUID.randomUUID(), TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }, initialItems: List&lt;Any&gt;, dismiss: () -&gt; Unit, onUpdateItemOrderNum: ( itemsInNewOrder: List&lt;Any&gt;, item: T, newOrderNum: Double ) -&gt; Unit = { _, _, _ -&gt; }, onReordered: ((List&lt;Any&gt;) -&gt; Unit)? = null, ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit )</ID>
    <ID>FunctionNaming:ReorderModal.kt$@Composable fun ReorderButton( modifier: Modifier = Modifier, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ReorderModal.kt$@Suppress("UNCHECKED_CAST") @Composable fun &lt;T : Reorderable&gt; BoxScope.ReorderModalSingleType( visible: Boolean, id: UUID = UUID.randomUUID(), TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }, initialItems: List&lt;T&gt;, dismiss: () -&gt; Unit, onUpdateItemOrderNum: (item: T, newOrderNum: Double) -&gt; Unit = { _, _ -&gt; }, onReordered: ((List&lt;T&gt;) -&gt; Unit)? = null, ItemContent: @Composable (Int, T) -&gt; Unit )</ID>
    <ID>FunctionNaming:ReportScreen.kt$@Composable private fun NoFilterEmptyState( setFilterOverlayVisible: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:ReportScreen.kt$@Composable private fun Toolbar( onExport: () -&gt; Unit, onFilter: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ReportScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.ReportScreen( screen: Report )</ID>
    <ID>FunctionNaming:ReportScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: ReportScreenState = ReportScreenState(), onEventHandler: (ReportScreenEvent) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:ReportScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ReportScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_NO_FILTER()</ID>
    <ID>FunctionNaming:RootActivity.kt$RootActivity$@ExperimentalFoundationApi @ExperimentalAnimationApi @Composable private fun BoxWithConstraintsScope.Screens(screen: Screen?)</ID>
    <ID>FunctionNaming:RootActivity.kt$RootActivity$@ExperimentalFoundationApi @ExperimentalAnimationApi @Composable private fun BoxWithConstraintsScope.UI(viewModel: RootViewModel)</ID>
    <ID>FunctionNaming:ScreenTitle.kt$@Composable fun ScreenTitle( modifier: Modifier = Modifier, text: String, textStyle: TextStyle )</ID>
    <ID>FunctionNaming:ScreenTitle.kt$@Composable fun ScreenTitle( text: String, paddingStart: Dp = 0.dp, textColor: Color = UI.colors.primary )</ID>
    <ID>FunctionNaming:ScreenTitle.kt$@Composable fun ScreenTitleLarge( text: String, paddingStart: Dp = 0.dp, textColor: Color = UI.colors.primary )</ID>
    <ID>FunctionNaming:ScreenTitle.kt$@Preview @Composable private fun Preview_Large()</ID>
    <ID>FunctionNaming:ScreenTitle.kt$@Preview @Composable private fun Preview_Standard()</ID>
    <ID>FunctionNaming:SearchScreen.kt$@Composable fun SearchInput( searchQueryTextFieldValue: TextFieldValue, hint: String, focus: Boolean = true, onSetSearchQueryTextField: (TextFieldValue) -&gt; Unit )</ID>
    <ID>FunctionNaming:SearchScreen.kt$@Composable fun SearchScreen(screen: Search)</ID>
    <ID>FunctionNaming:SearchScreen.kt$@Composable private fun UI( transactions: List&lt;TransactionHistoryItem&gt;, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onSearch: (String) -&gt; Unit = {} )</ID>
    <ID>FunctionNaming:SearchScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ServerStopScreen.kt$@Composable fun ServerStopScreen()</ID>
    <ID>FunctionNaming:ServerStopScreen.kt$@Composable private fun ColumnScope.Loading()</ID>
    <ID>FunctionNaming:ServerStopScreen.kt$@Composable private fun Content( onBackup: () -&gt; Unit )</ID>
    <ID>FunctionNaming:ServerStopScreen.kt$@Composable private fun UI( state: ServerStopState, onBackup: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:ServerStopScreen.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ServerStopScreen.kt$@Preview @Composable private fun PreviewLoading()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable fun FetchMissingTransactionsButton( opFetchTrns: OpResult&lt;Unit&gt;?, onFetchMissingTransactions: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun AccountCard( user: User?, opSync: OpResult&lt;Boolean&gt;?, nameLocalAccount: String?, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onCardClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun AccountCardButton( @DrawableRes icon: Int, text: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun AccountCardLocalAccount( name: String?, )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun AccountCardUser( localName: String?, user: User, opSync: OpResult&lt;Boolean&gt;?, onSync: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun AppSwitch( lockApp: Boolean, onSetLockApp: (Boolean) -&gt; Unit, text: String, description: String = "", icon: Int, )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun ContactSupport()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun CurrencyButton( currency: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun ExportCSV( onExportToCSV: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun HelpCenter()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun IvyTelegram()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun Premium()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun ProjectContributors()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun RequestFeature( onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun Roadmap()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun SettingsButtonRow( hasShadow: Boolean = false, backgroundGradient: Gradient = Gradient.solid(UI.colors.medium), onClick: (() -&gt; Unit)?, Content: @Composable RowScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun SettingsDefaultButton( @DrawableRes icon: Int, text: String, iconPadding: Dp = 0.dp, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun SettingsPrimaryButton( @DrawableRes icon: Int, text: String, hasShadow: Boolean = false, backgroundGradient: Gradient = Gradient.solid(UI.colors.medium), textColor: Color = White, iconPadding: Dp = 0.dp, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun SettingsSectionDivider( text: String, color: Color = Gray )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun StartDateOfMonth( startDateOfMonth: Int, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@Composable private fun TCAndPrivacyPolicy()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.SettingsScreen(screen: Settings)</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( user: User?, currencyCode: String, opSync: OpResult&lt;Boolean&gt;?, lockApp: Boolean, showNotifications: Boolean = true, hideCurrentBalance: Boolean = false, progressState: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, nameLocalAccount: String?, startDateOfMonth: Int = 1, onSetCurrency: (String) -&gt; Unit, onSetName: (String) -&gt; Unit = {}, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onBackupData: () -&gt; Unit = {}, onExportToCSV: () -&gt; Unit = {}, onSetLockApp: (Boolean) -&gt; Unit = {}, onSetShowNotifications: (Boolean) -&gt; Unit = {}, onSetTreatTransfersAsIncExp: (Boolean) -&gt; Unit = {}, onSetHideCurrentBalance: (Boolean) -&gt; Unit = {}, onSetStartDateOfMonth: (Int) -&gt; Unit = {}, onDeleteAllUserData: () -&gt; Unit = {}, onDeleteCloudUserData: () -&gt; Unit = {}, )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_loading()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_localAccount()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_notSynced()</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_synced()</ID>
    <ID>FunctionNaming:Shapes.kt$@Composable fun Shape( modifier: Modifier = Modifier, size: Dp, shape: Shape, color: Color, )</ID>
    <ID>FunctionNaming:Shapes.kt$@Composable fun ShapeOutlined( modifier: Modifier = Modifier, size: Dp, shape: Shape, borderColor: Color, borderWidth: Dp = 1.dp, )</ID>
    <ID>FunctionNaming:Shapes.kt$@Preview @Composable private fun PreviewOutlined()</ID>
    <ID>FunctionNaming:Shapes.kt$@Preview @Composable private fun Preview_Circle()</ID>
    <ID>FunctionNaming:Spacers.kt$@Composable fun ColumnScope.SpacerWeight( weight: Float )</ID>
    <ID>FunctionNaming:Spacers.kt$@Composable fun RowScope.SpacerWeight( weight: Float )</ID>
    <ID>FunctionNaming:Spacers.kt$@Composable fun SpacerHor( width: Dp )</ID>
    <ID>FunctionNaming:Spacers.kt$@Composable fun SpacerKeyboardHeight( animation: AnimationSpec&lt;Dp&gt;? = null )</ID>
    <ID>FunctionNaming:Spacers.kt$@Composable fun SpacerVer( height: Dp )</ID>
    <ID>FunctionNaming:SpendeeSteps.kt$@Composable fun SpendeeSteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:Suggestions.kt$@Composable fun Suggestions( suggestions: List&lt;Any&gt;, onAddSuggestion: (Any) -&gt; Unit, onAddNew: () -&gt; Unit )</ID>
    <ID>FunctionNaming:Suggestions.kt$@Composable private fun AddNewButton( onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:Suggestions.kt$@Composable private fun Suggestion( name: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:Suggestions.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:Switch.kt$@Composable fun Switch( modifier: Modifier = Modifier, enabled: Boolean, enabledColor: Color = UI.colors.green, disabledColor: Color = UI.colors.gray, animationColor: AnimationSpec&lt;Color&gt; = springBounce(), animationMove: AnimationSpec&lt;Float&gt; = springBounce(), onEnabledChange: (checked: Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:Switch.kt$@Preview @Composable private fun PreviewIvySwitch()</ID>
    <ID>FunctionNaming:Title.kt$@Composable fun ColumnScope.Title( type: TransactionType, titleFocus: FocusRequester, initialTransactionId: UUID?, titleTextFieldValue: TextFieldValue, setTitleTextFieldValue: (TextFieldValue) -&gt; Unit, suggestions: Set&lt;String&gt;, scrollState: ScrollState? = null, onTitleChanged: (String?) -&gt; Unit, onNext: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:Title.kt$@Composable private fun Suggestion( suggestion: String, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:Title.kt$@Composable private fun Suggestions( suggestions: Set&lt;String&gt;, onClick: (String) -&gt; Unit )</ID>
    <ID>FunctionNaming:Title.kt$@Preview @Composable private fun PreviewTitleWithSuggestions()</ID>
    <ID>FunctionNaming:Toolbar.kt$@Composable fun Toolbar( type: TransactionType, initialTransactionId: UUID?, onDeleteTrnModal: () -&gt; Unit, onChangeTransactionTypeModal: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Composable fun TransactionCard( baseData: AppBaseData, transaction: Transaction, onPayOrGet: (Transaction) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onClick: (Transaction) -&gt; Unit, )</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Composable fun TypeAmountCurrency( transactionType: TransactionType, dueDate: LocalDateTime?, currency: String, amount: Double )</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Composable private fun TransactionBadge( text: String, backgroundColor: Color, icon: String?, @DrawableRes defaultIcon: Int, onClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Composable private fun TransactionHeaderRow( transaction: Transaction, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt; )</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Composable private fun TransferHeader( accounts: List&lt;Account&gt;, transaction: Transaction )</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Preview @Composable private fun PreviewIncome()</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Preview @Composable private fun PreviewNormalExpense()</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Preview @Composable private fun PreviewOverdueExpense()</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Preview @Composable private fun PreviewTransfer()</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Preview @Composable private fun PreviewTransfer_differentCurrency()</ID>
    <ID>FunctionNaming:TransactionCard.kt$@Preview @Composable private fun PreviewUpcomingExpense()</ID>
    <ID>FunctionNaming:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 LIMIT 1") suspend fun findAll_LIMIT_1(): List&lt;TransactionEntity&gt;</ID>
    <ID>FunctionNaming:TransactionDateTime.kt$@Composable fun TransactionDateTime( dateTime: LocalDateTime?, dueDateTime: LocalDateTime?, onEditDateTime: () -&gt; Unit )</ID>
    <ID>FunctionNaming:TransactionDateTime.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:TransactionSectionDivider.kt$@Composable fun SectionDivider( expanded: Boolean, title: String, titleColor: Color, baseCurrency: String, income: Double, expenses: Double, showIncomeExpenseRow: Boolean = true, setExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:TransactionSectionDivider.kt$@Composable private fun SectionDividerIncomeExpenseRow( income: Double, expenses: Double, baseCurrency: String )</ID>
    <ID>FunctionNaming:TransactionSectionDivider.kt$@Preview @Composable private fun Preview_Expenses()</ID>
    <ID>FunctionNaming:TransactionSectionDivider.kt$@Preview @Composable private fun Preview_Income()</ID>
    <ID>FunctionNaming:TransactionSectionDivider.kt$@Preview @Composable private fun Preview_Income_Expenses()</ID>
    <ID>FunctionNaming:Transactions.kt$@Composable private fun LazyItemScope.NoTransactionsEmptyState( emptyStateTitle: String, emptyStateText: String, )</ID>
    <ID>FunctionNaming:TransactionsDividerLine.kt$@Composable fun TransactionsDividerLine( modifier: Modifier = Modifier, paddingHorizontal: Dp = 24.dp )</ID>
    <ID>FunctionNaming:UserStatsTab.kt$@Composable fun ColumnScope.UserStatsTab( onboardedUsersGoogle: Int, userStats: UserStats )</ID>
    <ID>FunctionNaming:UserStatsTab.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:ViewPager.kt$@Composable fun Pager( state: PagerState, modifier: Modifier = Modifier, pageContent: @Composable PagerScope.() -&gt; Unit )</ID>
    <ID>FunctionNaming:WalletBalanceWidgetContent.kt$@Composable fun BalanceSection( balance: String, currency: String )</ID>
    <ID>FunctionNaming:WalletBalanceWidgetContent.kt$@Composable fun ButtonsSection()</ID>
    <ID>FunctionNaming:WalletBalanceWidgetContent.kt$@Composable fun IncomeExpenseSection( income: String, expense: String, currency: String )</ID>
    <ID>FunctionNaming:WalletBalanceWidgetContent.kt$@Composable fun RowScope.WidgetClickableItem( @DrawableRes image: Int, @StringRes text: Int, )</ID>
    <ID>FunctionNaming:WalletBalanceWidgetContent.kt$@Composable fun WalletBalanceWidgetContent( appLocked: Boolean, balance: String, currency: String, income: String, expense: String )</ID>
    <ID>FunctionNaming:WalletByBudgetBakersSteps.kt$@Composable fun WalletByBudgetBakersSteps( onUploadClick: () -&gt; Unit )</ID>
    <ID>FunctionNaming:WalletCharts.kt$@Composable fun BalanceChart( balanceChart: List&lt;SingleChartPoint&gt;, period: ChartPeriod, baseCurrencyCode: String )</ID>
    <ID>FunctionNaming:WalletCharts.kt$@Composable fun ChartInfoCard( baseCurrencyCode: String, backgroundColor: Color, chartPoint: SingleChartPoint, formatValueAsCount: Boolean = false, )</ID>
    <ID>FunctionNaming:WebViewScreen.kt$@SuppressLint("SetJavaScriptEnabled") @ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.WebViewScreen(screen: IvyWebView)</ID>
    <ID>FunctionNaming:WebViewScreen.kt$@SuppressLint("SetJavaScriptEnabled") @ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI(url: String)</ID>
    <ID>FunctionNaming:WrapContentRow.kt$@Composable fun &lt;T&gt; WrapContentRow( modifier: Modifier = Modifier, items: List&lt;T&gt;, verticalMarginBetweenRows: Dp = 8.dp, horizontalMarginBetweenItems: Dp = 8.dp, ItemContent: @Composable (item: T) -&gt; Unit )</ID>
    <ID>FunctionNaming:WrapContentRow.kt$@Preview @Composable private fun PreviewWrapContentRow()</ID>
    <ID>FunctionNaming:dependencies.kt$fun DependencyHandler.AndroidX()</ID>
    <ID>FunctionNaming:dependencies.kt$fun DependencyHandler.Hilt( hiltVersion: String, versionX: String )</ID>
    <ID>FunctionNaming:dependencies.kt$fun DependencyHandler.HiltTesting( version: String )</ID>
    <ID>FunctionNaming:dependencies.kt$fun DependencyHandler.Lifecycle( version: String = "2.6.1" )</ID>
    <ID>FunctionNaming:dependencies.kt$fun DependencyHandler.Networking( retrofitVersion: String = "2.9.0" )</ID>
    <ID>FunctionNaming:dependencies.kt$fun DependencyHandler.RoomDB( version: String = "2.6.0-alpha03" )</ID>
    <ID>FunctionNaming:dependencies.kt$fun DependencyHandler.ThirdParty()</ID>
    <ID>FunctionOnlyReturningConstant:IvySession.kt$IvySession$fun isLoggedIn(): Boolean</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$FirstRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$FourthRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$Header: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$SecondRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$ThirdRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$ZeroRow: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:BackBottomBar.kt$PrimaryAction: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ColumnRoot.kt$Content: @Composable ColumnScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:EditBottomSheet.kt$ActionButton: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ItemIcon.kt$Default: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:IvyComponents.kt$Content: @Composable RowScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyComposeApp.kt$Content: @Composable BoxScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyComposeApp.kt$Content: @Composable BoxWithConstraintsScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyModal.kt$Content: @Composable ColumnScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyModal.kt$PrimaryAction: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyModal.kt$SecondaryActions: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:IvyModalDomainComponents.kt$Header: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:IvyToolbar.kt$Content: @Composable RowScope.() -&gt; Unit = { }</ID>
    <ID>FunctionParameterNaming:IvyUI.kt$Content: @Composable BoxWithConstraintsScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PaywallScreen.kt$ExtraInfo: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PlannedPaymentsLazyColumn.kt$Header: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PlansSheet.kt$Action: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:Preview.kt$Content: @Composable BoxWithConstraintsScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PrimaryAttributeColumn.kt$Content: @Composable ColumnScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PrimaryAttributeColumn.kt$TitleRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$Adapter.ItemViewHolder$ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$ItemContent: @Composable (Int, T) -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }</ID>
    <ID>FunctionParameterNaming:SettingsScreen.kt$Content: @Composable RowScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:WrapContentRow.kt$ItemContent: @Composable (item: T) -&gt; Unit</ID>
    <ID>FunctionReturnTypeSpacing:ComposeExt.kt$fun Modifier.thenIf(condition: Boolean, thanModifier: @Composable Modifier.() -&gt; Modifier) : Modifier</ID>
    <ID>FunctionReturnTypeSpacing:ReportViewModel.kt$ReportViewModel$private fun calculateBalance(incomeExpenseTransferPair: IncomeExpenseTransferPair) : BigDecimal</ID>
    <ID>FunctionStartOfBodySpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$fun skipTransaction(screen: ItemStatistic, transaction: Transaction)</ID>
    <ID>FunctionStartOfBodySpacing:ItemStatisticViewModel.kt$ItemStatisticViewModel$fun skipTransactions(screen: ItemStatistic, transactions: List&lt;Transaction&gt;)</ID>
    <ID>FunctionStartOfBodySpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$suspend fun payOrGet( transactions: List&lt;Transaction&gt;, syncTransaction: Boolean = true, skipTransaction: Boolean = false, onUpdateUI: suspend (paidTransactions: List&lt;Transaction&gt;) -&gt; Unit )</ID>
    <ID>FunctionStartOfBodySpacing:ReportViewModel.kt$ReportViewModel$private fun calculateBalance(incomeExpenseTransferPair: IncomeExpenseTransferPair) : BigDecimal</ID>
    <ID>ImportOrdering:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Category.kt$import androidx.compose.foundation.layout.padding import androidx.compose.runtime.Composable import androidx.compose.ui.Modifier import androidx.compose.ui.res.stringResource import androidx.compose.ui.text.font.FontWeight import androidx.compose.ui.unit.dp import com.ivy.design.l0_system.UI import com.ivy.design.l0_system.style import com.ivy.wallet.R import com.ivy.wallet.domain.data.core.Category import com.ivy.wallet.ui.theme.Gradient import com.ivy.wallet.ui.theme.components.IvyBorderButton import com.ivy.wallet.ui.theme.components.IvyButton import com.ivy.wallet.ui.theme.components.getCustomIconIdS import com.ivy.wallet.ui.theme.findContrastTextColor import com.ivy.wallet.ui.theme.toComposeColor</ID>
    <ID>ImportOrdering:DetektConfigurationAccessors.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:DetektPluginsConfigurationAccessors.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:DueTrnsInfoAct.kt$import com.ivy.frp.action.FPAction import com.ivy.frp.lambda import com.ivy.frp.then import com.ivy.wallet.domain.action.account.AccountByIdAct import com.ivy.wallet.domain.action.exchange.ExchangeAct import com.ivy.wallet.domain.action.exchange.actInput import com.ivy.wallet.domain.action.transaction.DueTrnsAct import com.ivy.wallet.domain.data.core.Transaction import com.ivy.wallet.domain.pure.data.ClosedTimeRange import com.ivy.wallet.domain.pure.data.IncomeExpensePair import com.ivy.wallet.domain.pure.exchange.ExchangeTrnArgument import com.ivy.wallet.domain.pure.exchange.exchangeInBaseCurrency import com.ivy.wallet.domain.pure.transaction.expenses import com.ivy.wallet.domain.pure.transaction.incomes import com.ivy.wallet.domain.pure.transaction.sumTrns import com.ivy.wallet.utils.dateNowUTC import java.time.LocalDate import javax.inject.Inject</ID>
    <ID>Indentation:AccountSync.kt$AccountSync$ </ID>
    <ID>Indentation:AmountFormatting.kt$ </ID>
    <ID>Indentation:AmountModal.kt$ </ID>
    <ID>Indentation:BufferBattery.kt$ </ID>
    <ID>Indentation:CSVScreen.kt$ </ID>
    <ID>Indentation:CSVViewModel.kt$CSVViewModel$ </ID>
    <ID>Indentation:CategoriesScreen.kt$ </ID>
    <ID>Indentation:CategoriesViewModel.kt$CategoriesViewModel$ </ID>
    <ID>Indentation:CategorySync.kt$CategorySync$ </ID>
    <ID>Indentation:ChoosePeriodModal.kt$ </ID>
    <ID>Indentation:ComposeExt.kt$ </ID>
    <ID>Indentation:CurrencyPicker.kt$ </ID>
    <ID>Indentation:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$ </ID>
    <ID>Indentation:DonateModal.kt$ </ID>
    <ID>Indentation:EditPlannedViewModel.kt$EditPlannedViewModel$ </ID>
    <ID>Indentation:EditTransactionViewModel.kt$EditTransactionViewModel$ </ID>
    <ID>Indentation:ExportCSVLogic.kt$ExportCSVLogic$ </ID>
    <ID>Indentation:HomeViewModel.kt$HomeViewModel$ </ID>
    <ID>Indentation:ImportResultUI.kt$ </ID>
    <ID>Indentation:InputField.kt$ </ID>
    <ID>Indentation:Insets.kt$ </ID>
    <ID>Indentation:ItemStatisticViewModel.kt$ItemStatisticViewModel$ </ID>
    <ID>Indentation:IvySync.kt$IvySync$ </ID>
    <ID>Indentation:KPIsTab.kt$ </ID>
    <ID>Indentation:LastNTimeRange.kt$LastNTimeRange$ </ID>
    <ID>Indentation:LoanRecordModal.kt$ </ID>
    <ID>Indentation:LoanRecordSync.kt$LoanRecordSync$ </ID>
    <ID>Indentation:LoanSync.kt$LoanSync$ </ID>
    <ID>Indentation:LoanTransactionsCore.kt$LoanTransactionsCore$ </ID>
    <ID>Indentation:MainBottomBar.kt$ </ID>
    <ID>Indentation:OnboardingSplashLogin.kt$ </ID>
    <ID>Indentation:ParseFields.kt$ </ID>
    <ID>Indentation:PieChartAct.kt$PieChartAct$ </ID>
    <ID>Indentation:PlannedPaymentSync.kt$PlannedPaymentSync$ </ID>
    <ID>Indentation:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$ </ID>
    <ID>Indentation:PlansSheet.kt$ </ID>
    <ID>Indentation:PrimaryAttributeColumn.kt$ </ID>
    <ID>Indentation:RecurringRule.kt$ </ID>
    <ID>Indentation:ReportViewModel.kt$ReportViewModel$ </ID>
    <ID>Indentation:RootActivity.kt$RootActivity$ </ID>
    <ID>Indentation:Screens.kt$EditPlanned$ </ID>
    <ID>Indentation:SearchViewModel.kt$SearchViewModel$ </ID>
    <ID>Indentation:ServerStopScreen.kt$ </ID>
    <ID>Indentation:SettingsScreen.kt$ </ID>
    <ID>Indentation:TransactionReminderWorker.kt$TransactionReminderWorker$ </ID>
    <ID>Indentation:TransactionSync.kt$TransactionSync$ </ID>
    <ID>Indentation:UtilExt.kt$ </ID>
    <ID>Indentation:ViewPager.kt$PagerState$ </ID>
    <ID>Indentation:WalletAccountLogic.kt$WalletAccountLogic$ </ID>
    <ID>InstanceOfCheckForException:RestClient.kt$RestClient.Companion$exception is NetworkError</ID>
    <ID>LargeClass:AppModuleDI.kt$AppModuleDI</ID>
    <ID>LongMethod:AccountModal.kt$@Composable fun BoxWithConstraintsScope.AccountModal( modal: AccountModalData?, onCreateAccount: (CreateAccountData) -&gt; Unit, onEditAccount: (Account, balance: Double) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:AccountsTab.kt$@Composable private fun AccountHeader( accountData: AccountData, currency: String, baseCurrency: String, contrastColor: Color, onBalanceClick: () -&gt; Unit )</ID>
    <ID>LongMethod:AccountsTab.kt$@Composable private fun BoxWithConstraintsScope.UI( state: AccountState = AccountState(), onEventHandler: (AccountsEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:AddRateModal.kt$@Composable fun BoxWithConstraintsScope.AddRateModal( visible: Boolean, baseCurrency: String, dismiss: () -&gt; Unit, onAdd: (RatesEvent.AddRate) -&gt; Unit, )</ID>
    <ID>LongMethod:AmountModal.kt$@Composable fun AmountKeyboard( forCalculator: Boolean, ZeroRow: (@Composable RowScope.() -&gt; Unit)? = null, FirstRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, SecondRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, ThirdRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, FourthRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, onNumberPressed: (String) -&gt; Unit, onDecimalPoint: () -&gt; Unit, onBackspace: () -&gt; Unit, )</ID>
    <ID>LongMethod:AmountModal.kt$@Composable fun BoxWithConstraintsScope.AmountModal( id: UUID, visible: Boolean, currency: String, initialAmount: Double?, decimalCountMax: Int = 2, Header: (@Composable () -&gt; Unit)? = null, amountSpacerTop: Dp = 64.dp, dismiss: () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, )</ID>
    <ID>LongMethod:AnalyticsReportScreen.kt$@Composable private fun ColumnScope.Content( selectedTab: AnalyticsTab, onboardingReport: OnboardingReport, kpis: KPIs, health: Health, userStats: UserStats, setSelectedTab: (AnalyticsTab) -&gt; Unit, )</ID>
    <ID>LongMethod:AnalyticsReportScreen.kt$@Composable private fun UI( selectedTab: AnalyticsTab, startDate: LocalDateTime?, endDate: LocalDateTime?, onboardingReport: OnboardingReport?, kpis: KPIs?, health: Health?, userStats: UserStats?, loading: Boolean, onRefresh: () -&gt; Unit = {}, onSetStartDate: (LocalDateTime?) -&gt; Unit = {}, onSetEndDate: (LocalDateTime?) -&gt; Unit = {}, onSelectTab: (AnalyticsTab) -&gt; Unit = {}, onNukeTestEvents: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:AnalyticsReportViewModel.kt$AnalyticsReportViewModel$fun start( startDate: LocalDateTime? = this.startDate.value, endDate: LocalDateTime? = this.endDate.value, )</ID>
    <ID>LongMethod:AppLockedScreen.kt$@Composable fun BoxWithConstraintsScope.AppLockedScreen( onShowOSBiometricsModal: () -&gt; Unit, onContinueWithoutAuthentication: () -&gt; Unit )</ID>
    <ID>LongMethod:BalanceRow.kt$@Composable fun BalanceRow( modifier: Modifier = Modifier, currency: String, balance: Double, hiddenMode: Boolean = false, textColor: Color = UI.colors.pureInverse, decimalPaddingTop: Dp = 12.dp, spacerCurrency: Dp = 12.dp, spacerDecimal: Dp = 8.dp, currencyFontSize: TextUnit? = null, integerFontSize: TextUnit? = null, decimalFontSize: TextUnit? = null, currencyUpfront: Boolean = true, balanceAmountPrefix: String? = null, shortenBigNumbers: Boolean = false, )</ID>
    <ID>LongMethod:BudgetBattery.kt$@Composable fun BudgetBattery( modifier: Modifier = Modifier, currency: String, expenses: Double, budget: Double, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:BudgetModal.kt$@Composable fun BoxWithConstraintsScope.BudgetModal( modal: BudgetModalData?, onCreate: (CreateBudgetData) -&gt; Unit, onEdit: (Budget) -&gt; Unit, onDelete: (Budget) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:BudgetScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( timeRange: FromToTimeRange?, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, displayBudgets: List&lt;DisplayBudget&gt;, appBudgetMax: Double, categoryBudgetsTotal: Double, onCreateBudget: (CreateBudgetData) -&gt; Unit = {}, onEditBudget: (Budget) -&gt; Unit = {}, onDeleteBudget: (Budget) -&gt; Unit = {}, onReorder: (List&lt;DisplayBudget&gt;) -&gt; Unit = {} )</ID>
    <ID>LongMethod:BudgetScreen.kt$@Composable private fun Toolbar( timeRange: FromToTimeRange?, baseCurrency: String, appBudgetMax: Double, categoryBudgetsTotal: Double, setReorderModalVisible: (Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:BufferBattery.kt$@Composable fun BufferBattery( modifier: Modifier = Modifier, buffer: Double, balance: Double, currency: String, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:CSVImporter.kt$CSVImporter$private fun mapDate( rowMapping: RowMapping, dateString: String? ): LocalDateTime?</ID>
    <ID>LongMethod:CSVImporter.kt$CSVImporter$private suspend fun mapToTransaction( baseCurrency: String, row: List&lt;String&gt;, rowMapping: RowMapping ): Transaction?</ID>
    <ID>LongMethod:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapToTransaction( baseCurrency: String, row: CSVRowNew, importantFields: ImportantFields, transferFields: TransferFields, optionalFields: OptionalFields, ): Transaction?</ID>
    <ID>LongMethod:CSVViewModel.kt$CSVViewModel$private suspend fun handleEvent(event: CSVEvent)</ID>
    <ID>LongMethod:CalculatorModal.kt$@Composable fun BoxWithConstraintsScope.CalculatorModal( id: UUID = UUID.randomUUID(), initialAmount: Double?, visible: Boolean, currency: String, dismiss: () -&gt; Unit, onCalculation: (Double) -&gt; Unit )</ID>
    <ID>LongMethod:CategoriesScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( state: CategoriesScreenState = CategoriesScreenState(), onEvent: (CategoriesScreenEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:CategoryCharts.kt$fun LazyListScope.categoryCharts( period: ChartPeriod, baseCurrencyCode: String, categories: List&lt;Category&gt;, categoryExpenseValues: List&lt;CategoryValues&gt; = emptyList(), categoryExpenseCount: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeValues: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeCount: List&lt;CategoryValues&gt; = emptyList(), onLoadCategory: (Category) -&gt; Unit, onRemoveCategory: (Category) -&gt; Unit )</ID>
    <ID>LongMethod:CategoryModal.kt$@Composable fun BoxWithConstraintsScope.CategoryModal( modal: CategoryModalData?, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:ChangeTransactionTypeModal.kt$@Composable fun BoxWithConstraintsScope.ChangeTransactionTypeModal( title: String = stringResource(R.string.set_transaction_type), visible: Boolean, includeTransferType: Boolean, initialType: TransactionType, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onTransactionTypeChanged: (TransactionType) -&gt; Unit )</ID>
    <ID>LongMethod:ChooseCategoryModal.kt$@ExperimentalFoundationApi @Composable private fun CategoryButton( category: Category, selected: Boolean, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onDeselect: () -&gt; Unit, )</ID>
    <ID>LongMethod:ChooseIconModal.kt$fun ivyIcons(): List&lt;Any&gt;</ID>
    <ID>LongMethod:ChoosePeriodModal.kt$@Composable fun BoxWithConstraintsScope.ChoosePeriodModal( modal: ChoosePeriodModalData?, dismiss: () -&gt; Unit, onPeriodSelected: (TimePeriod) -&gt; Unit )</ID>
    <ID>LongMethod:ChoosePeriodModal.kt$@Composable private fun ChooseMonth( selectedMonthYear: MonthYear?, onSelected: (MonthYear) -&gt; Unit, )</ID>
    <ID>LongMethod:ChoosePeriodModal.kt$@Composable private fun IntervalFromToDate( border: IntervalBorder, dateTime: LocalDateTime?, otherEndDateTime: LocalDateTime?, onSelected: (LocalDateTime?) -&gt; Unit )</ID>
    <ID>LongMethod:ChooseStartDateOfMonthModal.kt$@Composable fun BoxWithConstraintsScope.ChooseStartDateOfMonthModal( id: UUID = UUID.randomUUID(), visible: Boolean, selectedStartDateOfMonth: Int, dismiss: () -&gt; Unit, onStartDateOfMonthSelected: (Int) -&gt; Unit, )</ID>
    <ID>LongMethod:CurrencyPicker.kt$@Composable private fun SearchInput( searchTextFieldValue: TextFieldValue, onSetSearchTextFieldValue: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongMethod:CustomExchangeRateCard.kt$@Composable fun CustomExchangeRateCard( modifier: Modifier = Modifier, title: String = stringResource(R.string.exchange_rate), fromCurrencyCode: String, toCurrencyCode: String, exchangeRate: Double, onRefresh: () -&gt; Unit = {}, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:CustomerJourney.kt$@Composable fun CustomerJourneyCard( cardData: CustomerJourneyCardData, onDismiss: () -&gt; Unit, onCTA: () -&gt; Unit )</ID>
    <ID>LongMethod:DescriptionModal.kt$@Composable fun BoxWithConstraintsScope.DescriptionModal( id: UUID = UUID.randomUUID(), visible: Boolean, description: String?, onDescriptionChanged: (String?) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:DonateModal.kt$@Composable fun BoxWithConstraintsScope.DonateModal( visible: Boolean, dismiss: () -&gt; Unit, onGooglePlay: () -&gt; Unit, onGitHubSponsors: () -&gt; Unit, )</ID>
    <ID>LongMethod:DonateScreen.kt$@Composable private fun DonateOptionPicker( option: DonateOption, onSelect: (DonateOption) -&gt; Unit )</ID>
    <ID>LongMethod:EditBottomSheet.kt$@Composable fun BoxWithConstraintsScope.EditBottomSheet( initialTransactionId: UUID?, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, amount: Double, currency: String, convertedAmount: Double? = null, convertedAmountCurrencyCode: String? = null, amountModalShown: Boolean, setAmountModalShown: (Boolean) -&gt; Unit, ActionButton: @Composable () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>LongMethod:EditBottomSheet.kt$@Composable private fun TransferRowMini( percentCollapsed: Float, fromAccount: Account?, toAccount: Account?, onSetExpanded: () -&gt; Unit )</ID>
    <ID>LongMethod:EditPlannedScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditPlanned, startDate: LocalDateTime?, intervalN: Int?, intervalType: IntervalType?, oneTime: Boolean, type: TransactionType, currency: String, initialTitle: String?, description: String?, category: Category?, account: Account?, amount: Double, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onSave: () -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.EditTransactionScreen(screen: EditTransaction)</ID>
    <ID>LongMethod:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditTransaction, transactionType: TransactionType, baseCurrency: String, initialTitle: String?, titleSuggestions: Set&lt;String&gt;, description: String?, category: Category?, dateTime: LocalDateTime?, account: Account?, toAccount: Account?, dueDate: LocalDateTime?, amount: Double, loanData: EditTransactionDisplayLoan = EditTransactionDisplayLoan(), backgroundProcessing: Boolean = false, customExchangeRateState: CustomExchangeRateState, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, hasChanges: Boolean = false, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onDueDateChanged: (LocalDateTime?) -&gt; Unit, onSetDateTime: (LocalDateTime) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onPayPlannedPayment: () -&gt; Unit, onSave: (closeScreen: Boolean) -&gt; Unit, onSetHasChanges: (hasChanges: Boolean) -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, onExchangeRateChanged: (Double?) -&gt; Unit = { } )</ID>
    <ID>LongMethod:ExchangeRatesScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( state: RatesState, onEvent: (RatesEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ExportCSVLogic.kt$ExportCSVLogic$private fun Transaction.toCSV( baseCurrency: String, accountMap: Map&lt;UUID, Account&gt;, categoryMap: Map&lt;UUID, Category&gt; ): String</ID>
    <ID>LongMethod:FilterOverlay.kt$@Composable fun BoxWithConstraintsScope.FilterOverlay( visible: Boolean, baseCurrency: String, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, filter: ReportFilter?, onClose: () -&gt; Unit, onSetFilter: (ReportFilter?) -&gt; Unit )</ID>
    <ID>LongMethod:FilterOverlay.kt$@Composable private fun KeywordsFilter( filter: ReportFilter?, nonNullFilter: (ReportFilter?) -&gt; ReportFilter, onSetFilter: (ReportFilter) -&gt; Unit, onShowIncludeKeywordModal: () -&gt; Unit, onShowExcludeKeywordModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:GitHubBackupCard.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun BackupEnabled( viewModel: GitHubBackupViewModel, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:GitHubBackupScreen.kt$@Composable private fun Content( modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:HomeMoreMenu.kt$@Composable fun BoxWithConstraintsScope.MoreMenu( expanded: Boolean, balance: Double, buffer: Double, currency: String, theme: Theme, setExpanded: (Boolean) -&gt; Unit, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit )</ID>
    <ID>LongMethod:HomeMoreMenu.kt$@Composable private fun QuickAccess( theme: Theme, onSwitchTheme: () -&gt; Unit )</ID>
    <ID>LongMethod:HomeTab.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: HomeState, onEvent: (HomeEvent) -&gt; Unit )</ID>
    <ID>LongMethod:ImportInstructions.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.ImportInstructions( hasSkip: Boolean, importType: ImportType, onSkip: () -&gt; Unit, onUploadClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:ImportResultUI.kt$@Composable fun ImportResultUI( result: ImportResult, launchedFromOnboarding: Boolean, isManualCsvImport: Boolean = false, onTryAgain: (() -&gt; Unit)? = null, onFinish: () -&gt; Unit )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable fun BoxWithConstraintsScope.ItemStatisticScreen(screen: ItemStatistic)</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( period: TimePeriod, baseCurrency: String, currency: String, account: Account?, category: Category?, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, initWithTransactions: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, history: List&lt;TransactionHistoryItem&gt;, upcomingExpanded: Boolean = true, setUpcomingExpanded: (Boolean) -&gt; Unit = {}, upcomingIncome: Double = 0.0, upcomingExpenses: Double = 0.0, upcoming: List&lt;Transaction&gt; = emptyList(), overdueExpanded: Boolean = true, setOverdueExpanded: (Boolean) -&gt; Unit = {}, overdueIncome: Double = 0.0, overdueExpenses: Double = 0.0, overdue: List&lt;Transaction&gt; = emptyList(), onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onSetPeriod: (TimePeriod) -&gt; Unit, onEditAccount: (Account, Double) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onDelete: () -&gt; Unit, onPayOrGet: (Transaction) -&gt; Unit = {}, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun Header( history: List&lt;TransactionHistoryItem&gt;, currency: String, baseCurrency: String, itemColor: Color, account: Account?, category: Category?, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, treatTransfersAsIncomeExpense: Boolean = false, onEdit: () -&gt; Unit, onDelete: () -&gt; Unit, onBalanceClick: () -&gt; Unit, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun Item( itemColor: Color, contrastColor: Color, account: Account?, category: Category?, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun RowScope.HeaderCard( title: String, currencyCode: String, amount: Double, transactionCount: Int, isIncome: Boolean, addButtonText: String?, itemColor: Color, onHeaderCardClicked: () -&gt; Unit = {}, onAddClick: () -&gt; Unit )</ID>
    <ID>LongMethod:ItemStatisticViewModel.kt$ItemStatisticViewModel$private suspend fun initForAccount(accountId: UUID)</ID>
    <ID>LongMethod:ItemStatisticViewModel.kt$ItemStatisticViewModel$private suspend fun initForCategoryWithTransactions( categoryId: UUID, accountFilterList: List&lt;UUID&gt;, transactions: List&lt;Transaction&gt; )</ID>
    <ID>LongMethod:IvyBorderButton.kt$@Composable fun IvyBorderButton( modifier: Modifier = Modifier, text: String, textStyle: TextStyle = UI.typo.b2.style( color = UI.colors.pureInverse, fontWeight = FontWeight.Bold ), backgroundGradient: Gradient = Gradient.solid(UI.colors.mediumInverse), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = UI.colors.pureInverse, enabled: Boolean = true, wrapContentMode: Boolean = true, padding: Dp = 12.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:IvyButton.kt$@Composable fun IvyButton( modifier: Modifier = Modifier, text: String, backgroundGradient: Gradient = GradientIvy, textStyle: TextStyle = UI.typo.b2.style( color = White, fontWeight = FontWeight.Bold ), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = White, enabled: Boolean = true, shadowAlpha: Float = 0.15f, wrapContentMode: Boolean = true, hasGlow: Boolean = true, padding: Dp = 12.dp, iconEdgePadding: Dp = 12.dp, iconTextPadding: Dp = 4.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:IvyChecklistTextField.kt$@Composable fun IvyChecklistTextField( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, value: TextFieldValue, hint: String?, readOnly: Boolean = false, fontWeight: FontWeight = FontWeight.Medium, hintFontWeight: FontWeight = FontWeight.Medium, textColor: Color = UI.colors.pureInverse, hintColor: Color = UI.colors.mediumInverse, textAlign: TextAlign = TextAlign.Start, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = KeyboardOptions.Default, keyboardActions: KeyboardActions? = KeyboardActions.Default, paddingVertical: Dp = 16.dp, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongMethod:IvyColorPicker.kt$@Composable fun ColumnScope.IvyColorPicker( selectedColor: Color, onColorSelected: (Color) -&gt; Unit )</ID>
    <ID>LongMethod:IvyLineChart.kt$@Composable private fun IvyChart( modifier: Modifier, title: String, allValues: List&lt;Value&gt;, xLabel: (x: Double) -&gt; String, yLabel: (y: Double) -&gt; String, maxY: Double, minY: Double, functions: List&lt;Function&gt;, tapEvent: TapEvent?, onTap: (TapEvent) -&gt; Unit )</ID>
    <ID>LongMethod:IvyLineChart.kt$@Preview @Composable private fun Preview_IvyChart()</ID>
    <ID>LongMethod:IvyLineChart.kt$private fun DrawScope.drawFunction( function: Function, functionIndex: Int, minY: Double, maxY: Double, chartHeight: Float, cellSize: Float, lineDistance: Float, lineWidth: Float, offsetLeft: Float, offsetTop: Float, offsetBottom: Float, ): List&lt;FunctionPoint&gt;</ID>
    <ID>LongMethod:IvyModal.kt$@Composable fun BoxScope.IvyModal( id: UUID?, visible: Boolean, dismiss: () -&gt; Unit, SecondaryActions: (@Composable () -&gt; Unit)? = null, PrimaryAction: @Composable () -&gt; Unit, scrollState: ScrollState? = rememberScrollState(), shiftIfKeyboardShown: Boolean = true, includeActionsRowPadding: Boolean = true, Content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>LongMethod:IvyViewPager.kt$@Composable fun IvyPager( state: IvyPagerState, pageContent: @Composable BoxScope.(page: Int) -&gt; Unit )</ID>
    <ID>LongMethod:IvyWalletDesign.kt$IvyWalletDesign$override fun typography(): IvyTypography</ID>
    <ID>LongMethod:KPIsTab.kt$@Composable fun ColumnScope.KPIsTab( kpis: KPIs, activeUsersCount: Int, onboardingCompletedEventCount: Int, onboardingStartedEventCount: Int, )</ID>
    <ID>LongMethod:LoanDetailsScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( baseCurrency: String, loan: Loan?, displayLoanRecords: List&lt;DisplayLoanRecord&gt; = emptyList(), amountPaid: Double, loanAmountPaid: Double = 0.0, accounts: List&lt;Account&gt; = emptyList(), selectedLoanAccount: Account? = null, createLoanTransaction: Boolean = false, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onEditLoan: (Loan, Boolean) -&gt; Unit = { _, _ -&gt; }, onCreateLoanRecord: (CreateLoanRecordData) -&gt; Unit = {}, onEditLoanRecord: (EditLoanRecordData) -&gt; Unit = {}, onDeleteLoanRecord: (LoanRecord) -&gt; Unit = {}, onDeleteLoan: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:LoanDetailsScreen.kt$@Composable private fun LoanInfoCard( loan: Loan, baseCurrency: String, amountPaid: Double, loanAmountPaid: Double = 0.0, selectedLoanAccount: Account? = null, onAddRecord: () -&gt; Unit )</ID>
    <ID>LongMethod:LoanDetailsScreen.kt$@Composable private fun LoanRecordItem( loan: Loan, loanRecord: LoanRecord, baseCurrency: String, loanBaseCurrency: String = "", account: Account? = null, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:LoanDetailsViewModel.kt$LoanDetailsViewModel$private fun load(loanId: UUID)</ID>
    <ID>LongMethod:LoanModal.kt$@Composable fun BoxWithConstraintsScope.LoanModal( accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, modal: LoanModalData?, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, onPerformCalculations: () -&gt; Unit = {}, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:LoanRecordModal.kt$@Composable fun BoxWithConstraintsScope.LoanRecordModal( modal: LoanRecordModalData?, accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, onDelete: (LoanRecord) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:LoansScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( onEventHandler: (LoanScreenEvent) -&gt; Unit = {}, state: LoanScreenState = LoanScreenState() )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable fun BoxWithConstraintsScope.BottomBar( tab: MainTab, selectTab: (MainTab) -&gt; Unit, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, showAddAccountModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable private fun AddExpenseButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonCenterY: Float, clickAreaWidth: Int, onAddExpense: () -&gt; Unit )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable private fun AddIncomeButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonLeftX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddIncome: () -&gt; Unit )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable private fun AddTransferButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonRightX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddTransfer: () -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingAccounts.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.OnboardingAccounts( baseCurrency: String, suggestions: List&lt;CreateAccountData&gt;, accounts: List&lt;AccountBalance&gt;, onCreateAccount: (CreateAccountData) -&gt; Unit = { }, onEditAccount: (Account, Double) -&gt; Unit = { _, _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:OnboardingCategories.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.OnboardingCategories( suggestions: List&lt;CreateCategoryData&gt;, categories: List&lt;Category&gt;, onCreateCategory: (CreateCategoryData) -&gt; Unit = { }, onEditCategory: (Category) -&gt; Unit = { _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Categories()</ID>
    <ID>LongMethod:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Premium()</ID>
    <ID>LongMethod:OnboardingPrivacyTC.kt$@Composable private fun SwipeToAgree( swipeToAgreeText: String, agreedText: String, onAgreed: (Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingSetCurrency.kt$@Composable fun BoxWithConstraintsScope.OnboardingSetCurrency( preselectedCurrency: IvyCurrency, onSetCurrency: (IvyCurrency) -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingSetName.kt$@Composable fun OnboardingSetName( onNameSet: (String) -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingSplashLogin.kt$@Composable fun BoxWithConstraintsScope.OnboardingSplashLogin( onboardingState: OnboardingState, opGoogleSignIn: OpResult&lt;Unit&gt;?, onLoginWithGoogle: () -&gt; Unit, onSkip: () -&gt; Unit, )</ID>
    <ID>LongMethod:OnboardingType.kt$@Composable fun OnboardingType( onStartImport: () -&gt; Unit, onStartFresh: () -&gt; Unit, )</ID>
    <ID>LongMethod:ParseFields.kt$private fun possibleDateFormats(metadata: DateMetadata): List&lt;String&gt;</ID>
    <ID>LongMethod:PaywallScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, paywallReason: PaywallReason?, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, budgets: List&lt;Budget&gt;, loans: List&lt;Loan&gt;, onPlanSelected: (Plan?) -&gt; Unit = {}, onBuy: (Plan) -&gt; Unit, )</ID>
    <ID>LongMethod:PeriodSelector.kt$@Composable fun PeriodSelector( modifier: Modifier = Modifier, period: TimePeriod, onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onShowChoosePeriodModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:PieChartAct.kt$PieChartAct$override suspend fun Input.compose(): suspend () -&gt; Output</ID>
    <ID>LongMethod:PieChartStatisticScreen.kt$@Composable private fun CategoryAmountCard( categoryAmount: CategoryAmount, currency: String, totalAmount: Double, selectedCategory: SelectedCategory?, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:PieChartStatisticScreen.kt$@Composable private fun Header( transactionType: TransactionType, period: TimePeriod, percentExpanded: Float, currency: String, amount: Double, showCloseButtonOnly: Boolean = false, onShowMonthModal: () -&gt; Unit, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, onClose: () -&gt; Unit, onAdd: (TransactionType) -&gt; Unit, )</ID>
    <ID>LongMethod:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: PieChartStatisticState = PieChartStatisticState(), onEventHandler: (PieChartStatisticEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:PlannedPaymentCard.kt$@Composable private fun PlannedPaymentHeaderRow( plannedPayment: PlannedPaymentRule, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt; )</ID>
    <ID>LongMethod:PlannedPaymentsLazyColumn.kt$private fun LazyListScope.plannedPaymentItems( nav: Navigation, currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, listState: LazyListState, oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, oneTimeExpanded: Boolean, setOneTimeExpanded: (Boolean) -&gt; Unit, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double, recurringExpanded: Boolean, setRecurringExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:PlansSheet.kt$@Composable fun BoxWithConstraintsScope.PlansSheet( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, onPlansSheetHeightChanged: (Int) -&gt; Unit = {}, onPlanSelected: (Plan?) -&gt; Unit, onBuy: (Plan) -&gt; Unit )</ID>
    <ID>LongMethod:PlansSheet.kt$@Composable private fun ColumnScope.PlanCard( plan: Plan, purchased: Boolean, selectedPlan: Plan?, monthlyPlan: Plan?, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:PreloadDataLogic.kt$PreloadDataLogic$fun categorySuggestions(): List&lt;CreateCategoryData&gt;</ID>
    <ID>LongMethod:RecurringRuleModal.kt$@Composable fun BoxWithConstraintsScope.RecurringRuleModal( modal: RecurringRuleModalData?, dismiss: () -&gt; Unit, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, )</ID>
    <ID>LongMethod:ReorderModal.kt$@Composable fun &lt;T : Reorderable&gt; BoxScope.ReorderModal( visible: Boolean, id: UUID = UUID.randomUUID(), TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }, initialItems: List&lt;Any&gt;, dismiss: () -&gt; Unit, onUpdateItemOrderNum: ( itemsInNewOrder: List&lt;Any&gt;, item: T, newOrderNum: Double ) -&gt; Unit = { _, _, _ -&gt; }, onReordered: ((List&lt;Any&gt;) -&gt; Unit)? = null, ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit )</ID>
    <ID>LongMethod:ReportScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: ReportScreenState = ReportScreenState(), onEventHandler: (ReportScreenEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ReportViewModel.kt$ReportViewModel$private suspend fun filterTransactions( baseCurrency: String, accounts: List&lt;Account&gt;, filter: ReportFilter, ): List&lt;Transaction&gt;</ID>
    <ID>LongMethod:ReportViewModel.kt$ReportViewModel$private suspend fun setFilter(filter: ReportFilter?)</ID>
    <ID>LongMethod:SearchScreen.kt$@Composable private fun UI( transactions: List&lt;TransactionHistoryItem&gt;, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onSearch: (String) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ServerStopScreen.kt$@Composable private fun Content( onBackup: () -&gt; Unit )</ID>
    <ID>LongMethod:SettingsScreen.kt$@Composable private fun AccountCardUser( localName: String?, user: User, opSync: OpResult&lt;Boolean&gt;?, onSync: () -&gt; Unit, )</ID>
    <ID>LongMethod:SettingsScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( user: User?, currencyCode: String, opSync: OpResult&lt;Boolean&gt;?, lockApp: Boolean, showNotifications: Boolean = true, hideCurrentBalance: Boolean = false, progressState: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, nameLocalAccount: String?, startDateOfMonth: Int = 1, onSetCurrency: (String) -&gt; Unit, onSetName: (String) -&gt; Unit = {}, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onBackupData: () -&gt; Unit = {}, onExportToCSV: () -&gt; Unit = {}, onSetLockApp: (Boolean) -&gt; Unit = {}, onSetShowNotifications: (Boolean) -&gt; Unit = {}, onSetTreatTransfersAsIncExp: (Boolean) -&gt; Unit = {}, onSetHideCurrentBalance: (Boolean) -&gt; Unit = {}, onSetStartDateOfMonth: (Int) -&gt; Unit = {}, onDeleteAllUserData: () -&gt; Unit = {}, onDeleteCloudUserData: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:TransactionCard.kt$@Composable fun TransactionCard( baseData: AppBaseData, transaction: Transaction, onPayOrGet: (Transaction) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onClick: (Transaction) -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionCard.kt$@Composable fun TypeAmountCurrency( transactionType: TransactionType, dueDate: LocalDateTime?, currency: String, amount: Double )</ID>
    <ID>LongMethod:ViewPager.kt$@Composable fun Pager( state: PagerState, modifier: Modifier = Modifier, pageContent: @Composable PagerScope.() -&gt; Unit )</ID>
    <ID>LongMethod:WalletBalanceWidgetContent.kt$@Composable fun IncomeExpenseSection( income: String, expense: String, currency: String )</ID>
    <ID>LongParameterList:AccountModal.kt$( account: Account?, nameTextFieldValue: TextFieldValue, currency: String, color: Color, icon: String?, amount: Double, includeInBalance: Boolean, onCreateAccount: (CreateAccountData) -&gt; Unit, onEditAccount: (Account, balance: Double) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:AccountsViewModel.kt$AccountsViewModel$( private val walletDAOs: WalletDAOs, private val accountDao: AccountDao, private val settingsDao: SettingsDao, private val accountSync: AccountSync, private val accountCreator: AccountCreator, private val ivyContext: IvyWalletCtx, private val sharedPrefs: SharedPrefs, private val accountsAct: AccountsAct, private val calcWalletBalanceAct: CalcWalletBalanceAct, private val baseCurrencyAct: BaseCurrencyAct, private val accountDataAct: AccountDataAct )</ID>
    <ID>LongParameterList:AmountModal.kt$( forCalculator: Boolean, ZeroRow: (@Composable RowScope.() -&gt; Unit)? = null, FirstRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, SecondRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, ThirdRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, FourthRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, onNumberPressed: (String) -&gt; Unit, onDecimalPoint: () -&gt; Unit, onBackspace: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AmountModal.kt$( id: UUID, visible: Boolean, currency: String, initialAmount: Double?, decimalCountMax: Int = 2, Header: (@Composable () -&gt; Unit)? = null, amountSpacerTop: Dp = 64.dp, dismiss: () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnalyticsReportScreen.kt$( selectedTab: AnalyticsTab, onboardingReport: OnboardingReport, kpis: KPIs, health: Health, userStats: UserStats, setSelectedTab: (AnalyticsTab) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnalyticsReportScreen.kt$( selectedTab: AnalyticsTab, startDate: LocalDateTime?, endDate: LocalDateTime?, onboardingReport: OnboardingReport?, kpis: KPIs?, health: Health?, userStats: UserStats?, loading: Boolean, onRefresh: () -&gt; Unit = {}, onSetStartDate: (LocalDateTime?) -&gt; Unit = {}, onSetEndDate: (LocalDateTime?) -&gt; Unit = {}, onSelectTab: (AnalyticsTab) -&gt; Unit = {}, onNukeTestEvents: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:AppModuleDI.kt$AppModuleDI$( accountSync: AccountSync, categorySync: CategorySync, transactionSync: TransactionSync, plannedPaymentSync: PlannedPaymentSync, budgetSync: BudgetSync, loanSync: LoanSync, loanRecordSync: LoanRecordSync, ivySession: IvySession )</ID>
    <ID>LongParameterList:AppModuleDI.kt$AppModuleDI$( categoryDao: CategoryDao, transactionUploader: TransactionUploader, transactionDao: TransactionDao, ivyContext: IvyWalletCtx, loanDao: LoanDao, loanRecordDao: LoanRecordDao, exchangeRatesLogic: ExchangeRatesLogic, settingsDao: SettingsDao, accountDao: AccountDao )</ID>
    <ID>LongParameterList:AppModuleDI.kt$AppModuleDI$( ivyBilling: IvyBilling, ivyContext: IvyWalletCtx, navigation: Navigation, accountDao: AccountDao, categoryDao: CategoryDao, budgetDao: BudgetDao, loanDao: LoanDao )</ID>
    <ID>LongParameterList:AppModuleDI.kt$AppModuleDI$( plannedPaymentRuleDao: PlannedPaymentRuleDao, transactionDao: TransactionDao, transactionUploader: TransactionUploader, exchangeRatesLogic: ExchangeRatesLogic, accountDao: AccountDao, settingsDao: SettingsDao, plannedPaymentRuleUploader: PlannedPaymentRuleUploader )</ID>
    <ID>LongParameterList:BackupLogic.kt$BackupLogic$( private val accountDao: AccountDao, private val budgetDao: BudgetDao, private val categoryDao: CategoryDao, private val loanRecordDao: LoanRecordDao, private val loanDao: LoanDao, private val plannedPaymentRuleDao: PlannedPaymentRuleDao, private val settingsDao: SettingsDao, private val transactionDao: TransactionDao, private val sharedPrefs: SharedPrefs, @ApplicationContext private val context: Context, )</ID>
    <ID>LongParameterList:BalanceRow.kt$( modifier: Modifier = Modifier, currency: String, balance: Double, hiddenMode: Boolean = false, textColor: Color = UI.colors.pureInverse, decimalPaddingTop: Dp = 12.dp, spacerCurrency: Dp = 12.dp, spacerDecimal: Dp = 8.dp, currencyFontSize: TextUnit? = null, integerFontSize: TextUnit? = null, decimalFontSize: TextUnit? = null, currencyUpfront: Boolean = true, balanceAmountPrefix: String? = null, shortenBigNumbers: Boolean = false, )</ID>
    <ID>LongParameterList:BalanceRow.kt$( modifier: Modifier = Modifier, textColor: Color = UI.colors.pureInverse, currency: String, balance: Double, balanceAmountPrefix: String? = null, currencyUpfront: Boolean = true, shortenBigNumbers: Boolean = false, hiddenMode: Boolean = false, )</ID>
    <ID>LongParameterList:BalanceScreen.kt$( period: TimePeriod, baseCurrencyCode: String, currentBalance: Double, plannedPaymentsAmount: Double, balanceAfterPlannedPayments: Double, onSetPeriod: (TimePeriod) -&gt; Unit = {}, onPreviousMonth: () -&gt; Unit = {}, onNextMonth: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:BudgetBattery.kt$( modifier: Modifier = Modifier, currency: String, expenses: Double, budget: Double, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:BudgetScreen.kt$( timeRange: FromToTimeRange?, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, displayBudgets: List&lt;DisplayBudget&gt;, appBudgetMax: Double, categoryBudgetsTotal: Double, onCreateBudget: (CreateBudgetData) -&gt; Unit = {}, onEditBudget: (Budget) -&gt; Unit = {}, onDeleteBudget: (Budget) -&gt; Unit = {}, onReorder: (List&lt;DisplayBudget&gt;) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:BudgetViewModel.kt$BudgetViewModel$( private val sharedPrefs: SharedPrefs, private val settingsDao: SettingsDao, private val budgetDao: BudgetDao, private val categoryDao: CategoryDao, private val accountDao: AccountDao, private val budgetCreator: BudgetCreator, private val budgetSync: BudgetSync, private val ivyContext: IvyWalletCtx, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val budgetsAct: BudgetsAct, private val baseCurrencyAct: BaseCurrencyAct, private val historyTrnsAct: HistoryTrnsAct, private val exchangeAct: ExchangeAct )</ID>
    <ID>LongParameterList:BufferBattery.kt$( modifier: Modifier = Modifier, buffer: Double, balance: Double, currency: String, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:ButtonWithIcon.kt$( modifier: Modifier = Modifier, text: String, mode: Mode = Mode.WRAP_CONTENT, background: Background = Background.Solid( color = UI.colors.primary, shape = UI.shapes.rFull, padding = padding( horizontal = 24.dp, vertical = 12.dp ) ), textStyle: TextStyle = UI.typo.b1.style( color = White, textAlign = TextAlign.Center ), @DrawableRes iconLeft: Int? = null, @DrawableRes iconRight: Int? = null, iconTint: Color = White, iconPadding: Dp = 12.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:CSVImporter.kt$CSVImporter$( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, )</ID>
    <ID>LongParameterList:CSVImporterV2.kt$CSVImporterV2$( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, )</ID>
    <ID>LongParameterList:CalculatorModal.kt$( id: UUID = UUID.randomUUID(), initialAmount: Double?, visible: Boolean, currency: String, dismiss: () -&gt; Unit, onCalculation: (Double) -&gt; Unit )</ID>
    <ID>LongParameterList:CategoriesScreen.kt$( modifier: Modifier = Modifier, textColor: Color = UI.colors.pureInverse, dividerColor: Color = UI.colors.medium, monthlyIncome: Double, monthlyExpenses: Double, currency: String, center: Boolean = true, dividerSpacer: Dp? = null, )</ID>
    <ID>LongParameterList:CategoriesScreen.kt$( text: String, @DrawableRes icon: Int, selected: Boolean, selectedGradient: Gradient = GradientGreen, textSelectedColor: Color = White, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:CategoriesScreen.kt$( title: String = stringResource(R.string.sort_by), items: List&lt;SortOrder&gt;, visible: Boolean, initialType: SortOrder, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onSortOrderChanged: (SortOrder) -&gt; Unit )</ID>
    <ID>LongParameterList:CategoriesViewModel.kt$CategoriesViewModel$( private val categoryDao: CategoryDao, private val categorySync: CategorySync, private val categoryCreator: CategoryCreator, private val categoriesAct: CategoriesAct, private val ivyContext: IvyWalletCtx, private val sharedPrefs: SharedPrefs, private val baseCurrencyAct: BaseCurrencyAct, private val accountsAct: AccountsAct, private val trnsWithRangeAndAccFiltersAct: TrnsWithRangeAndAccFiltersAct, private val categoryIncomeWithAccountFiltersAct: CategoryIncomeWithAccountFiltersAct )</ID>
    <ID>LongParameterList:CategoryCharts.kt$( period: ChartPeriod, baseCurrencyCode: String, categories: List&lt;Category&gt;, categoryExpenseValues: List&lt;CategoryValues&gt; = emptyList(), categoryExpenseCount: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeValues: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeCount: List&lt;CategoryValues&gt; = emptyList(), onLoadCategory: (Category) -&gt; Unit, onRemoveCategory: (Category) -&gt; Unit )</ID>
    <ID>LongParameterList:CategoryCharts.kt$( period: ChartPeriod, title: String, titleColor: Color = UI.colors.pureInverse, baseCurrencyCode: String, categoryValues: List&lt;CategoryValues&gt;, countChart: Boolean, )</ID>
    <ID>LongParameterList:CategoryModal.kt$( hint: String, @DrawableRes defaultIcon: Int, color: Color, icon: String?, autoFocusKeyboard: Boolean, nameTextFieldValue: TextFieldValue, setNameTextFieldValue: (TextFieldValue) -&gt; Unit, showChooseIconModal: () -&gt; Unit )</ID>
    <ID>LongParameterList:ChangeTransactionTypeModal.kt$( title: String = stringResource(R.string.set_transaction_type), visible: Boolean, includeTransferType: Boolean, initialType: TransactionType, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onTransactionTypeChanged: (TransactionType) -&gt; Unit )</ID>
    <ID>LongParameterList:ChartsScreen.kt$( period: ChartPeriod, baseCurrencyCode: String, balanceChart: List&lt;SingleChartPoint&gt; = emptyList(), incomeExpenseChart: List&lt;IncomeExpenseChartPoint&gt; = emptyList(), categories: List&lt;Category&gt; = emptyList(), categoryExpenseValues: List&lt;CategoryValues&gt; = emptyList(), categoryExpenseCount: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeValues: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeCount: List&lt;CategoryValues&gt; = emptyList(), onLoadCategory: (Category) -&gt; Unit = {}, onRemoveCategory: (Category) -&gt; Unit = {}, onChangePeriod: (ChartPeriod) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:ChooseCategoryModal.kt$( id: UUID = UUID.randomUUID(), visible: Boolean, initialCategory: Category?, categories: List&lt;Category&gt;, showCategoryModal: (Category?) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:ChooseIconModal.kt$( icons: List&lt;Any&gt;, rowAcc: List&lt;String&gt; = emptyList(), iconsPerRow: Int, selectedIcon: String?, color: Color, onIconSelected: (String) -&gt; Unit )</ID>
    <ID>LongParameterList:ChooseIconModal.kt$( visible: Boolean, initialIcon: String?, color: Color, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onIconChosen: (String?) -&gt; Unit )</ID>
    <ID>LongParameterList:CircleButtons.kt$( modifier: Modifier = Modifier, @DrawableRes icon: Int, contentDescription: String = "icon", backgroundColor: Color = UI.colors.medium, tint: Color? = UI.colors.pureInverse, clickAreaPadding: Dp = 8.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:CircleButtons.kt$( modifier: Modifier = Modifier, @DrawableRes icon: Int, contentDescription: String = "icon", backgroundColor: Color = UI.colors.pure, borderColor: Color = UI.colors.medium, tint: Color? = UI.colors.pureInverse, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:CircleButtons.kt$( modifier: Modifier = Modifier, @DrawableRes icon: Int, contentDescription: String = "icon", iconPadding: Dp = 8.dp, backgroundGradient: Gradient = Gradient.solid(UI.colors.medium), tint: Color? = UI.colors.pureInverse, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ColumnRoot.kt$( modifier: Modifier = Modifier, statusBarPadding: Boolean = true, navigationBarsPadding: Boolean = true, verticalArrangement: Arrangement.Vertical = Arrangement.Top, horizontalAlignment: Alignment.Horizontal = Alignment.Start, Content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>LongParameterList:ComposeExt.kt$( color: Color, alpha: Float = 0.15f, borderRadius: Dp = 0.dp, shadowRadius: Dp = 16.dp, offsetX: Dp = 0.dp, offsetY: Dp = 8.dp )</ID>
    <ID>LongParameterList:CurrencyModal.kt$( title: String, initialCurrency: IvyCurrency?, visible: Boolean, dismiss: () -&gt; Unit, id: UUID = UUID.randomUUID(), onSetCurrency: (String) -&gt; Unit )</ID>
    <ID>LongParameterList:CurrencyPicker.kt$( modifier: Modifier = Modifier, initialSelectedCurrency: IvyCurrency?, preselectedCurrency: IvyCurrency = IvyCurrency.getDefault(), includeKeyboardShownInsetSpacer: Boolean, lastItemSpacer: Dp = 0.dp, onKeyboardShown: (keyboardVisible: Boolean) -&gt; Unit = {}, onSelectedCurrencyChanged: (IvyCurrency) -&gt; Unit )</ID>
    <ID>LongParameterList:CustomExchangeRateCard.kt$( modifier: Modifier = Modifier, title: String = stringResource(R.string.exchange_rate), fromCurrencyCode: String, toCurrencyCode: String, exchangeRate: Double, onRefresh: () -&gt; Unit = {}, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:DeleteModal.kt$( id: UUID = UUID.randomUUID(), title: String, description: String, visible: Boolean, buttonText: String = stringResource(R.string.delete), iconStart: Int = R.drawable.ic_delete, dismiss: () -&gt; Unit, onDelete: () -&gt; Unit, )</ID>
    <ID>LongParameterList:DetektConfigurationAccessors.kt$( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null )</ID>
    <ID>LongParameterList:DetektPluginsConfigurationAccessors.kt$( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( initialTransactionId: UUID?, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, amount: Double, currency: String, convertedAmount: Double? = null, convertedAmountCurrencyCode: String? = null, amountModalShown: Boolean, setAmountModalShown: (Boolean) -&gt; Unit, ActionButton: @Composable () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( keyboardShown: Boolean, keyboardShownInsetDp: Dp, setBottomBarHeight: (Int) -&gt; Unit, expanded: Boolean, internalExpanded: Boolean, setInternalExpanded: (Boolean) -&gt; Unit, navBarPadding: Dp, ActionButton: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( modifier: Modifier = Modifier, accounts: List&lt;Account&gt;, selectedAccount: Account?, childrenTestTag: String? = null, onSelectedAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( percentExpanded: Float, label: String, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit, )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( type: TransactionType, amount: Double, currency: String, percentExpanded: Float, label: String, account: Account?, showConvertedAmountText: String? = null, onShowAmountModal: () -&gt; Unit, onAccountMiniClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:EditPlannedScreen.kt$( screen: EditPlanned, startDate: LocalDateTime?, intervalN: Int?, intervalType: IntervalType?, oneTime: Boolean, type: TransactionType, currency: String, initialTitle: String?, description: String?, category: Category?, account: Account?, amount: Double, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onSave: () -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:EditPlannedViewModel.kt$EditPlannedViewModel$( private val transactionDao: TransactionDao, private val accountDao: AccountDao, private val categoryDao: CategoryDao, private val settingsDao: SettingsDao, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val transactionSync: TransactionSync, private val plannedPaymentRuleDao: PlannedPaymentRuleDao, private val plannedPaymentRuleUploader: PlannedPaymentRuleUploader, private val plannedPaymentsGenerator: PlannedPaymentsGenerator, private val categoryCreator: CategoryCreator, private val accountCreator: AccountCreator, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct )</ID>
    <ID>LongParameterList:EditTransactionScreen.kt$( screen: EditTransaction, transactionType: TransactionType, baseCurrency: String, initialTitle: String?, titleSuggestions: Set&lt;String&gt;, description: String?, category: Category?, dateTime: LocalDateTime?, account: Account?, toAccount: Account?, dueDate: LocalDateTime?, amount: Double, loanData: EditTransactionDisplayLoan = EditTransactionDisplayLoan(), backgroundProcessing: Boolean = false, customExchangeRateState: CustomExchangeRateState, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, hasChanges: Boolean = false, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onDueDateChanged: (LocalDateTime?) -&gt; Unit, onSetDateTime: (LocalDateTime) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onPayPlannedPayment: () -&gt; Unit, onSave: (closeScreen: Boolean) -&gt; Unit, onSetHasChanges: (hasChanges: Boolean) -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, onExchangeRateChanged: (Double?) -&gt; Unit = { } )</ID>
    <ID>LongParameterList:EditTransactionViewModel.kt$EditTransactionViewModel$( private val loanDao: LoanDao, private val transactionDao: TransactionDao, private val accountDao: AccountDao, private val categoryDao: CategoryDao, private val settingsDao: SettingsDao, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val transactionUploader: TransactionUploader, private val sharedPrefs: SharedPrefs, private val exchangeRatesLogic: ExchangeRatesLogic, private val categoryCreator: CategoryCreator, private val accountCreator: AccountCreator, private val paywallLogic: PaywallLogic, private val plannedPaymentsLogic: PlannedPaymentsLogic, private val smartTitleSuggestionsLogic: SmartTitleSuggestionsLogic, private val loanTransactionsLogic: LoanTransactionsLogic, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val trnByIdAct: TrnByIdAct, private val categoryByIdAct: CategoryByIdAct, private val accountByIdAct: AccountByIdAct )</ID>
    <ID>LongParameterList:FilterOverlay.kt$( visible: Boolean, baseCurrency: String, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, filter: ReportFilter?, onClose: () -&gt; Unit, onSetFilter: (ReportFilter?) -&gt; Unit )</ID>
    <ID>LongParameterList:HomeHeader.kt$( @DrawableRes icon: Int, backgroundGradient: Gradient, percentVisible: Float, textColor: Color, label: String, currency: String, amount: Double, testTag: String, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:HomeHeader.kt$( expanded: Boolean, name: String, period: TimePeriod, currency: String, balance: Double, bufferDiff: Double, hideCurrentBalance: Boolean = false, onShowMonthModal: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, )</ID>
    <ID>LongParameterList:HomeHeader.kt$( percentExpanded: Float = 1f, period: TimePeriod, currency: String, balance: Double, bufferDiff: Double, monthlyIncome: Double, monthlyExpenses: Double, hideCurrentBalance: Boolean, onOpenMoreMenu: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:HomeHeader.kt$( percentExpanded: Float, name: String, period: TimePeriod, currency: String, balance: Double, hideCurrentBalance: Boolean = false, onShowMonthModal: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, )</ID>
    <ID>LongParameterList:HomeMoreMenu.kt$( @DrawableRes icon: Int, label: String, backgroundColor: Color = UI.colors.pure, tint: Color = UI.colors.pureInverse, expandPadding: Dp = 14.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:HomeMoreMenu.kt$( balance: Double, buffer: Double, currency: String, theme: Theme, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:HomeMoreMenu.kt$( expanded: Boolean, balance: Double, buffer: Double, currency: String, theme: Theme, setExpanded: (Boolean) -&gt; Unit, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:HomeTab.kt$( hideBalanceRowState: MutableState&lt;Boolean&gt;, listState: LazyListState, buffer: BufferInfo, hideCurrentBalance: Boolean, period: TimePeriod, baseData: AppBaseData, upcoming: DueSection, overdue: DueSection, balance: BigDecimal, stats: IncomeExpensePair, history: List&lt;TransactionHistoryItem&gt;, customerJourneyCards: List&lt;CustomerJourneyCardData&gt;, setUpcomingExpanded: (Boolean) -&gt; Unit, setOverdueExpanded: (Boolean) -&gt; Unit, onOpenMoreMenu: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onPayOrGet: (Transaction) -&gt; Unit, onDismiss: (CustomerJourneyCardData) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:HomeViewModel.kt$HomeViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val exchangeRatesLogic: ExchangeRatesLogic, private val plannedPaymentsLogic: PlannedPaymentsLogic, private val customerJourneyLogic: CustomerJourneyLogic, private val historyWithDateDivsAct: HistoryWithDateDivsAct, private val calcIncomeExpenseAct: CalcIncomeExpenseAct, private val calcWalletBalanceAct: CalcWalletBalanceAct, private val settingsAct: SettingsAct, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val calcBufferDiffAct: CalcBufferDiffAct, private val upcomingAct: UpcomingAct, private val overdueAct: OverdueAct, private val hasTrnsAct: HasTrnsAct, private val startDayOfMonthAct: StartDayOfMonthAct, private val shouldHideBalanceAct: ShouldHideBalanceAct, private val updateSettingsAct: UpdateSettingsAct, private val updateAccCacheAct: UpdateAccCacheAct, private val updateCategoriesCacheAct: UpdateCategoriesCacheAct, private val syncExchangeRatesAct: SyncExchangeRatesAct, )</ID>
    <ID>LongParameterList:ImportScreen.kt$( screen: Import, importStep: ImportStep, importType: ImportType?, importProgressPercent: Int, importResult: ImportResult?, onChooseImportType: (ImportType) -&gt; Unit = {}, onUploadCSVFile: () -&gt; Unit = {}, onSkip: () -&gt; Unit = {}, onFinish: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:ImportViewModel.kt$ImportViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val fileReader: IvyFileReader, private val csvNormalizer: CSVNormalizer, private val csvMapper: CSVMapper, private val csvImporter: CSVImporter, private val backupLogic: BackupLogic )</ID>
    <ID>LongParameterList:IncomeExpensesRow.kt$( modifier: Modifier = Modifier, textColor: Color = UI.colors.pureInverse, dividerColor: Color = UI.colors.medium, incomeLabel: String = stringResource(R.string.income_uppercase), income: Double, expensesLabel: String = stringResource(R.string.expenses_uppercase), expenses: Double, currency: String, center: Boolean = true, dividerSpacer: Dp? = null, )</ID>
    <ID>LongParameterList:InputField.kt$( modifier: Modifier = Modifier, initialText: String = "", hint: String = "", textStyle: TextStyle = UI.typo.b1.style( color = UI.colors.pureInverse, textAlign = TextAlign.Start ), hintStyle: TextStyle = UI.typo.b1.style( color = Color.Gray, textAlign = TextAlign.Start ), inputType: IvyInputType = IvyInputType.SHORT_TEXT, imeAction: IvyImeAction = IvyImeAction.DONE, onImeActionListener: ((EditText) -&gt; Unit)? = null, cursorColor: Color = UI.colors.pureInverse, highlightColor: Color = if (UI.colors.isLight) Purple1Light else Purple1Dark, focus: InputFieldFocus? = null, onTextChanged: (String) -&gt; Unit )</ID>
    <ID>LongParameterList:ItemIcon.kt$( modifier: Modifier = Modifier, iconName: String?, size: String, tint: Color = UI.colors.pureInverse, iconContentScale: ContentScale? = null, Default: (@Composable () -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( history: List&lt;TransactionHistoryItem&gt;, currency: String, baseCurrency: String, itemColor: Color, account: Account?, category: Category?, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, treatTransfersAsIncomeExpense: Boolean = false, onEdit: () -&gt; Unit, onDelete: () -&gt; Unit, onBalanceClick: () -&gt; Unit, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( history: List&lt;TransactionHistoryItem&gt;, currency: String, income: Double, expenses: Double, hasAddButtons: Boolean, itemColor: Color, incomeHeaderCardClicked: () -&gt; Unit = {}, expenseHeaderCardClicked: () -&gt; Unit = {}, onAddTransaction: (TransactionType) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( itemColor: Color, contrastColor: Color, account: Account?, category: Category?, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( period: TimePeriod, baseCurrency: String, currency: String, account: Account?, category: Category?, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, initWithTransactions: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, history: List&lt;TransactionHistoryItem&gt;, upcomingExpanded: Boolean = true, setUpcomingExpanded: (Boolean) -&gt; Unit = {}, upcomingIncome: Double = 0.0, upcomingExpenses: Double = 0.0, upcoming: List&lt;Transaction&gt; = emptyList(), overdueExpanded: Boolean = true, setOverdueExpanded: (Boolean) -&gt; Unit = {}, overdueIncome: Double = 0.0, overdueExpenses: Double = 0.0, overdue: List&lt;Transaction&gt; = emptyList(), onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onSetPeriod: (TimePeriod) -&gt; Unit, onEditAccount: (Account, Double) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onDelete: () -&gt; Unit, onPayOrGet: (Transaction) -&gt; Unit = {}, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( title: String, currencyCode: String, amount: Double, transactionCount: Int, isIncome: Boolean, addButtonText: String?, itemColor: Color, onHeaderCardClicked: () -&gt; Unit = {}, onAddClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ItemStatisticViewModel.kt$ItemStatisticViewModel$( private val walletDAOs: WalletDAOs, private val accountDao: AccountDao, private val exchangeRateDao: ExchangeRateDao, private val transactionDao: TransactionDao, private val categoryDao: CategoryDao, private val settingsDao: SettingsDao, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val categoryUploader: CategoryUploader, private val accountUploader: AccountUploader, private val accountLogic: WalletAccountLogic, private val categoryLogic: WalletCategoryLogic, private val plannedPaymentRuleDao: PlannedPaymentRuleDao, private val categoryCreator: CategoryCreator, private val accountCreator: AccountCreator, private val plannedPaymentsLogic: PlannedPaymentsLogic, private val exchangeRatesLogic: ExchangeRatesLogic, private val sharedPrefs: SharedPrefs, private val categoriesAct: CategoriesAct, private val accountsAct: AccountsAct, private val accTrnsAct: AccTrnsAct, private val trnsWithDateDivsAct: TrnsWithDateDivsAct, private val baseCurrencyAct: BaseCurrencyAct, private val calcAccBalanceAct: CalcAccBalanceAct, private val calcAccIncomeExpenseAct: CalcAccIncomeExpenseAct, private val calcTrnsIncomeExpenseAct: CalcTrnsIncomeExpenseAct, private val exchangeAct: ExchangeAct )</ID>
    <ID>LongParameterList:IvyBasicTextField.kt$( modifier: Modifier = Modifier, value: TextFieldValue, textColor: Color = UI.colors.pureInverse, hint: String?, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions( autoCorrect = true, keyboardType = KeyboardType.Text, imeAction = ImeAction.Done, capitalization = KeyboardCapitalization.Sentences ), keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongParameterList:IvyBorderButton.kt$( modifier: Modifier = Modifier, text: String, textStyle: TextStyle = UI.typo.b2.style( color = UI.colors.pureInverse, fontWeight = FontWeight.Bold ), backgroundGradient: Gradient = Gradient.solid(UI.colors.mediumInverse), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = UI.colors.pureInverse, enabled: Boolean = true, wrapContentMode: Boolean = true, padding: Dp = 12.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:IvyButton.kt$( modifier: Modifier = Modifier, text: String, backgroundGradient: Gradient = GradientIvy, textStyle: TextStyle = UI.typo.b2.style( color = White, fontWeight = FontWeight.Bold ), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = White, enabled: Boolean = true, shadowAlpha: Float = 0.15f, wrapContentMode: Boolean = true, hasGlow: Boolean = true, padding: Dp = 12.dp, iconEdgePadding: Dp = 12.dp, iconTextPadding: Dp = 4.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:IvyChecklistTextField.kt$( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, value: TextFieldValue, hint: String?, readOnly: Boolean = false, fontWeight: FontWeight = FontWeight.Medium, hintFontWeight: FontWeight = FontWeight.Medium, textColor: Color = UI.colors.pureInverse, hintColor: Color = UI.colors.mediumInverse, textAlign: TextAlign = TextAlign.Start, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = KeyboardOptions.Default, keyboardActions: KeyboardActions? = KeyboardActions.Default, paddingVertical: Dp = 16.dp, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongParameterList:IvyCircleButton.kt$( modifier: Modifier = Modifier, backgroundPadding: Dp = 0.dp, backgroundGradient: Gradient = GradientIvy, horizontalGradient: Boolean = true, @DrawableRes icon: Int, tint: Color = White, enabled: Boolean = true, hasShadow: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:IvyDescriptionTextField.kt$( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, testTag: String = "desc_input", value: TextFieldValue, hint: String?, fontWeight: FontWeight = FontWeight.Medium, textColor: Color = UI.colors.pureInverse, hintColor: Color = UI.colors.mediumInverse, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = KeyboardOptions.Default, keyboardActions: KeyboardActions? = KeyboardActions.Default, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongParameterList:IvyIcon.kt$( modifier: Modifier = Modifier, @DrawableRes icon: Int, tint: Color = UI.colors.pureInverse, iconScale: IconScale, padding: Dp = when (iconScale) { IconScale.S -&gt; 4.dp IconScale.M -&gt; 4.dp IconScale.L -&gt; 4.dp }, contentDescription: String = "icon" )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( cellSize: Float, offsetLeft: Float, offsetRight: Float, lineDistance: Float, chartHeight: Float, allValues: List&lt;Value&gt;, xLabel: (x: Double) -&gt; String, textColor: Color )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( chartWidth: Float, lineDistance: Float, chartHeight: Float, offsetLeft: Float = 0f, offsetTop: Float = 0f, offsetBottom: Float = 0f, cellSize: Float, maxY: Double, minY: Double, functions: List&lt;Function&gt;, )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( function: Function, functionIndex: Int, minY: Double, maxY: Double, chartHeight: Float, cellSize: Float, lineDistance: Float, lineWidth: Float, offsetLeft: Float, offsetTop: Float, offsetBottom: Float, )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( functions: List&lt;Function&gt;, tapEvent: TapEvent?, chartWidth: Float, chartHeight: Float, minY: Double, maxY: Double )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( max: Double, min: Double, value: Double, chartHeight: Float, offsetTop: Float, offsetBottom: Float )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( minY: Double, maxY: Double, offsetTop: Float, chartHeight: Float, offsetBottom: Float, yLabel: (y: Double) -&gt; String, cellSize: Float )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( modifier: Modifier = Modifier, height: Dp = 300.dp, functions: List&lt;Function&gt;, title: String, xLabel: (x: Double) -&gt; String, yLabel: (y: Double) -&gt; String, onTap: (TapEvent) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( modifier: Modifier, title: String, allValues: List&lt;Value&gt;, xLabel: (x: Double) -&gt; String, yLabel: (y: Double) -&gt; String, maxY: Double, minY: Double, functions: List&lt;Function&gt;, tapEvent: TapEvent?, onTap: (TapEvent) -&gt; Unit )</ID>
    <ID>LongParameterList:IvyModal.kt$( id: UUID?, visible: Boolean, dismiss: () -&gt; Unit, SecondaryActions: (@Composable () -&gt; Unit)? = null, PrimaryAction: @Composable () -&gt; Unit, scrollState: ScrollState? = rememberScrollState(), shiftIfKeyboardShown: Boolean = true, includeActionsRowPadding: Boolean = true, Content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>LongParameterList:IvyModal.kt$( visible: Boolean, modalPercentVisible: Float, keyboardShownInsetDp: Dp, navBarPadding: Dp, onHeightChanged: (Int) -&gt; Unit, onClose: () -&gt; Unit, SecondaryActions: (@Composable () -&gt; Unit)? = null, PrimaryAction: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:IvyModalComponents.kt$( initialEmpty: Boolean, initialChanged: Boolean, testTagSave: String = "tag_save", testTagDelete: String = "tag_delete", onDelete: () -&gt; Unit, dismiss: () -&gt; Unit, onSave: () -&gt; Unit )</ID>
    <ID>LongParameterList:IvyModalDomainComponents.kt$( label: String, currency: String, amount: Double, Header: (@Composable () -&gt; Unit)? = null, amountPaddingTop: Dp = 48.dp, amountPaddingBottom: Dp = 48.dp, showAmountModal: () -&gt; Unit, )</ID>
    <ID>LongParameterList:IvyNameTextFieldValue.kt$( modifier: Modifier = Modifier, underlineModifier: Modifier = Modifier, value: TextFieldValue, textColor: Color = UI.colors.pureInverse, hint: String?, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions( autoCorrect = true, keyboardType = KeyboardType.Text, imeAction = ImeAction.Done, capitalization = KeyboardCapitalization.Sentences ), keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongParameterList:IvyNumberTextField.kt$( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, value: TextFieldValue, hint: String?, fontWeight: FontWeight = FontWeight.ExtraBold, textColor: Color = UI.colors.pureInverse, hintColor: Color = Color.Gray, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = null, keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongParameterList:IvyOutlinedButton.kt$( modifier: Modifier = Modifier, text: String, @DrawableRes iconStart: Int?, solidBackground: Boolean = false, iconTint: Color = UI.colors.pureInverse, borderColor: Color = UI.colors.medium, textColor: Color = UI.colors.pureInverse, padding: Dp = 12.dp, onClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:IvyOutlinedButton.kt$( modifier: Modifier = Modifier, text: String, @DrawableRes iconStart: Int?, solidBackground: Boolean = false, iconTint: Color = UI.colors.pureInverse, borderColor: Color = UI.colors.medium, textColor: Color = UI.colors.pureInverse, padding: Dp = 16.dp, onClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:IvyOutlinedTextField.kt$( modifier: Modifier = Modifier, value: TextFieldValue, hint: String?, hintColor: Color = UI.colors.gray, backgroundColor: Color = UI.colors.primary, emptyBorderColor: Color = UI.colors.gray, textColor: Color = UI.colors.pureInverse, cursorColor: Color = UI.colors.pureInverse, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default, validateInput: (TextFieldValue) -&gt; Boolean = { it.text.isNotNullOrBlank() }, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongParameterList:IvySync.kt$IvySync$( private val accountSync: AccountSync, private val categorySync: CategorySync, private val budgetSync: BudgetSync, private val transactionSync: TransactionSync, private val plannedPaymentSync: PlannedPaymentSync, private val loanSync: LoanSync, private val loanRecordSync: LoanRecordSync, private val ivySession: IvySession )</ID>
    <ID>LongParameterList:IvyTitleTextField.kt$( modifier: Modifier = Modifier, dividerModifier: Modifier = Modifier, value: TextFieldValue, textColor: Color = UI.colors.pureInverse, hint: String?, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions( autoCorrect = true, keyboardType = KeyboardType.Text, imeAction = ImeAction.Done, capitalization = KeyboardCapitalization.Sentences ), keyboardActions: KeyboardActions? = null, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongParameterList:LoanDetailsScreen.kt$( baseCurrency: String, loan: Loan?, displayLoanRecords: List&lt;DisplayLoanRecord&gt; = emptyList(), amountPaid: Double, loanAmountPaid: Double = 0.0, accounts: List&lt;Account&gt; = emptyList(), selectedLoanAccount: Account? = null, createLoanTransaction: Boolean = false, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onEditLoan: (Loan, Boolean) -&gt; Unit = { _, _ -&gt; }, onCreateLoanRecord: (CreateLoanRecordData) -&gt; Unit = {}, onEditLoanRecord: (EditLoanRecordData) -&gt; Unit = {}, onDeleteLoanRecord: (LoanRecord) -&gt; Unit = {}, onDeleteLoan: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:LoanDetailsScreen.kt$( loan: Loan, baseCurrency: String, amountPaid: Double, loanAmountPaid: Double = 0.0, itemColor: Color, selectedLoanAccount: Account? = null, onAmountClick: () -&gt; Unit, onEditLoan: () -&gt; Unit, onDeleteLoan: () -&gt; Unit, onAddRecord: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanDetailsScreen.kt$( loan: Loan, baseCurrency: String, amountPaid: Double, loanAmountPaid: Double = 0.0, selectedLoanAccount: Account? = null, onAddRecord: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanDetailsScreen.kt$( loan: Loan, loanRecord: LoanRecord, baseCurrency: String, loanBaseCurrency: String = "", account: Account? = null, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanDetailsViewModel.kt$LoanDetailsViewModel$( private val loanDao: LoanDao, private val loanRecordDao: LoanRecordDao, private val loanCreator: LoanCreator, private val loanRecordCreator: LoanRecordCreator, private val settingsDao: SettingsDao, private val ivyContext: IvyWalletCtx, private val transactionDao: TransactionDao, private val accountDao: AccountDao, private val accountCreator: AccountCreator, private val loanTransactionsLogic: LoanTransactionsLogic, private val nav: Navigation, private val accountsAct: AccountsAct, private val loanByIdAct: LoanByIdAct )</ID>
    <ID>LongParameterList:LoanModal.kt$( accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, modal: LoanModalData?, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, onPerformCalculations: () -&gt; Unit = {}, dismiss: () -&gt; Unit, )</ID>
    <ID>LongParameterList:LoanModal.kt$( loan: Loan?, nameTextFieldValue: TextFieldValue, type: LoanType, color: Color, icon: String?, amount: Double, selectedAccount: Account? = null, createLoanTransaction: Boolean = false, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanModal.kt$( modifier: Modifier = Modifier, accounts: List&lt;Account&gt;, selectedAccount: Account?, childrenTestTag: String? = null, onSelectedAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanRecordModal.kt$( loanRecord: LoanRecord?, noteTextFieldValue: TextFieldValue, amount: Double, dateTime: LocalDateTime, loanRecordInterest: Boolean = false, createLoanRecordTransaction: Boolean = false, selectedAccount: Account? = null, reCalculateAmount: Boolean = false, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanRecordModal.kt$( modal: LoanRecordModalData?, accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, onDelete: (LoanRecord) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanRecordModal.kt$( modifier: Modifier = Modifier, accounts: List&lt;Account&gt;, selectedAccount: Account?, childrenTestTag: String? = null, onSelectedAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanTransactionsCore.kt$LoanTransactionsCore$( createTransaction: Boolean, loanRecordId: UUID? = null, loanId: UUID, amount: Double, loanType: LoanType, selectedAccountId: UUID?, title: String? = null, category: Category? = null, time: LocalDateTime? = null, isLoanRecord: Boolean = false, transaction: Transaction? = null, )</ID>
    <ID>LongParameterList:LoanTransactionsCore.kt$LoanTransactionsCore$( loanRecordId: UUID? = null, amount: Double, loanType: LoanType, loanId: UUID, selectedAccountId: UUID?, title: String? = null, categoryId: UUID? = null, time: LocalDateTime = timeNowUTC(), isLoanRecord: Boolean = false, transaction: Transaction? = null )</ID>
    <ID>LongParameterList:LoanTransactionsCore.kt$LoanTransactionsCore$( oldLoanRecordAccountId: UUID?, oldLonRecordConvertedAmount: Double?, oldLoanRecordAmount: Double, newLoanRecordAccountID: UUID?, newLoanRecordAmount: Double, loanAccountId: UUID?, accounts: List&lt;Account&gt;, reCalculateLoanAmount: Boolean = false, )</ID>
    <ID>LongParameterList:LoanTransactionsCore.kt$LoanTransactionsCore$( private val categoryDao: CategoryDao, private val transactionUploader: TransactionUploader, private val transactionDao: TransactionDao, private val ivyContext: IvyWalletCtx, private val loanRecordDao: LoanRecordDao, private val loanDao: LoanDao, private val settingsDao: SettingsDao, private val accountsDao: AccountDao, private val exchangeRatesLogic: ExchangeRatesLogic )</ID>
    <ID>LongParameterList:LoanViewModel.kt$LoanViewModel$( private val loanDao: LoanDao, private val loanRecordDao: LoanRecordDao, private val settingsDao: SettingsDao, private val loanSync: LoanSync, private val loanCreator: LoanCreator, private val sharedPrefs: SharedPrefs, private val accountDao: AccountDao, private val accountCreator: AccountCreator, private val loanTransactionsLogic: LoanTransactionsLogic, private val loansAct: LoansAct, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonCenterY: Float, clickAreaWidth: Int, onAddExpense: () -&gt; Unit )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonLeftX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddIncome: () -&gt; Unit )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonRightX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddTransfer: () -&gt; Unit )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( tab: MainTab, selectTab: (MainTab) -&gt; Unit, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, showAddAccountModal: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MainViewModel.kt$MainViewModel$( private val settingsDao: SettingsDao, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val ivySync: IvySync, private val exchangeRatesLogic: ExchangeRatesLogic, private val syncExchangeRatesAct: SyncExchangeRatesAct, private val accountCreator: AccountCreator, private val sharedPrefs: SharedPrefs, )</ID>
    <ID>LongParameterList:OnboardingAccounts.kt$( baseCurrency: String, suggestions: List&lt;CreateAccountData&gt;, accounts: List&lt;AccountBalance&gt;, onCreateAccount: (CreateAccountData) -&gt; Unit = { }, onEditAccount: (Account, Double) -&gt; Unit = { _, _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:OnboardingCategories.kt$( suggestions: List&lt;CreateCategoryData&gt;, categories: List&lt;Category&gt;, onCreateCategory: (CreateCategoryData) -&gt; Unit = { }, onEditCategory: (Category) -&gt; Unit = { _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:OnboardingComponents.kt$( modifier: Modifier = Modifier, text: String, textColor: Color, backgroundGradient: Gradient, @DrawableRes iconStart: Int? = null, hasNext: Boolean = false, enabled: Boolean = true, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:OnboardingRouter.kt$OnboardingRouter$( private val _opGoogleSignIn: MutableLiveData&lt;OpResult&lt;Unit&gt;?&gt;, private val _state: MutableLiveData&lt;OnboardingState&gt;, private val _accounts: MutableLiveData&lt;List&lt;AccountBalance&gt;&gt;, private val _accountSuggestions: MutableLiveData&lt;List&lt;CreateAccountData&gt;&gt;, private val _categories: MutableLiveData&lt;List&lt;Category&gt;&gt;, private val _categorySuggestions: MutableLiveData&lt;List&lt;CreateCategoryData&gt;&gt;, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val ivyAnalytics: IvyAnalytics, private val exchangeRatesLogic: ExchangeRatesLogic, private val accountDao: AccountDao, private val sharedPrefs: SharedPrefs, private val transactionReminderLogic: TransactionReminderLogic, private val ivySync: IvySync, private val preloadDataLogic: PreloadDataLogic, private val categoryDao: CategoryDao, private val logoutLogic: LogoutLogic, private val syncExchangeRatesAct: SyncExchangeRatesAct, )</ID>
    <ID>LongParameterList:OnboardingScreen.kt$( onboardingState: OnboardingState, currency: IvyCurrency, opGoogleSignIn: OpResult&lt;Unit&gt;?, accountSuggestions: List&lt;CreateAccountData&gt;, accounts: List&lt;AccountBalance&gt;, categorySuggestions: List&lt;CreateCategoryData&gt;, categories: List&lt;Category&gt;, onLoginWithGoogle: () -&gt; Unit = {}, onSkip: () -&gt; Unit = {}, onStartImport: () -&gt; Unit = {}, onStartFresh: () -&gt; Unit = {}, onSetCurrency: (IvyCurrency) -&gt; Unit = {}, onCreateAccount: (CreateAccountData) -&gt; Unit = { }, onEditAccount: (Account, Double) -&gt; Unit = { _, _ -&gt; }, onAddAccountsDone: () -&gt; Unit = {}, onAddAccountsSkip: () -&gt; Unit = {}, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onEditCategory: (Category) -&gt; Unit = {}, onAddCategoryDone: () -&gt; Unit = {}, onAddCategorySkip: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:OnboardingSplashLogin.kt$( @DrawableRes icon: Int, text: String, textColor: Color, backgroundGradient: Gradient, hasShadow: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:OnboardingViewModel.kt$OnboardingViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val accountDao: AccountDao, private val settingsDao: SettingsDao, private val restClient: RestClient, private val session: IvySession, private val accountLogic: WalletAccountLogic, private val categoryCreator: CategoryCreator, private val categoryDao: CategoryDao, private val accountCreator: AccountCreator, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val syncExchangeRatesAct: SyncExchangeRatesAct, //Only OnboardingRouter stuff sharedPrefs: SharedPrefs, ivySync: IvySync, ivyAnalytics: IvyAnalytics, transactionReminderLogic: TransactionReminderLogic, preloadDataLogic: PreloadDataLogic, exchangeRatesLogic: ExchangeRatesLogic, logoutLogic: LogoutLogic, )</ID>
    <ID>LongParameterList:PaywallLogic.kt$PaywallLogic$( private val ivyBilling: IvyBilling, private val ivyContext: IvyWalletCtx, private val navigation: Navigation, private val accountDao: AccountDao, private val categoryDao: CategoryDao, private val budgetDao: BudgetDao, private val loanDao: LoanDao )</ID>
    <ID>LongParameterList:PaywallScreen.kt$( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, paywallReason: PaywallReason?, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, budgets: List&lt;Budget&gt;, loans: List&lt;Loan&gt;, onPlanSelected: (Plan?) -&gt; Unit = {}, onBuy: (Plan) -&gt; Unit, )</ID>
    <ID>LongParameterList:PaywallViewModel.kt$PaywallViewModel$( private val ivyBilling: IvyBilling, private val paywallLogic: PaywallLogic, private val ivyAnalytics: IvyAnalytics, private val categoriesAct: CategoriesAct, private val accountsAct: AccountsAct, private val budgetsAct: BudgetsAct, private val loansAct: LoansAct )</ID>
    <ID>LongParameterList:PieChartAct.kt$PieChartAct$( showAccountTransfersCategory: Boolean, type: TransactionType, accountTransfersCategory: Category, accountIdFilterSet: Set&lt;UUID&gt;, @SideEffect transactions: suspend () -&gt; List&lt;Transaction&gt;, @SideEffect incomeExpenseTransfer: suspend () -&gt; IncomeExpenseTransferPair, @SideEffect categoryAmounts: suspend () -&gt; List&lt;CategoryAmount&gt; )</ID>
    <ID>LongParameterList:PieChartAct.kt$PieChartAct$( type: TransactionType, baseCurrency: String, addAssociatedTransToCategoryAmt: Boolean = false, @SideEffect allCategories: suspend () -&gt; List&lt;Category?&gt;, @SideEffect transactions: suspend () -&gt; List&lt;Transaction&gt;, @SideEffect accountsUsed: suspend () -&gt; List&lt;Account&gt;, )</ID>
    <ID>LongParameterList:PieChartStatisticScreen.kt$( transactionType: TransactionType, period: TimePeriod, percentExpanded: Float, currency: String, amount: Double, showCloseButtonOnly: Boolean = false, onShowMonthModal: () -&gt; Unit, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, onClose: () -&gt; Unit, onAdd: (TransactionType) -&gt; Unit, )</ID>
    <ID>LongParameterList:PieChartStatisticViewModel.kt$PieChartStatisticViewModel$( period: TimePeriod, type: TransactionType, accountIdFilterList: List&lt;UUID&gt;, filterExclude: Boolean, transactions: List&lt;Transaction&gt;, treatTransfersAsIncomeExpense: Boolean )</ID>
    <ID>LongParameterList:PlannedPaymentsLazyColumn.kt$( Header: @Composable () -&gt; Unit, currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, listState: LazyListState = rememberLazyListState(), oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double, )</ID>
    <ID>LongParameterList:PlannedPaymentsLazyColumn.kt$( nav: Navigation, currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, listState: LazyListState, oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, oneTimeExpanded: Boolean, setOneTimeExpanded: (Boolean) -&gt; Unit, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double, recurringExpanded: Boolean, setRecurringExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$( private val plannedPaymentRuleDao: PlannedPaymentRuleDao, private val transactionDao: TransactionDao, private val transactionUploader: TransactionUploader, private val settingsDao: SettingsDao, private val exchangeRatesLogic: ExchangeRatesLogic, private val accountDao: AccountDao, private val plannedPaymentRuleUploader: PlannedPaymentRuleUploader )</ID>
    <ID>LongParameterList:PlannedPaymentsScreen.kt$( currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double )</ID>
    <ID>LongParameterList:ProgressModal.kt$( id: UUID = UUID.randomUUID(), title: String, description: String, visible: Boolean, color: Color = UI.colors.orange, dismiss: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:RecurringRuleModal.kt$( startDate: LocalDateTime, intervalN: Int, intervalType: IntervalType, modalScrollState: ScrollState, onSetStartDate: (LocalDateTime) -&gt; Unit, onSetIntervalN: (Int) -&gt; Unit, onSetIntervalType: (IntervalType) -&gt; Unit )</ID>
    <ID>LongParameterList:ReorderModal.kt$( visible: Boolean, id: UUID = UUID.randomUUID(), TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }, initialItems: List&lt;Any&gt;, dismiss: () -&gt; Unit, onUpdateItemOrderNum: ( itemsInNewOrder: List&lt;Any&gt;, item: T, newOrderNum: Double ) -&gt; Unit = { _, _, _ -&gt; }, onReordered: ((List&lt;Any&gt;) -&gt; Unit)? = null, ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit )</ID>
    <ID>LongParameterList:ReorderModal.kt$( visible: Boolean, id: UUID = UUID.randomUUID(), TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }, initialItems: List&lt;T&gt;, dismiss: () -&gt; Unit, onUpdateItemOrderNum: (item: T, newOrderNum: Double) -&gt; Unit = { _, _ -&gt; }, onReordered: ((List&lt;T&gt;) -&gt; Unit)? = null, ItemContent: @Composable (Int, T) -&gt; Unit )</ID>
    <ID>LongParameterList:ReportViewModel.kt$ReportViewModel$( private val plannedPaymentsLogic: PlannedPaymentsLogic, private val settingsDao: SettingsDao, private val transactionDao: TransactionDao, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val exportCSVLogic: ExportCSVLogic, private val exchangeAct: ExchangeAct, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val trnsWithDateDivsAct: TrnsWithDateDivsAct, private val calcTrnsIncomeExpenseAct: CalcTrnsIncomeExpenseAct, private val baseCurrencyAct: BaseCurrencyAct )</ID>
    <ID>LongParameterList:RootViewModel.kt$RootViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val ivyAnalytics: IvyAnalytics, private val settingsDao: SettingsDao, private val sharedPrefs: SharedPrefs, private val ivySession: IvySession, private val ivyBilling: IvyBilling, private val paywallLogic: PaywallLogic, private val transactionReminderLogic: TransactionReminderLogic, private val migrationsManager: MigrationsManager, )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( @DrawableRes icon: Int, text: String, hasShadow: Boolean = false, backgroundGradient: Gradient = Gradient.solid(UI.colors.medium), textColor: Color = White, iconPadding: Dp = 0.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( user: User?, currencyCode: String, opSync: OpResult&lt;Boolean&gt;?, lockApp: Boolean, showNotifications: Boolean = true, hideCurrentBalance: Boolean = false, progressState: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, nameLocalAccount: String?, startDateOfMonth: Int = 1, onSetCurrency: (String) -&gt; Unit, onSetName: (String) -&gt; Unit = {}, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onBackupData: () -&gt; Unit = {}, onExportToCSV: () -&gt; Unit = {}, onSetLockApp: (Boolean) -&gt; Unit = {}, onSetShowNotifications: (Boolean) -&gt; Unit = {}, onSetTreatTransfersAsIncExp: (Boolean) -&gt; Unit = {}, onSetHideCurrentBalance: (Boolean) -&gt; Unit = {}, onSetStartDateOfMonth: (Int) -&gt; Unit = {}, onDeleteAllUserData: () -&gt; Unit = {}, onDeleteCloudUserData: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( user: User?, opSync: OpResult&lt;Boolean&gt;?, nameLocalAccount: String?, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onCardClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:SettingsViewModel.kt$SettingsViewModel$( private val settingsDao: SettingsDao, private val ivySession: IvySession, private val userDao: UserDao, private val ivyContext: IvyWalletCtx, private val ivySync: IvySync, private val exportCSVLogic: ExportCSVLogic, private val restClient: RestClient, private val ivyAnalytics: IvyAnalytics, private val exchangeRatesLogic: ExchangeRatesLogic, private val logoutLogic: LogoutLogic, private val sharedPrefs: SharedPrefs, private val backupLogic: BackupLogic, private val startDayOfMonthAct: StartDayOfMonthAct, private val updateStartDayOfMonthAct: UpdateStartDayOfMonthAct, private val fetchAllTrnsFromServerAct: FetchAllTrnsFromServerAct, private val nav: Navigation, private val syncExchangeRatesAct: SyncExchangeRatesAct, )</ID>
    <ID>LongParameterList:Switch.kt$( modifier: Modifier = Modifier, enabled: Boolean, enabledColor: Color = UI.colors.green, disabledColor: Color = UI.colors.gray, animationColor: AnimationSpec&lt;Color&gt; = springBounce(), animationMove: AnimationSpec&lt;Float&gt; = springBounce(), onEnabledChange: (checked: Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:Title.kt$( type: TransactionType, titleFocus: FocusRequester, initialTransactionId: UUID?, titleTextFieldValue: TextFieldValue, setTitleTextFieldValue: (TextFieldValue) -&gt; Unit, suggestions: Set&lt;String&gt;, scrollState: ScrollState? = null, onTitleChanged: (String?) -&gt; Unit, onNext: () -&gt; Unit, )</ID>
    <ID>LongParameterList:TransactionSectionDivider.kt$( expanded: Boolean, title: String, titleColor: Color, baseCurrency: String, income: Double, expenses: Double, showIncomeExpenseRow: Boolean = true, setExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:Transactions.kt$( baseData: AppBaseData, overdue: DueSection?, onPayOrGet: (Transaction) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit, setExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:Transactions.kt$( baseData: AppBaseData, upcoming: DueSection?, overdue: DueSection?, history: List&lt;TransactionHistoryItem&gt;, emptyStateTitle: String = stringRes(R.string.no_transactions), emptyStateText: String, dateDividerMarginTop: Dp? = null, lastItemSpacer: Dp? = null, onPayOrGet: (Transaction) -&gt; Unit, setUpcomingExpanded: (Boolean) -&gt; Unit, setOverdueExpanded: (Boolean) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:WalletAccountLogic.kt$WalletAccountLogic$( account: Account, actualBalance: Double? = null, newBalance: Double, adjustTransactionTitle: String = "Adjust balance", isFiat: Boolean? = null, trnIsSyncedFlag: Boolean = false, //TODO: Remove this once Bank Integration trn sync is properly implemented )</ID>
    <ID>LoopWithTooManyJumpStatements:PieChart.kt$PieChartView$for</ID>
    <ID>MagicNumber:AmountFormatting.kt$0.009</ID>
    <ID>MagicNumber:AmountFormatting.kt$9</ID>
    <ID>MagicNumber:AppModuleDI.kt$AppModuleDI.&lt;no name provided&gt;$50</ID>
    <ID>MagicNumber:BackBottomBar.kt$180f</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.05</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.1</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.4</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.6</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.7</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.8</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.9</ID>
    <ID>MagicNumber:BalanceScreen.kt$200f</ID>
    <ID>MagicNumber:BalanceScreen.kt$45f</ID>
    <ID>MagicNumber:BudgetBattery.kt$0.30</ID>
    <ID>MagicNumber:BudgetBattery.kt$0.50</ID>
    <ID>MagicNumber:BudgetBattery.kt$0.75</ID>
    <ID>MagicNumber:BufferBattery.kt$0.25</ID>
    <ID>MagicNumber:BufferBattery.kt$0.50</ID>
    <ID>MagicNumber:BufferBattery.kt$0.75</ID>
    <ID>MagicNumber:CSVImporter.kt$CSVImporter$0.5</ID>
    <ID>MagicNumber:CSVImporter.kt$CSVImporter$12</ID>
    <ID>MagicNumber:CSVImporterV2.kt$CSVImporterV2$0.5</ID>
    <ID>MagicNumber:CSVScreen.kt$10</ID>
    <ID>MagicNumber:CSVViewModel.kt$CSVViewModel$100</ID>
    <ID>MagicNumber:CSVViewModel.kt$CSVViewModel$3</ID>
    <ID>MagicNumber:ChartPeriod.kt$ChartPeriod$10</ID>
    <ID>MagicNumber:ChartPeriod.kt$ChartPeriod$7</ID>
    <ID>MagicNumber:ChartPeriod.kt$ChartPeriod$8</ID>
    <ID>MagicNumber:ChooseIconModal.kt$5</ID>
    <ID>MagicNumber:ChoosePeriodModal.kt$200</ID>
    <ID>MagicNumber:ChoosePeriodModal.kt$3</ID>
    <ID>MagicNumber:ChoosePeriodModal.kt$35</ID>
    <ID>MagicNumber:Colors.kt$0.1f</ID>
    <ID>MagicNumber:Colors.kt$0.4f</ID>
    <ID>MagicNumber:Colors.kt$0.5</ID>
    <ID>MagicNumber:Colors.kt$0.5f</ID>
    <ID>MagicNumber:Colors.kt$0.6f</ID>
    <ID>MagicNumber:Colors.kt$0.8f</ID>
    <ID>MagicNumber:Colors.kt$0xFF0A664F</ID>
    <ID>MagicNumber:Colors.kt$0xFF111114</ID>
    <ID>MagicNumber:Colors.kt$0xFF14CC9E</ID>
    <ID>MagicNumber:Colors.kt$0xFF223D73</ID>
    <ID>MagicNumber:Colors.kt$0xFF22733D</ID>
    <ID>MagicNumber:Colors.kt$0xFF227373</ID>
    <ID>MagicNumber:Colors.kt$0xFF266280</ID>
    <ID>MagicNumber:Colors.kt$0xFF2B2C2D</ID>
    <ID>MagicNumber:Colors.kt$0xFF352680</ID>
    <ID>MagicNumber:Colors.kt$0xFF457BE6</ID>
    <ID>MagicNumber:Colors.kt$0xFF45E67B</ID>
    <ID>MagicNumber:Colors.kt$0xFF45E6E6</ID>
    <ID>MagicNumber:Colors.kt$0xFF49F2C8</ID>
    <ID>MagicNumber:Colors.kt$0xFF4CC3FF</ID>
    <ID>MagicNumber:Colors.kt$0xFF622680</ID>
    <ID>MagicNumber:Colors.kt$0xFF637317</ID>
    <ID>MagicNumber:Colors.kt$0xFF66371F</ID>
    <ID>MagicNumber:Colors.kt$0xFF66804D</ID>
    <ID>MagicNumber:Colors.kt$0xFF6B4DFF</ID>
    <ID>MagicNumber:Colors.kt$0xFF734B17</ID>
    <ID>MagicNumber:Colors.kt$0xFF801919</ID>
    <ID>MagicNumber:Colors.kt$0xFF802030</ID>
    <ID>MagicNumber:Colors.kt$0xFF802653</ID>
    <ID>MagicNumber:Colors.kt$0xFF802680</ID>
    <ID>MagicNumber:Colors.kt$0xFF806226</ID>
    <ID>MagicNumber:Colors.kt$0xFF807719</ID>
    <ID>MagicNumber:Colors.kt$0xFF939199</ID>
    <ID>MagicNumber:Colors.kt$0xFF96E645</ID>
    <ID>MagicNumber:Colors.kt$0xFF99FFBB</ID>
    <ID>MagicNumber:Colors.kt$0xFFAA99FF</ID>
    <ID>MagicNumber:Colors.kt$0xFFAAF2E0</ID>
    <ID>MagicNumber:Colors.kt$0xFFB3E6FF</ID>
    <ID>MagicNumber:Colors.kt$0xFFB3FFFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFC34CFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFC7E62E</ID>
    <ID>MagicNumber:Colors.kt$0xFFCCDDFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFCCFF99</ID>
    <ID>MagicNumber:Colors.kt$0xFFD5CCFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFE62E2E</ID>
    <ID>MagicNumber:Colors.kt$0xFFE67B45</ID>
    <ID>MagicNumber:Colors.kt$0xFFEECCFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFEEFF99</ID>
    <ID>MagicNumber:Colors.kt$0xFFEFEEF0</ID>
    <ID>MagicNumber:Colors.kt$0xFFF29F30</ID>
    <ID>MagicNumber:Colors.kt$0xFFF2CD9E</ID>
    <ID>MagicNumber:Colors.kt$0xFFFAFAFA</ID>
    <ID>MagicNumber:Colors.kt$0xFFFF4060</ID>
    <ID>MagicNumber:Colors.kt$0xFFFF4CA6</ID>
    <ID>MagicNumber:Colors.kt$0xFFFF4CFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFFF99AB</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFB3B3</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFBFFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFC34C</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFCCB3</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFCCD5</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFCCE6</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFDC99</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFDEB3</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFEE33</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFF799</ID>
    <ID>MagicNumber:Colors.kt$3</ID>
    <ID>MagicNumber:CurrencyPicker.kt$20</ID>
    <ID>MagicNumber:CustomExchangeRateCard.kt$4</ID>
    <ID>MagicNumber:DataCircle.kt$100</ID>
    <ID>MagicNumber:DateExt.kt$10</ID>
    <ID>MagicNumber:DateExt.kt$23</ID>
    <ID>MagicNumber:DateExt.kt$30</ID>
    <ID>MagicNumber:DateExt.kt$59</ID>
    <ID>MagicNumber:DueDate.kt$5</ID>
    <ID>MagicNumber:EditBottomSheet.kt$0.01f</ID>
    <ID>MagicNumber:EditBottomSheet.kt$16</ID>
    <ID>MagicNumber:EditBottomSheet.kt$18</ID>
    <ID>MagicNumber:EditBottomSheet.kt$20</ID>
    <ID>MagicNumber:EditBottomSheet.kt$20f</ID>
    <ID>MagicNumber:EditBottomSheet.kt$30</ID>
    <ID>MagicNumber:EditBottomSheet.kt$4</ID>
    <ID>MagicNumber:EditBottomSheet.kt$40</ID>
    <ID>MagicNumber:EditBottomSheet.kt$8</ID>
    <ID>MagicNumber:EditBottomSheet.kt$8f</ID>
    <ID>MagicNumber:EditTransactionScreen.kt$0.3f</ID>
    <ID>MagicNumber:EditTransactionScreen.kt$12</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.CATEGORY_NOT_FOUND$4041</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.CUSTOM_FIELD_NOT_FOUND$4046</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.EVENT_NOT_FOUND$4045</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.LABEL_NOT_FOUND$4042</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.NOTE_NOT_FOUND$4044</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.NOT_IVY_ATTACHMENT$7404</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.PARSE$2</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.PERMISSION_ERROR$14</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.SECURITY$13</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.SERVER_EXCEPTION$666</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.STATE_ERROR$7</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.TASK_NOT_FOUND$4043</ID>
    <ID>MagicNumber:ErrorCode.kt$ErrorCode.UNKNOWN$666</ID>
    <ID>MagicNumber:ExchangeRatesScreen.kt$1.23</ID>
    <ID>MagicNumber:ExchangeRatesScreen.kt$1.85</ID>
    <ID>MagicNumber:ExchangeRatesScreen.kt$1.96</ID>
    <ID>MagicNumber:FilterOverlay.kt$0.01f</ID>
    <ID>MagicNumber:FilterOverlay.kt$100f</ID>
    <ID>MagicNumber:FilterOverlay.kt$200f</ID>
    <ID>MagicNumber:FromToTimeRange.kt$FromToTimeRange$30</ID>
    <ID>MagicNumber:GitHubAutoBackupManager.kt$GitHubAutoBackupManager$30</ID>
    <ID>MagicNumber:GitHubAutoBackupManager.kt$GitHubAutoBackupManager$6</ID>
    <ID>MagicNumber:GitHubAutoBackupManager.kt$GitHubAutoBackupManager$60</ID>
    <ID>MagicNumber:GitHubBackupViewModel.kt$GitHubBackupViewModel$2_000L</ID>
    <ID>MagicNumber:GitHubClient.kt$GitHubClient$403</ID>
    <ID>MagicNumber:GitHubClient.kt$GitHubClient$404</ID>
    <ID>MagicNumber:HomeHeader.kt$0.5f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$0.01f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$1.5f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$500f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$510f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$520f</ID>
    <ID>MagicNumber:HomeTab.kt$&lt;no name provided&gt;$150</ID>
    <ID>MagicNumber:HomeViewModel.kt$HomeViewModel$5000</ID>
    <ID>MagicNumber:ImportProcessing.kt$100</ID>
    <ID>MagicNumber:ImportResultUI.kt$100</ID>
    <ID>MagicNumber:ImportViewModel.kt$ImportViewModel$100</ID>
    <ID>MagicNumber:InputField.kt$100</ID>
    <ID>MagicNumber:IntervalPickerRow.kt$180f</ID>
    <ID>MagicNumber:ItemStatisticScreen.kt$0.7f</ID>
    <ID>MagicNumber:ItemStatisticScreen.kt$10L</ID>
    <ID>MagicNumber:IvyBilling.kt$IvyBilling.&lt;no name provided&gt;$666</ID>
    <ID>MagicNumber:IvyColors.kt$0.1f</ID>
    <ID>MagicNumber:IvyColors.kt$0.4f</ID>
    <ID>MagicNumber:IvyColors.kt$0.5</ID>
    <ID>MagicNumber:IvyColors.kt$0.5f</ID>
    <ID>MagicNumber:IvyColors.kt$0.6f</ID>
    <ID>MagicNumber:IvyColors.kt$0.8f</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF0A664F</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF111114</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF14CC9E</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF223D73</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF22733D</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF227373</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF266280</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF2B2C2D</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF352680</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF457BE6</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF45E67B</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF45E6E6</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF49F2C8</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF4CC3FF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF622680</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF637317</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF66371F</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF66804D</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF6B4DFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF734B17</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF801919</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF802030</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF802653</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF802680</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF806226</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF807719</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF939199</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF96E645</ID>
    <ID>MagicNumber:IvyColors.kt$0xFF99FFBB</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFAA99FF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFAAF2E0</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFB3E6FF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFB3FFFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFC34CFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFC7E62E</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFCCDDFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFCCFF99</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFD5CCFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFE62E2E</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFE67B45</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFEECCFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFEEFF99</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFEFEEF0</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFF29F30</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFF2CD9E</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFAFAFA</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFF4060</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFF4CA6</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFF4CFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFF99AB</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFB3B3</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFBFFF</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFC34C</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFCCB3</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFCCD5</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFCCE6</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFDC99</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFDEB3</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFEE33</ID>
    <ID>MagicNumber:IvyColors.kt$0xFFFFF799</ID>
    <ID>MagicNumber:IvyColors.kt$3</ID>
    <ID>MagicNumber:IvyLineChart.kt$3</ID>
    <ID>MagicNumber:IvyModal.kt$0.01f</ID>
    <ID>MagicNumber:IvyModal.kt$1000f</ID>
    <ID>MagicNumber:IvyModal.kt$1100f</ID>
    <ID>MagicNumber:LoanDetailsScreen.kt$100</ID>
    <ID>MagicNumber:LoanTransactionsCore.kt$LoanTransactionsCore$12</ID>
    <ID>MagicNumber:LoanViewModel.kt$LoanViewModel$100</ID>
    <ID>MagicNumber:MainBottomBar.kt$0.01f</ID>
    <ID>MagicNumber:MainBottomBar.kt$100f</ID>
    <ID>MagicNumber:MainBottomBar.kt$199f</ID>
    <ID>MagicNumber:MainBottomBar.kt$200f</ID>
    <ID>MagicNumber:MainBottomBar.kt$3</ID>
    <ID>MagicNumber:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$105</ID>
    <ID>MagicNumber:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$106</ID>
    <ID>MagicNumber:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$106</ID>
    <ID>MagicNumber:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$107</ID>
    <ID>MagicNumber:Migration107to108_Sync.kt$Migration107to108_Sync$107</ID>
    <ID>MagicNumber:Migration107to108_Sync.kt$Migration107to108_Sync$108</ID>
    <ID>MagicNumber:Migration108to109_Users.kt$Migration108to109_Users$108</ID>
    <ID>MagicNumber:Migration108to109_Users.kt$Migration108to109_Users$109</ID>
    <ID>MagicNumber:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$109</ID>
    <ID>MagicNumber:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$110</ID>
    <ID>MagicNumber:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$110</ID>
    <ID>MagicNumber:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$111</ID>
    <ID>MagicNumber:Migration111to112_User_testUser.kt$Migration111to112_User_testUser$111</ID>
    <ID>MagicNumber:Migration111to112_User_testUser.kt$Migration111to112_User_testUser$112</ID>
    <ID>MagicNumber:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$112</ID>
    <ID>MagicNumber:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$113</ID>
    <ID>MagicNumber:Migration113to114_Multi_Currency.kt$Migration113to114_Multi_Currency$113</ID>
    <ID>MagicNumber:Migration113to114_Multi_Currency.kt$Migration113to114_Multi_Currency$114</ID>
    <ID>MagicNumber:Migration114to115_Category_Account_Icons.kt$Migration114to115_Category_Account_Icons$114</ID>
    <ID>MagicNumber:Migration114to115_Category_Account_Icons.kt$Migration114to115_Category_Account_Icons$115</ID>
    <ID>MagicNumber:Migration115to116_Account_Include_In_Balance.kt$Migration115to116_Account_Include_In_Balance$115</ID>
    <ID>MagicNumber:Migration115to116_Account_Include_In_Balance.kt$Migration115to116_Account_Include_In_Balance$116</ID>
    <ID>MagicNumber:Migration116to117_SalteEdgeIntgration.kt$Migration116to117_SalteEdgeIntgration$116</ID>
    <ID>MagicNumber:Migration116to117_SalteEdgeIntgration.kt$Migration116to117_SalteEdgeIntgration$117</ID>
    <ID>MagicNumber:Migration117to118_Budgets.kt$Migration117to118_Budgets$117</ID>
    <ID>MagicNumber:Migration117to118_Budgets.kt$Migration117to118_Budgets$118</ID>
    <ID>MagicNumber:Migration118to119_Loans.kt$Migration118to119_Loans$118</ID>
    <ID>MagicNumber:Migration118to119_Loans.kt$Migration118to119_Loans$119</ID>
    <ID>MagicNumber:Migration119to120_LoanTransactions.kt$Migration119to120_LoanTransactions$119</ID>
    <ID>MagicNumber:Migration119to120_LoanTransactions.kt$Migration119to120_LoanTransactions$120</ID>
    <ID>MagicNumber:Migration120to121_DropWishlistItem.kt$Migration120to121_DropWishlistItem$120</ID>
    <ID>MagicNumber:Migration120to121_DropWishlistItem.kt$Migration120to121_DropWishlistItem$121</ID>
    <ID>MagicNumber:Migration122to123_ExchangeRates.kt$Migration122to123_ExchangeRates$122</ID>
    <ID>MagicNumber:Migration122to123_ExchangeRates.kt$Migration122to123_ExchangeRates$123</ID>
    <ID>MagicNumber:MigrationsManager.kt$MigrationsManager$2_000L</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$10</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$11</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$12</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$3</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$4</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$5</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$6</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$7</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$8</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$9</ID>
    <ID>MagicNumber:NotificationService.kt$NotificationService$1000</ID>
    <ID>MagicNumber:NotificationService.kt$NotificationService$200</ID>
    <ID>MagicNumber:OnboardingAccounts.kt$0xFF4DCAFF</ID>
    <ID>MagicNumber:OnboardingCategories.kt$0xFF1e5166</ID>
    <ID>MagicNumber:OnboardingCategories.kt$0xFF4dfff3</ID>
    <ID>MagicNumber:OnboardingCategories.kt$0xFF75ff4d</ID>
    <ID>MagicNumber:OnboardingCategories.kt$12</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$0.01f</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$0.5f</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$0.99f</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$10</ID>
    <ID>MagicNumber:OnboardingRouter.kt$OnboardingRouter$1000</ID>
    <ID>MagicNumber:OnboardingSplashLogin.kt$0.01f</ID>
    <ID>MagicNumber:OnboardingSplashLogin.kt$3f</ID>
    <ID>MagicNumber:ParseFields.kt$0.0001</ID>
    <ID>MagicNumber:ParseFields.kt$0.001</ID>
    <ID>MagicNumber:ParseFields.kt$0.01</ID>
    <ID>MagicNumber:ParseFields.kt$0.1</ID>
    <ID>MagicNumber:ParseFields.kt$10</ID>
    <ID>MagicNumber:ParseFields.kt$10.0</ID>
    <ID>MagicNumber:ParseFields.kt$100</ID>
    <ID>MagicNumber:ParseFields.kt$100.0</ID>
    <ID>MagicNumber:ParseFields.kt$10_000</ID>
    <ID>MagicNumber:ParseFields.kt$10_000.0</ID>
    <ID>MagicNumber:ParseFields.kt$1_000</ID>
    <ID>MagicNumber:ParseFields.kt$1_000.0</ID>
    <ID>MagicNumber:ParseFields.kt$1_0000</ID>
    <ID>MagicNumber:PeriodSelector.kt$180f</ID>
    <ID>MagicNumber:PieChart.kt$PieChartView$360</ID>
    <ID>MagicNumber:PieChart.kt$PieChartView$90.0</ID>
    <ID>MagicNumber:PieChartStatisticScreen.kt$100</ID>
    <ID>MagicNumber:PieChartStatisticScreen.kt$40</ID>
    <ID>MagicNumber:Plan.kt$Plan$3</ID>
    <ID>MagicNumber:Plan.kt$Plan$4</ID>
    <ID>MagicNumber:PlannedPaymentCard.kt$5</ID>
    <ID>MagicNumber:PlannedPaymentsGenerator.kt$PlannedPaymentsGenerator$3</ID>
    <ID>MagicNumber:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$12</ID>
    <ID>MagicNumber:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$7</ID>
    <ID>MagicNumber:PlannedPaymentsScreen.kt$5</ID>
    <ID>MagicNumber:PlansSheet.kt$0.01f</ID>
    <ID>MagicNumber:PlansSheet.kt$100</ID>
    <ID>MagicNumber:PlansSheet.kt$100f</ID>
    <ID>MagicNumber:PlansSheet.kt$12</ID>
    <ID>MagicNumber:PlansSheet.kt$200f</ID>
    <ID>MagicNumber:RecurringRule.kt$5</ID>
    <ID>MagicNumber:RecurringRuleModal.kt$12</ID>
    <ID>MagicNumber:RecurringRuleModal.kt$200</ID>
    <ID>MagicNumber:ReportScreen.kt$1000f</ID>
    <ID>MagicNumber:RestClient.kt$RestClient.Companion$15</ID>
    <ID>MagicNumber:RestClient.kt$RestClient.Companion$200</ID>
    <ID>MagicNumber:RestClient.kt$RestClient.Companion$299</ID>
    <ID>MagicNumber:RestClient.kt$RestClient.Companion$5</ID>
    <ID>MagicNumber:RootActivity.kt$RootActivity$100</ID>
    <ID>MagicNumber:RootActivity.kt$RootActivity$12</ID>
    <ID>MagicNumber:RootViewModel.kt$RootViewModel$1000</ID>
    <ID>MagicNumber:SortOrder.kt$SortOrder.ALPHABETICAL$3</ID>
    <ID>MagicNumber:TransactionCard.kt$5</ID>
    <ID>MagicNumber:TransactionReminderLogic.kt$TransactionReminderLogic$20</ID>
    <ID>MagicNumber:TransactionReminderLogic.kt$TransactionReminderLogic$24</ID>
    <ID>MagicNumber:TransactionReminderLogic.kt$TransactionReminderLogic$5</ID>
    <ID>MagicNumber:TransactionViewModel.kt$TransactionViewModel$12</ID>
    <ID>MagicNumber:Transactions.kt$5</ID>
    <ID>MagicNumber:UpdateStartDayOfMonthAct.kt$UpdateStartDayOfMonthAct$31</ID>
    <ID>MagicNumber:WalletAccountLogic.kt$WalletAccountLogic$0.009</ID>
    <ID>MatchingDeclarationName:AccountModal.kt$AccountModalData</ID>
    <ID>MatchingDeclarationName:BudgetModal.kt$BudgetModalData</ID>
    <ID>MatchingDeclarationName:BufferModal.kt$BufferModalData</ID>
    <ID>MatchingDeclarationName:CategoryModal.kt$CategoryModalData</ID>
    <ID>MatchingDeclarationName:ChartsCore.kt$ChartPoint&lt;V&gt;</ID>
    <ID>MatchingDeclarationName:Exchange.kt$ExchangeData</ID>
    <ID>MatchingDeclarationName:IvyToolbar.kt$BackButtonType</ID>
    <ID>MatchingDeclarationName:LoanModal.kt$LoanModalData</ID>
    <ID>MatchingDeclarationName:LoanRecordModal.kt$LoanRecordModalData</ID>
    <ID>MatchingDeclarationName:RecurringRuleModal.kt$RecurringRuleModalData</ID>
    <ID>MatchingDeclarationName:WalletCharts.kt$ToRange</ID>
    <ID>MaxLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$fun</ID>
    <ID>MaxLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$val</ID>
    <ID>MaxLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$fun</ID>
    <ID>MaxLineLength:Accessors4ymijgaek646mzru18sdmblu7.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("detekt") as io.gitlab.arturbosch.detekt.extensions.DetektExtension</ID>
    <ID>MaxLineLength:Accessors6m89nhcqblthog8es93pjkmhg.kt$val</ID>
    <ID>MaxLineLength:Accessors72k7tti784t7idmqtg2upvaru.kt$val</ID>
    <ID>MaxLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$fun</ID>
    <ID>MaxLineLength:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("reporting") as org.gradle.api.reporting.ReportingExtension</ID>
    <ID>MaxLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$fun</ID>
    <ID>MaxLineLength:AccountModal.kt$text = if (modal?.account != null) stringResource(R.string.edit_account) else stringResource(R.string.new_account)</ID>
    <ID>MaxLineLength:AppModuleDI.kt$AppModuleDI.&lt;no name provided&gt;$"https://img.poki.com/cdn-cgi/image/quality=78,width=600,height=600,fit=cover,f=auto/94945631828bfdcf32a8ad0b79978913.png"</ID>
    <ID>MaxLineLength:AppModuleDI.kt$AppModuleDI.&lt;no name provided&gt;$"https://maserati.scene7.com/is/image/maserati/maserati/regional/us/models/my22/levante/22_LV_Trofeo_PS_T1_HomePage_1920x1080.jpg?\$1920x2000\$&amp;fit=constrain"</ID>
    <ID>MaxLineLength:AppModuleDI.kt$AppModuleDI.&lt;no name provided&gt;$"https://stimg.cardekho.com/images/carexteriorimages/930x620/Lamborghini/Aventador/6721/Lamborghini-Aventador-SVJ/1621849426405/front-left-side-47.jpg"</ID>
    <ID>MaxLineLength:BalanceViewModel.kt$BalanceViewModel$plannedPaymentsLogic.plannedPaymentsAmountFor(period.toRange(ivyContext.startDayOfMonth)) //+ positive if Income &gt; Expenses else - negative</ID>
    <ID>MaxLineLength:BudgetModal.kt$text = if (modal?.budget != null) stringResource(R.string.edit_budget) else stringResource(R.string.create_budget)</ID>
    <ID>MaxLineLength:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$"If you haven't yet, feel free join our invite-only Ivy Telegram Community and make our app better :)"</ID>
    <ID>MaxLineLength:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$description = "It looks like that you're enjoying Ivy Wallet! Feel free join our invite-only Ivy Telegram Community and make our app better :)"</ID>
    <ID>MaxLineLength:DetektConfigurationAccessors.kt$fun</ID>
    <ID>MaxLineLength:DetektPluginsConfigurationAccessors.kt$fun</ID>
    <ID>MaxLineLength:DonateModal.kt$"1) You have custom donation options.\n2) If you choose a 'tier', you'll receive a small digital reward from us "</ID>
    <ID>MaxLineLength:DonateScreen.kt$text = "BIG THANKS to all Ivy contributors who made Ivy Wallet possible! That's why we opened a donations channel to sustain and improve our small project."</ID>
    <ID>MaxLineLength:DonateScreen.kt$text = "If you want to support us feel free to donate whatever amount you're comfortable with - it all helps! (local taxes may apply)".uppercase()</ID>
    <ID>MaxLineLength:EditTransactionViewModel.kt$EditTransactionViewModel$"You are trying to change the account associated with the loan record to an account of different currency"</ID>
    <ID>MaxLineLength:EditTransactionViewModel.kt$EditTransactionViewModel$?:</ID>
    <ID>MaxLineLength:FortuneCitySteps.kt$articleUrl = "https://fourdesire.helpshift.com/hc/en/5-fortune-city/faq/242-can-i-export-my-fortune-city-records/"</ID>
    <ID>MaxLineLength:GitHubBackupScreen.kt$"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token"</ID>
    <ID>MaxLineLength:HomeHeader.kt$text = if (name.isNotNullOrBlank()) stringResource(R.string.hi_name, name) else stringResource(R.string.hi)</ID>
    <ID>MaxLineLength:HomeHeader.kt$text = stringResource(R.string.cashflow, (if (cashflow &gt; 0) "+" else ""), cashflow.format(currency), currency)</ID>
    <ID>MaxLineLength:ItemStatisticViewModel.kt$ItemStatisticViewModel$//unspecifiedCategory==false is explicitly checked to accommodate for a temp AccountTransfers Category during Reports Screen</ID>
    <ID>MaxLineLength:IvyBilling.kt$IvyBilling$Timber.i("Acknowledge purchase result, code=${acknowledgeResult.responseCode}: ${acknowledgeResult.debugMessage}")</ID>
    <ID>MaxLineLength:IvyChecklistTextField.kt$value = TextFieldValue("Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light.")</ID>
    <ID>MaxLineLength:IvyDescriptionTextField.kt$value = TextFieldValue("Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light.")</ID>
    <ID>MaxLineLength:LoanModal.kt$//enabled = nameTextFieldValue.text.isNotNullOrBlank() &amp;&amp; amount &gt; 0 &amp;&amp; ((createLoanTrans &amp;&amp; selectedAcc != null) || !createLoanTrans)</ID>
    <ID>MaxLineLength:MainBottomBar.kt$y = buttonCenterY.roundToInt() - 48.dp.roundToPx() - placealbe.height - FAB_BUTTON_SIZE.roundToPx()</ID>
    <ID>MaxLineLength:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$"CREATE TABLE IF NOT EXISTS `transaction_recurring_rules` (`startDate` INTEGER NOT NULL, `intervalSeconds` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$database.execSQL("CREATE TABLE IF NOT EXISTS `wishlist_items` (`name` TEXT NOT NULL, `price` REAL NOT NULL, `accountId` TEXT NOT NULL, `categoryId` TEXT, `description` TEXT, `plannedDateTime` INTEGER, `orderNum` REAL NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>MaxLineLength:Migration108to109_Users.kt$Migration108to109_Users$database.execSQL("CREATE TABLE IF NOT EXISTS `users` (`email` TEXT NOT NULL, `authProviderType` TEXT NOT NULL, `firstName` TEXT NOT NULL, `lastName` TEXT, `profilePicture` TEXT, `color` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>MaxLineLength:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$database.execSQL("CREATE TABLE IF NOT EXISTS `transaction_recurring_rules` (`startDate` INTEGER, `intervalN` INTEGER, `intervalType` TEXT, `oneTime` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>MaxLineLength:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$database.execSQL("CREATE TABLE IF NOT EXISTS `planned_payment_rules` (`startDate` INTEGER, `intervalN` INTEGER, `intervalType` TEXT, `oneTime` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>MaxLineLength:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$database.execSQL("CREATE TABLE IF NOT EXISTS `exchange_rates` (`baseCurrency` TEXT NOT NULL, `currency` TEXT NOT NULL, `rate` REAL NOT NULL, PRIMARY KEY(`baseCurrency`, `currency`))")</ID>
    <ID>MaxLineLength:Migration117to118_Budgets.kt$Migration117to118_Budgets$database.execSQL("CREATE TABLE IF NOT EXISTS `${tableName}` (`name` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryIdsSerialized` TEXT, `accountIdsSerialized` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `orderId` REAL NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>MaxLineLength:Migration118to119_Loans.kt$Migration118to119_Loans$database.execSQL("CREATE TABLE IF NOT EXISTS `$LOANS_TABLE` (`name` TEXT NOT NULL, `amount` REAL NOT NULL, `type` TEXT NOT NULL, `color` INTEGER NOT NULL, `icon` TEXT, `orderNum` REAL NOT NULL, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>MaxLineLength:Migration118to119_Loans.kt$Migration118to119_Loans$database.execSQL("CREATE TABLE IF NOT EXISTS `$LOAN_RECORDS_TABLE` (`loanId` TEXT NOT NULL, `amount` REAL NOT NULL, `note` TEXT, `dateTime` INTEGER NOT NULL, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))")</ID>
    <ID>MaxLineLength:OnboardingAccounts.kt$text = if (itemsCount == 0) "Up to $freeItemsCount free $itemLabelPlural" else "$freeItemsLeft $itemLabelPlural left"</ID>
    <ID>MaxLineLength:OnboardingPrivacyTC.kt$Timber.i("dragAmount=$dragAmount, offsetX=$offsetX, newOffsetX=$newOffsetX, maxOffset=$maxOffsetX")</ID>
    <ID>MaxLineLength:PieChartAct.kt$PieChartAct$if</ID>
    <ID>MaxLineLength:PieChartStatisticBottomBar.kt$text = if (isIncome) stringResource(id = R.string.add_income) else stringResource(id = R.string.add_expense)</ID>
    <ID>MaxLineLength:PieChartStatisticScreen.kt$text</ID>
    <ID>MaxLineLength:PlannedPaymentRuleDao.kt$PlannedPaymentRuleDao$@Query("SELECT * FROM planned_payment_rules WHERE isDeleted = 0 AND oneTime = :oneTime ORDER BY amount DESC, startDate ASC")</ID>
    <ID>MaxLineLength:PlansSheet.kt$}</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.asset-pack-bundle` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackBundlePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.asset-pack` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.dynamic-feature` plugin implemented by [com.android.build.gradle.internal.plugins.DynamicFeaturePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.fused-library` plugin implemented by [com.android.build.gradle.internal.plugins.FusedLibraryPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.internal.plugins.KotlinMultiplatformAndroidPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.privacy-sandbox-sdk` plugin implemented by [com.android.build.gradle.internal.plugins.PrivacySandboxSdkPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.reporting` plugin implemented by [com.android.build.gradle.internal.plugins.ReportingPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.version-check` plugin implemented by [com.android.build.gradle.internal.plugins.VersionCheckPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.api.KotlinMultiplatformAndroidPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.google.firebase.crashlytics` plugin implemented by [com.google.firebase.crashlytics.gradle.CrashlyticsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `io.github.detekt.gradle.compiler-plugin` plugin implemented by [io.github.detekt.gradle.DetektKotlinCompilerPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-android-extensions` plugin implemented by [org.jetbrains.kotlin.gradle.internal.AndroidExtensionsSubpluginIndicator].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-native-cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-native-performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.clang-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.ClangCompilerPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.component-model-base` plugin implemented by [org.gradle.language.base.plugins.ComponentModelBasePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.google-test-test-suite` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.google-test` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestConventionPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.groovy-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.internal.precompiled.PrecompiledGroovyPluginsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.jacoco-report-aggregation` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoReportAggregationPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.java-library-distribution` plugin implemented by [org.gradle.api.plugins.JavaLibraryDistributionPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.jvm-toolchain-management` plugin implemented by [org.gradle.api.plugins.JvmToolchainManagementPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.microsoft-visual-cpp-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.MicrosoftVisualCppCompilerPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.native-component-model` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentModelPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.objective-c-lang` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCLangPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.objective-cpp-lang` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppLangPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.standard-tool-chains` plugin implemented by [org.gradle.nativeplatform.toolchain.internal.plugins.StandardToolChainsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.windows-resource-script` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourceScriptPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.native.cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.native.performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformAndroidPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.common` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformCommonPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.plugin.parcelize` plugin implemented by [org.jetbrains.kotlin.gradle.internal.ParcelizeSubplugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.plugin.scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin].</ID>
    <ID>MaxLineLength:PrimaryAttributeColumn.kt$"Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n"</ID>
    <ID>MaxLineLength:PrimaryAttributeColumn.kt$"See https://docs.gradle.org/7.0-rc-1/userguide/command_line_interface.html#sec:command_line_warnings"</ID>
    <ID>MaxLineLength:ReportViewModel.kt$ReportViewModel$if (stateVal().treatTransfersAsIncExp) historyIncomeExpense.value.transferExpense.toDouble() else 0.0</ID>
    <ID>MaxLineLength:ReportViewModel.kt$ReportViewModel$return incomeExpenseTransferPair.income + incomeExpenseTransferPair.transferIncome - incomeExpenseTransferPair.expense - incomeExpenseTransferPair.transferExpense</ID>
    <ID>MaxLineLength:SettingsViewModel.kt$SettingsViewModel$e.sendToCrashlytics("Settings - GOOGLE_SIGN_IN ERROR: generic exception when logging with GOOGLE")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId = :categoryId) AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId = :categoryId) AND type = :type AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId IS NULL) AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId IS NULL) AND type = :type AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND accountId = :accountId AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate AND recurringRuleId = :recurringRuleId ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate AND type = :type ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND (categoryId = :categoryId) ORDER BY dateTime DESC, dueDate ASC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND (categoryId IS NULL) ORDER BY dateTime DESC, dueDate ASC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND accountId = :accountId ORDER BY dateTime DESC, dueDate ASC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate ORDER BY dueDate ASC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND recurringRuleId = :recurringRuleId ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND toAccountId = :toAccountId AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and accountId = :accountId ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and accountId = :accountId and dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and toAccountId = :toAccountId ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and toAccountId = :toAccountId and dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC")</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$@Query("UPDATE transactions SET isDeleted = 1, isSynced = 0 WHERE recurringRuleId = :recurringRuleId AND dateTime IS NULL")</ID>
    <ID>MaxLineLength:TransactionReminderWorker.kt$TransactionReminderWorker$//Double check is needed because the user can switch off notifications in settings after it has been scheduled to show notifications for the next day</ID>
    <ID>MaxLineLength:UIExt.kt$if (pIsDark) lFlags and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv() else lFlags or View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR</ID>
    <ID>MaxLineLength:ViewPager.kt$Timber.d("onDragStopped(): velocity = $velocity, finalVelocity = $finalVelocity, currentPageOffset = ${state.currentPageOffset}")</ID>
    <ID>MaxLineLength:WalletByBudgetBakersSteps.kt$articleUrl = "https://support.budgetbakers.com/hc/en-us/articles/209753325-How-to-EXPORT-transactions-from-Wallet"</ID>
    <ID>MaximumLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$ </ID>
    <ID>MaximumLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$fun</ID>
    <ID>MaximumLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$val</ID>
    <ID>MaximumLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$ </ID>
    <ID>MaximumLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$fun</ID>
    <ID>MaximumLineLength:Accessors4ymijgaek646mzru18sdmblu7.kt$ </ID>
    <ID>MaximumLineLength:Accessors6m89nhcqblthog8es93pjkmhg.kt$val</ID>
    <ID>MaximumLineLength:Accessors72k7tti784t7idmqtg2upvaru.kt$val</ID>
    <ID>MaximumLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$ </ID>
    <ID>MaximumLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$fun</ID>
    <ID>MaximumLineLength:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$ </ID>
    <ID>MaximumLineLength:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$ </ID>
    <ID>MaximumLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$ </ID>
    <ID>MaximumLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$fun</ID>
    <ID>MaximumLineLength:AccountModal.kt$ </ID>
    <ID>MaximumLineLength:AppModuleDI.kt$AppModuleDI.&lt;no name provided&gt;$ </ID>
    <ID>MaximumLineLength:BalanceViewModel.kt$BalanceViewModel$ </ID>
    <ID>MaximumLineLength:BudgetModal.kt$ </ID>
    <ID>MaximumLineLength:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$ </ID>
    <ID>MaximumLineLength:DetektConfigurationAccessors.kt$fun</ID>
    <ID>MaximumLineLength:DetektPluginsConfigurationAccessors.kt$fun</ID>
    <ID>MaximumLineLength:DonateModal.kt$ </ID>
    <ID>MaximumLineLength:DonateScreen.kt$ </ID>
    <ID>MaximumLineLength:EditTransactionViewModel.kt$EditTransactionViewModel$ </ID>
    <ID>MaximumLineLength:FortuneCitySteps.kt$ </ID>
    <ID>MaximumLineLength:GitHubBackupScreen.kt$ </ID>
    <ID>MaximumLineLength:HomeHeader.kt$ </ID>
    <ID>MaximumLineLength:IvyBilling.kt$IvyBilling$ </ID>
    <ID>MaximumLineLength:IvyChecklistTextField.kt$ </ID>
    <ID>MaximumLineLength:IvyDescriptionTextField.kt$ </ID>
    <ID>MaximumLineLength:MainBottomBar.kt$ </ID>
    <ID>MaximumLineLength:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$ </ID>
    <ID>MaximumLineLength:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$ </ID>
    <ID>MaximumLineLength:Migration108to109_Users.kt$Migration108to109_Users$ </ID>
    <ID>MaximumLineLength:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$ </ID>
    <ID>MaximumLineLength:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$ </ID>
    <ID>MaximumLineLength:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$ </ID>
    <ID>MaximumLineLength:Migration117to118_Budgets.kt$Migration117to118_Budgets$ </ID>
    <ID>MaximumLineLength:Migration118to119_Loans.kt$Migration118to119_Loans$ </ID>
    <ID>MaximumLineLength:OnboardingAccounts.kt$ </ID>
    <ID>MaximumLineLength:OnboardingPrivacyTC.kt$ </ID>
    <ID>MaximumLineLength:PieChartAct.kt$PieChartAct$ </ID>
    <ID>MaximumLineLength:PieChartStatisticBottomBar.kt$ </ID>
    <ID>MaximumLineLength:PieChartStatisticScreen.kt$ </ID>
    <ID>MaximumLineLength:PlannedPaymentRuleDao.kt$PlannedPaymentRuleDao$ </ID>
    <ID>MaximumLineLength:PlansSheet.kt$ </ID>
    <ID>MaximumLineLength:PrimaryAttributeColumn.kt$ </ID>
    <ID>MaximumLineLength:ReportViewModel.kt$ReportViewModel$ </ID>
    <ID>MaximumLineLength:SettingsViewModel.kt$SettingsViewModel$ </ID>
    <ID>MaximumLineLength:TransactionDao.kt$TransactionDao$ </ID>
    <ID>MaximumLineLength:UIExt.kt$ </ID>
    <ID>MaximumLineLength:ViewPager.kt$ </ID>
    <ID>MaximumLineLength:WalletByBudgetBakersSteps.kt$ </ID>
    <ID>ModifierListSpacing:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors4ymijgaek646mzru18sdmblu7.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors6m89nhcqblthog8es93pjkmhg.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors72k7tti784t7idmqtg2upvaru.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors7hvycqvau4uyj5knata7lx0yx.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorsa5ptgikd9fb816fav4742zvaq.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorseessl0al0otcsbyqqruvoncpd.kt$internal</ID>
    <ID>ModifierListSpacing:DetektConfigurationAccessors.kt$internal</ID>
    <ID>ModifierListSpacing:DetektPluginsConfigurationAccessors.kt$internal</ID>
    <ID>ModifierListSpacing:Ivy_lintPlugin.kt$Ivy_lintPlugin$public</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidInternalKotlinMultiplatformPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidInternalKotlinPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidInternalPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidKotlinMultiplatformPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidKotlinPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleDaggerHiltPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleDaggerPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleFirebasePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleGmsPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGooglePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$DaggerHiltAndroidPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$DaggerHiltPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$DaggerPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGithubDetektGradlePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGithubDetektPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGithubPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGitlabArturboschPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGitlabPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgGradlePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinNativePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinPlatformPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinPluginPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$internal</ID>
    <ID>ModifierMissing:AccountModal.kt$AccountModal</ID>
    <ID>ModifierMissing:AddKeywordModal.kt$AddKeywordModal</ID>
    <ID>ModifierMissing:AddPrimaryAttributeButton.kt$AddPrimaryAttributeButton</ID>
    <ID>ModifierMissing:AddRateModal.kt$AddRateModal</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyB1</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyB1Row</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyB2Row</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyCaption</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyH1</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyH2Row</ID>
    <ID>ModifierMissing:AmountModal.kt$AmountCurrency</ID>
    <ID>ModifierMissing:AmountModal.kt$AmountKeyboard</ID>
    <ID>ModifierMissing:AmountModal.kt$AmountModal</ID>
    <ID>ModifierMissing:AmountModal.kt$KeypadCircleButton</ID>
    <ID>ModifierMissing:AppLockedScreen.kt$AppLockedScreen</ID>
    <ID>ModifierMissing:BackBottomBar.kt$BackBottomBar</ID>
    <ID>ModifierMissing:BudgetModal.kt$BudgetModal</ID>
    <ID>ModifierMissing:BudgetModal.kt$ModalNameInput</ID>
    <ID>ModifierMissing:BufferModal.kt$BufferModal</ID>
    <ID>ModifierMissing:CSVScreen.kt$LabelContainsField</ID>
    <ID>ModifierMissing:CSVScreen.kt$Spacer8</ID>
    <ID>ModifierMissing:CalculatorModal.kt$CalculatorModal</ID>
    <ID>ModifierMissing:CategoriesScreen.kt$SortModal</ID>
    <ID>ModifierMissing:Category.kt$Category</ID>
    <ID>ModifierMissing:CategoryModal.kt$CategoryModal</ID>
    <ID>ModifierMissing:CategoryModal.kt$IconNameRow</ID>
    <ID>ModifierMissing:ChangeTransactionTypeModal.kt$ChangeTransactionTypeModal</ID>
    <ID>ModifierMissing:ChooseCategoryModal.kt$ChooseCategoryModal</ID>
    <ID>ModifierMissing:ChooseIconModal.kt$ChooseIconModal</ID>
    <ID>ModifierMissing:ChoosePeriodModal.kt$ChoosePeriodModal</ID>
    <ID>ModifierMissing:ChooseStartDateOfMonthModal.kt$ChooseStartDateOfMonthModal</ID>
    <ID>ModifierMissing:CurrencyModal.kt$CurrencyModal</ID>
    <ID>ModifierMissing:CustomerJourney.kt$CustomerJourney</ID>
    <ID>ModifierMissing:CustomerJourney.kt$CustomerJourneyCard</ID>
    <ID>ModifierMissing:DataCircle.kt$DataCircle</ID>
    <ID>ModifierMissing:DefaultImportSteps.kt$DefaultImportSteps</ID>
    <ID>ModifierMissing:DeleteModal.kt$DeleteModal</ID>
    <ID>ModifierMissing:DescriptionModal.kt$DescriptionModal</ID>
    <ID>ModifierMissing:Dividers.kt$DividerH</ID>
    <ID>ModifierMissing:Dividers.kt$DividerV</ID>
    <ID>ModifierMissing:Dividers.kt$DividerW</ID>
    <ID>ModifierMissing:DonateModal.kt$DonateModal</ID>
    <ID>ModifierMissing:EditBottomSheet.kt$EditBottomSheet</ID>
    <ID>ModifierMissing:FilterOverlay.kt$FilterOverlay</ID>
    <ID>ModifierMissing:FilterOverlay.kt$ListItem</ID>
    <ID>ModifierMissing:FinancistoSteps.kt$FinancistoSteps</ID>
    <ID>ModifierMissing:GitHubBackupScreen.kt$GitHubBackupScreen</ID>
    <ID>ModifierMissing:GitHubBackupStatus.kt$GitHubBackupStatus</ID>
    <ID>ModifierMissing:GradientCut.kt$GradientCutBottom</ID>
    <ID>ModifierMissing:HealthTab.kt$HealthTab</ID>
    <ID>ModifierMissing:HistoryDateDivider.kt$HistoryDateDivider</ID>
    <ID>ModifierMissing:HomeHeader.kt$CashFlowInfo</ID>
    <ID>ModifierMissing:HomeMoreMenu.kt$MoreMenu</ID>
    <ID>ModifierMissing:HomeTab.kt$HomeLazyColumn</ID>
    <ID>ModifierMissing:ImportFrom.kt$ImportFrom</ID>
    <ID>ModifierMissing:ImportInstructions.kt$ImportInstructions</ID>
    <ID>ModifierMissing:ImportInstructions.kt$StepTitle</ID>
    <ID>ModifierMissing:ImportInstructions.kt$UploadFileStep</ID>
    <ID>ModifierMissing:ImportInstructions.kt$VideoArticleRow</ID>
    <ID>ModifierMissing:ImportProcessing.kt$ImportProcessing</ID>
    <ID>ModifierMissing:ImportResultUI.kt$ImportResultUI</ID>
    <ID>ModifierMissing:IntervalPickerRow.kt$IntervalPickerRow</ID>
    <ID>ModifierMissing:ItemStatisticScreen.kt$IncomeExpensesCards</ID>
    <ID>ModifierMissing:ItemStatisticScreen.kt$ItemStatisticToolbar</ID>
    <ID>ModifierMissing:IvyColorPicker.kt$IvyColorPicker</ID>
    <ID>ModifierMissing:IvyComposeApp.kt$IvyWalletComponentPreview</ID>
    <ID>ModifierMissing:IvyDividerDot.kt$IvyDividerDot</ID>
    <ID>ModifierMissing:IvyModal.kt$IvyModal</ID>
    <ID>ModifierMissing:IvyModal.kt$ModalActionsRow</ID>
    <ID>ModifierMissing:IvyModal.kt$ModalPreviewActionRowSpacer</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalAdd</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalDelete</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalDynamicPrimaryAction</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalTitle</ID>
    <ID>ModifierMissing:IvyModalDomainComponents.kt$ModalAmountSection</ID>
    <ID>ModifierMissing:IvyToolbar.kt$IvyToolbar</ID>
    <ID>ModifierMissing:IvyUI.kt$IvyUI</ID>
    <ID>ModifierMissing:IvyViewPager.kt$IvyPager</ID>
    <ID>ModifierMissing:IvyWalletSteps.kt$IvyWalletSteps</ID>
    <ID>ModifierMissing:KPIsTab.kt$KPIsTab</ID>
    <ID>ModifierMissing:LoanModal.kt$LoanModal</ID>
    <ID>ModifierMissing:LoanRecordModal.kt$LoanRecordModal</ID>
    <ID>ModifierMissing:MainBottomBar.kt$BottomBar</ID>
    <ID>ModifierMissing:MonefySteps.kt$MonefySteps</ID>
    <ID>ModifierMissing:MoneyManagerPraseSteps.kt$MoneyManagerPraseSteps</ID>
    <ID>ModifierMissing:MonthPickerModal.kt$MonthPickerModal</ID>
    <ID>ModifierMissing:NameModal.kt$NameModal</ID>
    <ID>ModifierMissing:OnboardingAccounts.kt$BuyPremiumRow</ID>
    <ID>ModifierMissing:OnboardingAccounts.kt$OnboardingAccounts</ID>
    <ID>ModifierMissing:OnboardingAccounts.kt$PremiumInfo</ID>
    <ID>ModifierMissing:OnboardingCategories.kt$OnboardingCategories</ID>
    <ID>ModifierMissing:OnboardingPrivacyTC.kt$OnboardingPrivacyTC</ID>
    <ID>ModifierMissing:OnboardingReportTab.kt$OnboardingReportTab</ID>
    <ID>ModifierMissing:OnboardingSetCurrency.kt$OnboardingSetCurrency</ID>
    <ID>ModifierMissing:OnboardingSetName.kt$OnboardingSetName</ID>
    <ID>ModifierMissing:OnboardingSplashLogin.kt$OnboardingSplashLogin</ID>
    <ID>ModifierMissing:OnboardingToolbar.kt$OnboardingToolbar</ID>
    <ID>ModifierMissing:OnboardingType.kt$OnboardingType</ID>
    <ID>ModifierMissing:PieChart.kt$PieChart</ID>
    <ID>ModifierMissing:PieChartStatisticBottomBar.kt$PieChartStatisticBottomBar</ID>
    <ID>ModifierMissing:PlannedPaymentCard.kt$PlannedPaymentCard</ID>
    <ID>ModifierMissing:PlannedPaymentsBottomBar.kt$PlannedPaymentsBottomBar</ID>
    <ID>ModifierMissing:PlannedPaymentsLazyColumn.kt$PlannedPaymentsLazyColumn</ID>
    <ID>ModifierMissing:PlansSheet.kt$PlansSheet</ID>
    <ID>ModifierMissing:Preview.kt$IvyComponentPreview</ID>
    <ID>ModifierMissing:PrimaryAttributeColumn.kt$PrimaryAttributeColumn</ID>
    <ID>ModifierMissing:ProgressModal.kt$ProgressModal</ID>
    <ID>ModifierMissing:RateItem.kt$RateItem</ID>
    <ID>ModifierMissing:RecurringRuleModal.kt$RecurringRuleModal</ID>
    <ID>ModifierMissing:ReorderModal.kt$ReorderModal</ID>
    <ID>ModifierMissing:ReorderModal.kt$ReorderModalSingleType</ID>
    <ID>ModifierMissing:ScreenTitle.kt$ScreenTitle</ID>
    <ID>ModifierMissing:ScreenTitle.kt$ScreenTitleLarge</ID>
    <ID>ModifierMissing:SearchScreen.kt$SearchInput</ID>
    <ID>ModifierMissing:Spacers.kt$SpacerHor</ID>
    <ID>ModifierMissing:Spacers.kt$SpacerVer</ID>
    <ID>ModifierMissing:Spacers.kt$SpacerWeight</ID>
    <ID>ModifierMissing:SpendeeSteps.kt$SpendeeSteps</ID>
    <ID>ModifierMissing:Suggestions.kt$Suggestions</ID>
    <ID>ModifierMissing:Title.kt$Title</ID>
    <ID>ModifierMissing:Toolbar.kt$Toolbar</ID>
    <ID>ModifierMissing:TransactionCard.kt$TransactionCard</ID>
    <ID>ModifierMissing:TransactionCard.kt$TypeAmountCurrency</ID>
    <ID>ModifierMissing:TransactionDateTime.kt$TransactionDateTime</ID>
    <ID>ModifierMissing:TransactionSectionDivider.kt$SectionDivider</ID>
    <ID>ModifierMissing:UserStatsTab.kt$UserStatsTab</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$BalanceSection</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$ButtonsSection</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$IncomeExpenseSection</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$WalletBalanceWidgetContent</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$WidgetClickableItem</ID>
    <ID>ModifierMissing:WalletCharts.kt$BalanceChart</ID>
    <ID>ModifierMissing:WalletCharts.kt$ChartInfoCard</ID>
    <ID>ModifierNotUsedAtRoot:ItemIcon.kt$modifier = modifier</ID>
    <ID>ModifierNotUsedAtRoot:IvyNameTextFieldValue.kt$modifier = modifier</ID>
    <ID>ModifierReused:ItemIcon.kt$Image( modifier = modifier, painter = painterResource(id = defaultIcon), colorFilter = ColorFilter.tint(tint), contentDescription = "item icon" )</ID>
    <ID>ModifierReused:ItemIcon.kt$ItemIconM( modifier = modifier, iconName = iconName, tint = tint, Default = { Image( modifier = modifier, painter = painterResource(id = defaultIcon), colorFilter = ColorFilter.tint(tint), contentDescription = "item icon" ) } )</ID>
    <ID>ModifierReused:ItemIcon.kt$ItemIconS( modifier = modifier, iconName = iconName, tint = tint, Default = { Image( modifier = modifier, painter = painterResource(id = defaultIcon), colorFilter = ColorFilter.tint(tint), contentDescription = "item icon" ) } )</ID>
    <ID>ModifierWithoutDefault:IvyLineChart.kt$modifier</ID>
    <ID>MultiLineIfElse:AccValueFunctions.kt$AccountValueFunctions$BigDecimal.ONE</ID>
    <ID>MultiLineIfElse:AccValueFunctions.kt$AccountValueFunctions$BigDecimal.ZERO</ID>
    <ID>MultiLineIfElse:AccValueFunctions.kt$AccountValueFunctions$amount</ID>
    <ID>MultiLineIfElse:AccValueFunctions.kt$AccountValueFunctions$toAmount</ID>
    <ID>MultiLineIfElse:AmountFormatting.kt$""</ID>
    <ID>MultiLineIfElse:AmountFormatting.kt$"${localDecimalSeparator()}$decimalPartFormatted"</ID>
    <ID>MultiLineIfElse:AmountFormatting.kt$numberStringWithZeros</ID>
    <ID>MultiLineIfElse:AmountFormatting.kt$numberStringWithZeros.substring(0, lastTrailingZeroIndex)</ID>
    <ID>MultiLineIfElse:AmountModal.kt$""</ID>
    <ID>MultiLineIfElse:AmountModal.kt$"$amount${localDecimalSeparator()}"</ID>
    <ID>MultiLineIfElse:AmountModal.kt$"0${localDecimalSeparator()}"</ID>
    <ID>MultiLineIfElse:AmountModal.kt$"calc_key_${value}"</ID>
    <ID>MultiLineIfElse:AmountModal.kt$"calc_key_decimal_separator"</ID>
    <ID>MultiLineIfElse:AmountModal.kt$"key_${value}"</ID>
    <ID>MultiLineIfElse:AmountModal.kt$"key_decimal_separator"</ID>
    <ID>MultiLineIfElse:AmountModal.kt$initialAmount?.takeIf { it != 0.0 }?.format(currency) ?: ""</ID>
    <ID>MultiLineIfElse:AmountModal.kt$initialAmount?.takeIf { it != 0.0 }?.format(decimalCountMax) ?: ""</ID>
    <ID>MultiLineIfElse:AnalyticsReportScreen.kt$Gradient.solid( Gray )</ID>
    <ID>MultiLineIfElse:AnalyticsReportScreen.kt$GradientIvy</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$Pair(accountsFirst.id, accountsZero.id)</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$Pair(accountsZero.id, accountsFirst.id)</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$Pair(categoryFirst.id, categoryZero.id)</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$Pair(categoryZero.id, categoryFirst.id)</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$error("Couldn't unzip")</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$error("Didn't unzip exactly one file.")</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$return false</ID>
    <ID>MultiLineIfElse:BackupLogic.kt$BackupLogic$return@scopedIOThread emptyList()</ID>
    <ID>MultiLineIfElse:BudgetScreen.kt$""</ID>
    <ID>MultiLineIfElse:BudgetScreen.kt$stringResource( R.string.budget_info_both, categoryBudgetText, appBudgetMaxText )</ID>
    <ID>MultiLineIfElse:BudgetScreen.kt$stringResource(R.string.budget_info, categoryBudgetText, appBudgetMaxText)</ID>
    <ID>MultiLineIfElse:BufferBattery.kt$stringResource( R.string.left_to_spend)</ID>
    <ID>MultiLineIfElse:BufferBattery.kt$stringResource(R.string.buffer_exceeded_by)</ID>
    <ID>MultiLineIfElse:CSVImporter.kt$CSVImporter$0.0</ID>
    <ID>MultiLineIfElse:CSVImporter.kt$CSVImporter$index / rowsCount.toDouble()</ID>
    <ID>MultiLineIfElse:CSVImporter.kt$CSVImporter$index / transactions.size.toDouble()</ID>
    <ID>MultiLineIfElse:CSVImporter.kt$CSVImporter$null</ID>
    <ID>MultiLineIfElse:CSVImporterV2.kt$CSVImporterV2$0.0</ID>
    <ID>MultiLineIfElse:CSVImporterV2.kt$CSVImporterV2$index / rowsCount.toDouble()</ID>
    <ID>MultiLineIfElse:CSVImporterV2.kt$CSVImporterV2$index / transactions.size.toDouble()</ID>
    <ID>MultiLineIfElse:CSVImporterV2.kt$CSVImporterV2$null</ID>
    <ID>MultiLineIfElse:CSVMapper.kt$CSVMapper$TransactionType.EXPENSE</ID>
    <ID>MultiLineIfElse:CSVMapper.kt$CSVMapper$TransactionType.INCOME</ID>
    <ID>MultiLineIfElse:CSVViewModel.kt$CSVViewModel$null</ID>
    <ID>MultiLineIfElse:CatValueFunctions.kt$CategoryValueFunctions$BigDecimal.ZERO</ID>
    <ID>MultiLineIfElse:CategoryIncomeWithAccountFiltersAct.kt$CategoryIncomeWithAccountFiltersAct$accountFilterSet.contains(it.accountId)</ID>
    <ID>MultiLineIfElse:CategoryIncomeWithAccountFiltersAct.kt$CategoryIncomeWithAccountFiltersAct$true</ID>
    <ID>MultiLineIfElse:CategoryModal.kt$stringResource( R.string.create_category )</ID>
    <ID>MultiLineIfElse:CategoryModal.kt$stringResource(R.string.edit_category)</ID>
    <ID>MultiLineIfElse:ChooseCategoryModal.kt$UI.colors.pureInverse</ID>
    <ID>MultiLineIfElse:ChooseCategoryModal.kt$findContrastTextColor(categoryColor)</ID>
    <ID>MultiLineIfElse:ChoosePeriodModal.kt$null</ID>
    <ID>MultiLineIfElse:ChoosePeriodModal.kt$otherEndDateTime ?.toLocalDate() ?.minusDays(1)</ID>
    <ID>MultiLineIfElse:ChoosePeriodModal.kt$otherEndDateTime ?.toLocalDate() ?.plusDays(1)</ID>
    <ID>MultiLineIfElse:Compose.kt$this</ID>
    <ID>MultiLineIfElse:ComposeExt.kt$this</ID>
    <ID>MultiLineIfElse:CurrencyPicker.kt$keyboardShownInsetDp + lastItemSpacer</ID>
    <ID>MultiLineIfElse:CurrencyPicker.kt$lastItemSpacer</ID>
    <ID>MultiLineIfElse:DateExt.kt$"$closeDay, ${this.formatLocal(patternNoWeekDay, zone)}"</ID>
    <ID>MultiLineIfElse:DateExt.kt$this.formatLocal( pattern, zone )</ID>
    <ID>MultiLineIfElse:EditBottomSheet.kt$mutableStateOf("${convertedAmount.format(2)} $convertedAmountCurrencyCode")</ID>
    <ID>MultiLineIfElse:EditBottomSheet.kt$mutableStateOf(null)</ID>
    <ID>MultiLineIfElse:EditTransactionScreen.kt$onAccountChanged(it)</ID>
    <ID>MultiLineIfElse:EditTransactionScreen.kt$stringResource( R.string.pay )</ID>
    <ID>MultiLineIfElse:EditTransactionScreen.kt$stringResource(R.string.get)</ID>
    <ID>MultiLineIfElse:EditTransactionViewModel.kt$EditTransactionViewModel$"* This transaction is associated with Loan : ${loan.name}"</ID>
    <ID>MultiLineIfElse:EditTransactionViewModel.kt$EditTransactionViewModel$"* This transaction is associated with a Loan Record of Loan : ${loan.name}"</ID>
    <ID>MultiLineIfElse:EditTransactionViewModel.kt$EditTransactionViewModel$"Note: This transaction is associated with a Loan Record of Loan : ${loan.name}\n" + "You are trying to change the account associated with the loan record to an account of different currency" + "\n The Loan Record will be re-calculated based on today's currency exchanges rates"</ID>
    <ID>MultiLineIfElse:EditTransactionViewModel.kt$EditTransactionViewModel$CustomExchangeRateState()</ID>
    <ID>MultiLineIfElse:EditTransactionViewModel.kt$EditTransactionViewModel$customExchangeRateState.value.exchangeRate</ID>
    <ID>MultiLineIfElse:EditTransactionViewModel.kt$EditTransactionViewModel$exchangeRatesLogic.convertAmount( baseCurrency = baseUserCurrency, amount = 1.0, fromCurrency = fromAccCurrencyCode, toCurrency = toAccCurrencyCode )</ID>
    <ID>MultiLineIfElse:EditTransactionViewModel.kt$EditTransactionViewModel$return EditTransactionDisplayLoan()</ID>
    <ID>MultiLineIfElse:FoldTransactions.kt$sum</ID>
    <ID>MultiLineIfElse:FoldTransactions.kt$sumTransactionsInternal( valueFunctionArgument = valueFunctionArgument, transactions = transactions.drop(1), valueFunctions = valueFunctions, sum = sum.mapIndexedNel { index, sumValue -&gt; val valueFunction = valueFunctions[index] sumValue + valueFunction(transactions.first(), valueFunctionArgument) } )</ID>
    <ID>MultiLineIfElse:FoldTransactions.kt$sumTransactionsSuspendInternal( valueFunctionArgument = valueFunctionArgument, transactions = transactions.drop(1), valueFunctions = valueFunctions, sum = sum.mapIndexedNelSuspend { index, sumValue -&gt; val valueFunction = valueFunctions[index] sumValue + valueFunction(transactions.first(), valueFunctionArgument) } )</ID>
    <ID>MultiLineIfElse:GitHubBackupCard.kt$LocalContentColor.current</ID>
    <ID>MultiLineIfElse:GitHubBackupCard.kt$MaterialTheme.colorScheme.error</ID>
    <ID>MultiLineIfElse:GitHubBackupViewModel.kt$GitHubBackupViewModel$null</ID>
    <ID>MultiLineIfElse:HomeHeader.kt$onBalanceClick()</ID>
    <ID>MultiLineIfElse:HomeHeader.kt$onHiddenBalanceClick()</ID>
    <ID>MultiLineIfElse:HomeViewModel.kt$HomeViewModel$stateVal()</ID>
    <ID>MultiLineIfElse:ImportResultUI.kt$(result.transactionsImported / result.rowsFound.toDouble()) * 100</ID>
    <ID>MultiLineIfElse:ImportResultUI.kt$0.0</ID>
    <ID>MultiLineIfElse:ImportViewModel.kt$ImportViewModel$restoreCSVFile(fileUri = fileUri, importType = importType)</ID>
    <ID>MultiLineIfElse:IntervalPickerRow.kt$Gradient .solid(UI.colors.medium) .asHorizontalBrush()</ID>
    <ID>MultiLineIfElse:IntervalPickerRow.kt$GradientIvy.asHorizontalBrush()</ID>
    <ID>MultiLineIfElse:ItemIcon.kt$ContentScale.Fit</ID>
    <ID>MultiLineIfElse:ItemIcon.kt$ContentScale.None</ID>
    <ID>MultiLineIfElse:ItemStatisticScreen.kt$MediumBlack.copy(alpha = 0.9f)</ID>
    <ID>MultiLineIfElse:ItemStatisticScreen.kt$MediumWhite.copy(alpha = 0.9f)</ID>
    <ID>MultiLineIfElse:ItemStatisticScreen.kt$balancePrefix( income = income, expenses = expenses )</ID>
    <ID>MultiLineIfElse:ItemStatisticScreen.kt$choosePeriodModal = ChoosePeriodModalData( period = period )</ID>
    <ID>MultiLineIfElse:ItemStatisticScreen.kt$null</ID>
    <ID>MultiLineIfElse:IvyBorderButton.kt$SolidColor(UI.colors.gray)</ID>
    <ID>MultiLineIfElse:IvyBorderButton.kt$backgroundGradient.asHorizontalBrush()</ID>
    <ID>MultiLineIfElse:IvyButton.kt$SolidColor(UI.colors.gray)</ID>
    <ID>MultiLineIfElse:IvyButton.kt$backgroundGradient.asHorizontalBrush()</ID>
    <ID>MultiLineIfElse:IvyCircleButton.kt$backgroundGradient.asHorizontalBrush()</ID>
    <ID>MultiLineIfElse:IvyCircleButton.kt$backgroundGradient.asVerticalBrush()</ID>
    <ID>MultiLineIfElse:IvyTheme.kt$darkColorScheme()</ID>
    <ID>MultiLineIfElse:IvyTheme.kt$lightColorScheme()</ID>
    <ID>MultiLineIfElse:Keyboard.kt$0.dp</ID>
    <ID>MultiLineIfElse:Keyboard.kt$keyboardOnlyWindowInsets().bottom.toDensityDp()</ID>
    <ID>MultiLineIfElse:LTLoanMapper.kt$LTLoanMapper$return@computationThread</ID>
    <ID>MultiLineIfElse:Loan.kt$Loan$stringRes( R.string.lent_uppercase)</ID>
    <ID>MultiLineIfElse:Loan.kt$Loan$stringRes(R.string.borrowed_uppercase)</ID>
    <ID>MultiLineIfElse:LoanDetailsScreen.kt$IvyButton( modifier = Modifier.padding(end = 16.dp, top = 12.dp), backgroundGradient = Gradient.solid(loan.color.toComposeColor()), hasGlow = false, iconTint = contrastColor, text = selectedLoanAccount.name, iconStart = getCustomIconIdS( iconName = selectedLoanAccount.icon, defaultIcon = R.drawable.ic_custom_account_s ), textStyle = UI.typo.c.style( color = contrastColor, fontWeight = FontWeight.ExtraBold ), padding = 8.dp, iconEdgePadding = 10.dp ) { nav.navigateTo( ItemStatistic( accountId = selectedLoanAccount.id, categoryId = null ) ) }</ID>
    <ID>MultiLineIfElse:LoanDetailsScreen.kt$MediumBlack.copy(alpha = 0.9f)</ID>
    <ID>MultiLineIfElse:LoanDetailsScreen.kt$MediumWhite.copy(alpha = 0.9f)</ID>
    <ID>MultiLineIfElse:LoanDetailsScreen.kt$Spacer(Modifier.height(12.dp))</ID>
    <ID>MultiLineIfElse:LoanDetailsScreen.kt$Spacer(Modifier.height(16.dp))</ID>
    <ID>MultiLineIfElse:LoanDetailsViewModel.kt$LoanDetailsViewModel$loanInterestAmtPaid += convertedAmount</ID>
    <ID>MultiLineIfElse:LoanRecordModal.kt$save( loanRecord = initialRecord, noteTextFieldValue = noteTextFieldValue, amount = amount, dateTime = dateTime, loanRecordInterest = loanInterest, selectedAccount = selectedAcc, createLoanRecordTransaction = createLoanRecordTrans, reCalculateAmount = reCalculate, onCreate = onCreate, onEdit = onEdit, dismiss = dismiss, )</ID>
    <ID>MultiLineIfElse:LoanRecordModal.kt$stringResource( R.string.new_record)</ID>
    <ID>MultiLineIfElse:LoanRecordModal.kt$stringResource(R.string.edit_record)</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$if (loanType == LoanType.BORROW) TransactionType.EXPENSE else TransactionType.INCOME</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$if (loanType == LoanType.BORROW) TransactionType.INCOME else TransactionType.EXPENSE</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$ioThread { loanCategory?.let { categoryDao.save(it.toEntity()) } }</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$listOf(transactionDao.findLoanRecordTransaction(loanRecordId!!)).map { it?.toDomain() }</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$null</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$return</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$return existingCategoryId</ID>
    <ID>MultiLineIfElse:LoanTransactionsCore.kt$LoanTransactionsCore$transactionDao.findAllByLoanId(loanId = loanId) .map { it.toDomain() }</ID>
    <ID>MultiLineIfElse:LoanTransactionsLogic.kt$LoanTransactionsLogic$return@computationThread</ID>
    <ID>MultiLineIfElse:MonthPickerModal.kt$UI.colors.pureInverse</ID>
    <ID>MultiLineIfElse:MonthPickerModal.kt$findContrastTextColor(monthColor)</ID>
    <ID>MultiLineIfElse:OnboardingComponents.kt$SolidColor(UI.colors.gray)</ID>
    <ID>MultiLineIfElse:OnboardingComponents.kt$backgroundGradient.asHorizontalBrush()</ID>
    <ID>MultiLineIfElse:PieChart.kt$PieChartView$360 - Math.toDegrees(acos((-centerY * y2) / (d1 * d2)))</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$BigDecimal.ZERO</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$accountIdFilterSet.contains(it.accountId)</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$accountIdFilterSet.contains(it.toAccountId)</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$allAccounts then ::filterExcluded</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$allAccounts thenFilter { accountIdFilterList.contains(it.id) }</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$categoryAmounts then { it.sortedByDescending { ca -&gt; ca.amount } }</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$emptyList()</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$incExpQuad.transferExpense</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$incExpQuad.transferExpense.toDouble()</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$incExpQuad.transferIncome</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$incExpQuad.transferIncome.toDouble()</ID>
    <ID>MultiLineIfElse:PieChartAct.kt$PieChartAct$trans.filter { it.type == type &amp;&amp; it.categoryId == category?.id }</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$GradientGreen</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$UI.colors.pure</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$White</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$gradientExpenses()</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$stringResource( R.string.income )</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$stringResource(R.string.expenses)</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$stringResource(R.string.percent, "0")</ID>
    <ID>MultiLineIfElse:PieChartStatisticScreen.kt$stringResource(R.string.percent, ((amount / totalAmount) * 100).format(2))</ID>
    <ID>MultiLineIfElse:PieChartStatisticViewModel.kt$PieChartStatisticViewModel$ChoosePeriodModalData(period = timePeriod)</ID>
    <ID>MultiLineIfElse:PieChartStatisticViewModel.kt$PieChartStatisticViewModel$SelectedCategory(category = clickedCategory)</ID>
    <ID>MultiLineIfElse:PieChartStatisticViewModel.kt$PieChartStatisticViewModel$null</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$paidTransactions.forEach { paidTransaction -&gt; transactionDao.flagDeleted(paidTransaction.id) }</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$paidTransactions.forEach { paidTransaction -&gt; transactionDao.save(paidTransaction.toEntity()) }</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$transactionDao.flagDeleted(paidTransaction.id)</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$transactionDao.save(paidTransaction.toEntity())</ID>
    <ID>MultiLineIfElse:PlansSheet.kt$UI.colors.pureInverse</ID>
    <ID>MultiLineIfElse:PlansSheet.kt$White</ID>
    <ID>MultiLineIfElse:PlansSheet.kt$null</ID>
    <ID>MultiLineIfElse:ReportScreen.kt$Spacer(Modifier.height(32.dp))</ID>
    <ID>MultiLineIfElse:ReportScreen.kt$nav.navigateTo( PieChartStatistic( type = TransactionType.EXPENSE, transactions = state.transactions, accountList = state.accountIdFilters, treatTransfersAsIncomeExpense = state.treatTransfersAsIncExp ) )</ID>
    <ID>MultiLineIfElse:ReportScreen.kt$nav.navigateTo( PieChartStatistic( type = TransactionType.INCOME, transactions = state.transactions, accountList = state.accountIdFilters, treatTransfersAsIncomeExpense = state.treatTransfersAsIncExp ) )</ID>
    <ID>MultiLineIfElse:RestClient.kt$RestClient.Companion$exception</ID>
    <ID>MultiLineIfElse:RootActivity.kt$RootActivity$viewModel.checkUserInactiveTimeStatus()</ID>
    <ID>MultiLineIfElse:RootActivity.kt$RootActivity$viewModel.startUserInactiveTimeCounter()</ID>
    <ID>MultiLineIfElse:TransactionCard.kt$Orange</ID>
    <ID>MultiLineIfElse:TransactionCard.kt$UI.colors.gray</ID>
    <ID>MultiLineIfElse:TransactionReminderLogic.kt$TransactionReminderLogic$return</ID>
    <ID>MultiLineIfElse:Transactions.kt$Gradient( Black, Black )</ID>
    <ID>MultiLineIfElse:Transactions.kt$Gradient(White, White)</ID>
    <ID>MultiLineIfElse:UtilExt.kt$it.titlecase( Locale.getDefault() )</ID>
    <ID>MultiLineIfElse:UtilExt.kt$it.toString()</ID>
    <ID>MultiLineIfElse:ViewPager.kt$(state.currentPage + 1).coerceAtMost(state.maxPage)</ID>
    <ID>MultiLineIfElse:ViewPager.kt$(state.currentPage - 1).coerceAtLeast(state.minPage)</ID>
    <ID>MultiLineIfElse:ViewPager.kt$1f - abs(currentPageOffset)</ID>
    <ID>MultiLineIfElse:ViewPager.kt$abs(currentPageOffset)</ID>
    <ID>MultiLineIfElse:ViewPager.kt$currentPage</ID>
    <ID>MultiLineIfElse:WalletCharts.kt$accumulator</ID>
    <ID>MultiLineIfElse:WebViewScreen.kt$WebSettingsCompat.FORCE_DARK_OFF</ID>
    <ID>MultiLineIfElse:WebViewScreen.kt$WebSettingsCompat.FORCE_DARK_ON</ID>
    <ID>MultiLineIfElse:ZipUtils.kt$"$it${File.separator}"</ID>
    <ID>MultiLineIfElse:ZipUtils.kt$(file.parent!!).substring( file.parent!!.lastIndexOf("/") ) + "/" + file.name</ID>
    <ID>MultiLineIfElse:ZipUtils.kt$file.name</ID>
    <ID>MultiLineIfElse:ZipUtils.kt$it</ID>
    <ID>MultiLineIfElse:ZipUtils.kt$throw IllegalStateException("Location file must be directory or not exist")</ID>
    <ID>MultipleEmitters:AccountsTab.kt$AccountCard</ID>
    <ID>MultipleEmitters:AmountCurrency.kt$AmountCurrencyB1</ID>
    <ID>MultipleEmitters:AmountCurrency.kt$AmountCurrencyCaption</ID>
    <ID>MultipleEmitters:AmountCurrency.kt$AmountCurrencyH1</ID>
    <ID>MultipleEmitters:AmountModal.kt$AmountKeyboard</ID>
    <ID>MultipleEmitters:BudgetModal.kt$CategoriesRow</ID>
    <ID>MultipleEmitters:BudgetScreen.kt$BudgetItem</ID>
    <ID>MultipleEmitters:CSVScreen.kt$AmountMetadata</ID>
    <ID>MultipleEmitters:CSVScreen.kt$DateMetadataUI</ID>
    <ID>MultipleEmitters:CSVScreen.kt$TypeMetadata</ID>
    <ID>MultipleEmitters:CategoriesScreen.kt$CategoryCard</ID>
    <ID>MultipleEmitters:CategoryCharts.kt$CategoriesChart</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$AllTime</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$ChooseMonth</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$FromToRange</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$LastNPeriod</ID>
    <ID>MultipleEmitters:CurrencyPicker.kt$CurrencyItemCard</ID>
    <ID>MultipleEmitters:CurrencyPicker.kt$LetterDividerItem</ID>
    <ID>MultipleEmitters:DefaultImportSteps.kt$DefaultImportSteps</ID>
    <ID>MultipleEmitters:EditBottomSheet.kt$Account</ID>
    <ID>MultipleEmitters:EditBottomSheet.kt$AddAccount</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$AccountsFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$AmountFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$CategoriesFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$FilterDivider</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$KeywordsFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$ListItem</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$PeriodFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$TypeFilter</ID>
    <ID>MultipleEmitters:FinancistoSteps.kt$FinancistoSteps</ID>
    <ID>MultipleEmitters:HistoryDateDivider.kt$HistoryDateDivider</ID>
    <ID>MultipleEmitters:HomeHeader.kt$HomeHeader</ID>
    <ID>MultipleEmitters:HomeMoreMenu.kt$QuickAccess</ID>
    <ID>MultipleEmitters:ImportFrom.kt$ImportOption</ID>
    <ID>MultipleEmitters:ImportInstructions.kt$UploadFileStep</ID>
    <ID>MultipleEmitters:IvyBorderButton.kt$IconEnd</ID>
    <ID>MultipleEmitters:IvyBorderButton.kt$IconStart</ID>
    <ID>MultipleEmitters:IvyButton.kt$IconEnd</ID>
    <ID>MultipleEmitters:IvyButton.kt$IconStart</ID>
    <ID>MultipleEmitters:IvyColorPicker.kt$ColorItem</ID>
    <ID>MultipleEmitters:IvyWalletSteps.kt$IvyWalletSteps</ID>
    <ID>MultipleEmitters:LoanDetailsScreen.kt$NoLoanRecordsEmptyState</ID>
    <ID>MultipleEmitters:LoanModal.kt$Account</ID>
    <ID>MultipleEmitters:LoanModal.kt$AddAccount</ID>
    <ID>MultipleEmitters:LoanRecordModal.kt$Account</ID>
    <ID>MultipleEmitters:LoanRecordModal.kt$AddAccount</ID>
    <ID>MultipleEmitters:MainBottomBar.kt$AddExpenseButton</ID>
    <ID>MultipleEmitters:MainBottomBar.kt$AddIncomeButton</ID>
    <ID>MultipleEmitters:MainBottomBar.kt$AddTransferButton</ID>
    <ID>MultipleEmitters:MonefySteps.kt$MonefySteps</ID>
    <ID>MultipleEmitters:MoneyManagerPraseSteps.kt$MoneyManagerPraseSteps</ID>
    <ID>MultipleEmitters:OnboardingSplashLogin.kt$LocalAccountExplanation</ID>
    <ID>MultipleEmitters:PlansSheet.kt$LongNoticeText</ID>
    <ID>MultipleEmitters:RecurringRuleModal.kt$MultipleTimes</ID>
    <ID>MultipleEmitters:RecurringRuleModal.kt$OneTime</ID>
    <ID>MultipleEmitters:ServerStopScreen.kt$Content</ID>
    <ID>MultipleEmitters:SettingsScreen.kt$AccountCardLocalAccount</ID>
    <ID>MultipleEmitters:SettingsScreen.kt$AccountCardUser</ID>
    <ID>MultipleEmitters:SettingsScreen.kt$SettingsSectionDivider</ID>
    <ID>MultipleEmitters:SpendeeSteps.kt$SpendeeSteps</ID>
    <ID>MultipleEmitters:TransactionCard.kt$TransactionCard</ID>
    <ID>MultipleEmitters:TransactionSectionDivider.kt$SectionDivider</ID>
    <ID>MultipleEmitters:WalletCharts.kt$BalanceChart</ID>
    <ID>MutableParams:HomeTab.kt$hideBalanceRowState</ID>
    <ID>NestedBlockDepth:AccValueFunctions.kt$AccountValueFunctions$fun balance( transaction: Transaction, accountId: UUID ): BigDecimal</ID>
    <ID>NewLineAtEndOfFile:AccValueFunctions.kt$com.ivy.wallet.domain.pure.transaction.AccValueFunctions.kt</ID>
    <ID>NewLineAtEndOfFile:Account.kt$com.ivy.wallet.domain.data.core.Account.kt</ID>
    <ID>NewLineAtEndOfFile:AccountBalance.kt$com.ivy.wallet.ui.onboarding.model.AccountBalance.kt</ID>
    <ID>NewLineAtEndOfFile:AccountByIdAct.kt$com.ivy.wallet.domain.action.account.AccountByIdAct.kt</ID>
    <ID>NewLineAtEndOfFile:AccountCharts.kt$com.ivy.wallet.ui.charts.charts.AccountCharts.kt</ID>
    <ID>NewLineAtEndOfFile:AccountCreator.kt$com.ivy.wallet.domain.deprecated.logic.AccountCreator.kt</ID>
    <ID>NewLineAtEndOfFile:AccountDao.kt$com.ivy.wallet.io.persistence.dao.AccountDao.kt</ID>
    <ID>NewLineAtEndOfFile:AccountData.kt$com.ivy.wallet.ui.accounts.AccountData.kt</ID>
    <ID>NewLineAtEndOfFile:AccountDataAct.kt$com.ivy.wallet.domain.action.viewmodel.account.AccountDataAct.kt</ID>
    <ID>NewLineAtEndOfFile:AccountEntity.kt$com.ivy.wallet.io.persistence.data.AccountEntity.kt</ID>
    <ID>NewLineAtEndOfFile:AccountFunctions.kt$com.ivy.wallet.domain.pure.account.AccountFunctions.kt</ID>
    <ID>NewLineAtEndOfFile:AccountModal.kt$com.ivy.wallet.ui.theme.modal.edit.AccountModal.kt</ID>
    <ID>NewLineAtEndOfFile:AccountService.kt$com.ivy.wallet.io.network.service.AccountService.kt</ID>
    <ID>NewLineAtEndOfFile:AccountState.kt$com.ivy.wallet.ui.accounts.AccountState.kt</ID>
    <ID>NewLineAtEndOfFile:AccountSync.kt$com.ivy.wallet.domain.deprecated.sync.item.AccountSync.kt</ID>
    <ID>NewLineAtEndOfFile:AccountUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.AccountUploader.kt</ID>
    <ID>NewLineAtEndOfFile:AccountsAct.kt$com.ivy.wallet.domain.action.account.AccountsAct.kt</ID>
    <ID>NewLineAtEndOfFile:AccountsEvent.kt$com.ivy.wallet.ui.accounts.AccountsEvent.kt</ID>
    <ID>NewLineAtEndOfFile:AccountsResponse.kt$com.ivy.wallet.io.network.request.account.AccountsResponse.kt</ID>
    <ID>NewLineAtEndOfFile:AccountsUpdatedEvent.kt$com.ivy.wallet.domain.event.AccountsUpdatedEvent.kt</ID>
    <ID>NewLineAtEndOfFile:AccountsViewModel.kt$com.ivy.wallet.ui.accounts.AccountsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:ActivityResultExt.kt$com.ivy.wallet.utils.ActivityResultExt.kt</ID>
    <ID>NewLineAtEndOfFile:AddKeywordModal.kt$com.ivy.wallet.ui.theme.modal.AddKeywordModal.kt</ID>
    <ID>NewLineAtEndOfFile:AddPrimaryAttributeButton.kt$com.ivy.wallet.ui.theme.components.AddPrimaryAttributeButton.kt</ID>
    <ID>NewLineAtEndOfFile:AddRateModal.kt$com.ivy.wallet.ui.exchangerates.modal.AddRateModal.kt</ID>
    <ID>NewLineAtEndOfFile:AddTransactionWidget.kt$com.ivy.wallet.ui.widget.AddTransactionWidget.kt</ID>
    <ID>NewLineAtEndOfFile:AddTransactionWidgetClick.kt$com.ivy.wallet.ui.widget.AddTransactionWidgetClick.kt</ID>
    <ID>NewLineAtEndOfFile:AddTransactionWidgetCompact.kt$com.ivy.wallet.ui.widget.AddTransactionWidgetCompact.kt</ID>
    <ID>NewLineAtEndOfFile:AllTrnsAct.kt$com.ivy.wallet.domain.action.transaction.AllTrnsAct.kt</ID>
    <ID>NewLineAtEndOfFile:AmountCurrency.kt$com.ivy.wallet.ui.theme.wallet.AmountCurrency.kt</ID>
    <ID>NewLineAtEndOfFile:AmountFormatting.kt$com.ivy.wallet.utils.AmountFormatting.kt</ID>
    <ID>NewLineAtEndOfFile:AnalyticsEvent.kt$com.ivy.wallet.domain.data.analytics.AnalyticsEvent.kt</ID>
    <ID>NewLineAtEndOfFile:AnalyticsReportResponse.kt$com.ivy.wallet.io.network.request.analytics.AnalyticsReportResponse.kt</ID>
    <ID>NewLineAtEndOfFile:AnalyticsReportViewModel.kt$com.ivy.wallet.ui.analytics.AnalyticsReportViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:AnalyticsService.kt$com.ivy.wallet.io.network.service.AnalyticsService.kt</ID>
    <ID>NewLineAtEndOfFile:AnalyticsTab.kt$com.ivy.wallet.ui.analytics.AnalyticsTab.kt</ID>
    <ID>NewLineAtEndOfFile:Android.kt$com.ivy.design.utils.Android.kt</ID>
    <ID>NewLineAtEndOfFile:Animation.kt$com.ivy.design.utils.Animation.kt</ID>
    <ID>NewLineAtEndOfFile:AppBaseData.kt$com.ivy.wallet.ui.data.AppBaseData.kt</ID>
    <ID>NewLineAtEndOfFile:AppModuleDI.kt$com.ivy.wallet.AppModuleDI.kt</ID>
    <ID>NewLineAtEndOfFile:AuthProviderType.kt$com.ivy.wallet.domain.data.AuthProviderType.kt</ID>
    <ID>NewLineAtEndOfFile:AuthResponse.kt$com.ivy.wallet.io.network.request.auth.AuthResponse.kt</ID>
    <ID>NewLineAtEndOfFile:AuthService.kt$com.ivy.wallet.io.network.service.AuthService.kt</ID>
    <ID>NewLineAtEndOfFile:BackBottomBar.kt$com.ivy.wallet.ui.theme.components.BackBottomBar.kt</ID>
    <ID>NewLineAtEndOfFile:Background.kt$com.ivy.design.l1_buildingBlocks.data.Background.kt</ID>
    <ID>NewLineAtEndOfFile:BackupLogic.kt$com.ivy.wallet.domain.deprecated.logic.zip.BackupLogic.kt</ID>
    <ID>NewLineAtEndOfFile:BalanceChartAct.kt$com.ivy.wallet.domain.action.charts.BalanceChartAct.kt</ID>
    <ID>NewLineAtEndOfFile:BalanceRow.kt$com.ivy.wallet.ui.theme.components.BalanceRow.kt</ID>
    <ID>NewLineAtEndOfFile:BalanceViewModel.kt$com.ivy.wallet.ui.balance.BalanceViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:BaseCurrencyAct.kt$com.ivy.wallet.domain.action.settings.BaseCurrencyAct.kt</ID>
    <ID>NewLineAtEndOfFile:Budget.kt$com.ivy.wallet.domain.data.core.Budget.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetBattery.kt$com.ivy.wallet.ui.theme.components.BudgetBattery.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetCreator.kt$com.ivy.wallet.domain.deprecated.logic.BudgetCreator.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetDTO.kt$com.ivy.wallet.io.network.data.BudgetDTO.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetDao.kt$com.ivy.wallet.io.persistence.dao.BudgetDao.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetEntity.kt$com.ivy.wallet.io.persistence.data.BudgetEntity.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetModal.kt$com.ivy.wallet.ui.theme.modal.BudgetModal.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetService.kt$com.ivy.wallet.io.network.service.BudgetService.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetSync.kt$com.ivy.wallet.domain.deprecated.sync.item.BudgetSync.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.BudgetUploader.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetViewModel.kt$com.ivy.wallet.ui.budget.BudgetViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetsAct.kt$com.ivy.wallet.domain.action.budget.BudgetsAct.kt</ID>
    <ID>NewLineAtEndOfFile:BudgetsResponse.kt$com.ivy.wallet.io.network.request.budget.BudgetsResponse.kt</ID>
    <ID>NewLineAtEndOfFile:BufferBattery.kt$com.ivy.wallet.ui.theme.components.BufferBattery.kt</ID>
    <ID>NewLineAtEndOfFile:BufferInfo.kt$com.ivy.wallet.ui.data.BufferInfo.kt</ID>
    <ID>NewLineAtEndOfFile:BufferModal.kt$com.ivy.wallet.ui.theme.modal.BufferModal.kt</ID>
    <ID>NewLineAtEndOfFile:ButtonWithIcon.kt$com.ivy.design.l2_components.ButtonWithIcon.kt</ID>
    <ID>NewLineAtEndOfFile:CSVEvent.kt$com.ivy.wallet.ui.csv.CSVEvent.kt</ID>
    <ID>NewLineAtEndOfFile:CSVImporter.kt$com.ivy.wallet.domain.deprecated.logic.csv.CSVImporter.kt</ID>
    <ID>NewLineAtEndOfFile:CSVImporterV2.kt$com.ivy.wallet.ui.csv.domain.CSVImporterV2.kt</ID>
    <ID>NewLineAtEndOfFile:CSVMapper.kt$com.ivy.wallet.domain.deprecated.logic.csv.CSVMapper.kt</ID>
    <ID>NewLineAtEndOfFile:CSVNormalizer.kt$com.ivy.wallet.domain.deprecated.logic.csv.CSVNormalizer.kt</ID>
    <ID>NewLineAtEndOfFile:CSVRow.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.CSVRow.kt</ID>
    <ID>NewLineAtEndOfFile:CSVState.kt$com.ivy.wallet.ui.csv.CSVState.kt</ID>
    <ID>NewLineAtEndOfFile:CSVViewModel.kt$com.ivy.wallet.ui.csv.CSVViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:CalcAccBalanceAct.kt$com.ivy.wallet.domain.action.account.CalcAccBalanceAct.kt</ID>
    <ID>NewLineAtEndOfFile:CalcAccIncomeExpenseAct.kt$com.ivy.wallet.domain.action.account.CalcAccIncomeExpenseAct.kt</ID>
    <ID>NewLineAtEndOfFile:CalcBufferDiffAct.kt$com.ivy.wallet.domain.action.settings.CalcBufferDiffAct.kt</ID>
    <ID>NewLineAtEndOfFile:CalcIncomeExpenseAct.kt$com.ivy.wallet.domain.action.wallet.CalcIncomeExpenseAct.kt</ID>
    <ID>NewLineAtEndOfFile:CalcTrnsIncomeExpenseAct.kt$com.ivy.wallet.domain.action.transaction.CalcTrnsIncomeExpenseAct.kt</ID>
    <ID>NewLineAtEndOfFile:CalculatorModal.kt$com.ivy.wallet.ui.theme.modal.edit.CalculatorModal.kt</ID>
    <ID>NewLineAtEndOfFile:Card.kt$com.ivy.design.l3_ivyComponents.Card.kt</ID>
    <ID>NewLineAtEndOfFile:CatValueFunctions.kt$com.ivy.wallet.domain.pure.transaction.CatValueFunctions.kt</ID>
    <ID>NewLineAtEndOfFile:CategoriesAct.kt$com.ivy.wallet.domain.action.category.CategoriesAct.kt</ID>
    <ID>NewLineAtEndOfFile:CategoriesScreen.kt$com.ivy.wallet.ui.category.CategoriesScreen.kt</ID>
    <ID>NewLineAtEndOfFile:Category.kt$com.ivy.wallet.domain.data.core.Category.kt</ID>
    <ID>NewLineAtEndOfFile:Category.kt$com.ivy.wallet.ui.edit.core.Category.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryAmount.kt$com.ivy.wallet.ui.statistic.level1.CategoryAmount.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryByIdAct.kt$com.ivy.wallet.domain.action.category.CategoryByIdAct.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryCreator.kt$com.ivy.wallet.domain.deprecated.logic.CategoryCreator.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryDTO.kt$com.ivy.wallet.io.network.data.CategoryDTO.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryDao.kt$com.ivy.wallet.io.persistence.dao.CategoryDao.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryData.kt$com.ivy.wallet.ui.category.CategoryData.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryEntity.kt$com.ivy.wallet.io.persistence.data.CategoryEntity.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryIncomeWithAccountFiltersAct.kt$com.ivy.wallet.domain.action.category.CategoryIncomeWithAccountFiltersAct.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryModal.kt$com.ivy.wallet.ui.theme.modal.edit.CategoryModal.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryService.kt$com.ivy.wallet.io.network.service.CategoryService.kt</ID>
    <ID>NewLineAtEndOfFile:CategorySync.kt$com.ivy.wallet.domain.deprecated.sync.item.CategorySync.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryTrnsBetweenAct.kt$com.ivy.wallet.domain.action.category.CategoryTrnsBetweenAct.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.CategoryUploader.kt</ID>
    <ID>NewLineAtEndOfFile:CategoryValues.kt$com.ivy.wallet.ui.charts.CategoryValues.kt</ID>
    <ID>NewLineAtEndOfFile:ChangeTransactionTypeModal.kt$com.ivy.wallet.ui.theme.components.ChangeTransactionTypeModal.kt</ID>
    <ID>NewLineAtEndOfFile:ChartPeriod.kt$com.ivy.wallet.domain.pure.charts.ChartPeriod.kt</ID>
    <ID>NewLineAtEndOfFile:ChartType.kt$com.ivy.wallet.ui.charts.ChartType.kt</ID>
    <ID>NewLineAtEndOfFile:ChartsCore.kt$com.ivy.wallet.domain.pure.charts.ChartsCore.kt</ID>
    <ID>NewLineAtEndOfFile:CheckEmailRequest.kt$com.ivy.wallet.io.network.request.auth.CheckEmailRequest.kt</ID>
    <ID>NewLineAtEndOfFile:CheckEmailResponse.kt$com.ivy.wallet.io.network.request.auth.CheckEmailResponse.kt</ID>
    <ID>NewLineAtEndOfFile:Checkbox.kt$com.ivy.design.l2_components.Checkbox.kt</ID>
    <ID>NewLineAtEndOfFile:ChooseCategoryModal.kt$com.ivy.wallet.ui.theme.modal.edit.ChooseCategoryModal.kt</ID>
    <ID>NewLineAtEndOfFile:ChoosePeriodModal.kt$com.ivy.wallet.ui.theme.modal.ChoosePeriodModal.kt</ID>
    <ID>NewLineAtEndOfFile:ChooseStartDateOfMonthModal.kt$com.ivy.wallet.ui.theme.modal.ChooseStartDateOfMonthModal.kt</ID>
    <ID>NewLineAtEndOfFile:CircleButtons.kt$com.ivy.wallet.ui.theme.components.CircleButtons.kt</ID>
    <ID>NewLineAtEndOfFile:ClosedTimeRange.kt$com.ivy.wallet.domain.pure.data.ClosedTimeRange.kt</ID>
    <ID>NewLineAtEndOfFile:ColoredItemCard.kt$com.ivy.design.l4_patterns.ColoredItemCard.kt</ID>
    <ID>NewLineAtEndOfFile:Colors.kt$com.ivy.design.l0_system.Colors.kt</ID>
    <ID>NewLineAtEndOfFile:ColumnRoot.kt$com.ivy.design.l1_buildingBlocks.ColumnRoot.kt</ID>
    <ID>NewLineAtEndOfFile:Compose.kt$com.ivy.design.utils.Compose.kt</ID>
    <ID>NewLineAtEndOfFile:ComposeExt.kt$com.ivy.wallet.utils.ComposeExt.kt</ID>
    <ID>NewLineAtEndOfFile:Constants.kt$com.ivy.wallet.Constants.kt</ID>
    <ID>NewLineAtEndOfFile:CreateAccountData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateAccountData.kt</ID>
    <ID>NewLineAtEndOfFile:CreateBudgetData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateBudgetData.kt</ID>
    <ID>NewLineAtEndOfFile:CreateCategoryData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateCategoryData.kt</ID>
    <ID>NewLineAtEndOfFile:CreateLoanData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateLoanData.kt</ID>
    <ID>NewLineAtEndOfFile:CreateLoanRecordData.kt$com.ivy.wallet.domain.deprecated.logic.model.CreateLoanRecordData.kt</ID>
    <ID>NewLineAtEndOfFile:CrupdateBudgetRequest.kt$com.ivy.wallet.io.network.request.budget.CrupdateBudgetRequest.kt</ID>
    <ID>NewLineAtEndOfFile:CurrencyModal.kt$com.ivy.wallet.ui.theme.modal.CurrencyModal.kt</ID>
    <ID>NewLineAtEndOfFile:CurrencyPicker.kt$com.ivy.wallet.ui.theme.components.CurrencyPicker.kt</ID>
    <ID>NewLineAtEndOfFile:CustomExchangeRateCard.kt$com.ivy.wallet.ui.theme.components.CustomExchangeRateCard.kt</ID>
    <ID>NewLineAtEndOfFile:CustomExchangeRateState.kt$com.ivy.wallet.domain.data.CustomExchangeRateState.kt</ID>
    <ID>NewLineAtEndOfFile:CustomerJourney.kt$com.ivy.wallet.ui.home.CustomerJourney.kt</ID>
    <ID>NewLineAtEndOfFile:CustomerJourneyCardData.kt$com.ivy.wallet.domain.deprecated.logic.model.CustomerJourneyCardData.kt</ID>
    <ID>NewLineAtEndOfFile:DataCircle.kt$com.ivy.wallet.ui.analytics.DataCircle.kt</ID>
    <ID>NewLineAtEndOfFile:DateExt.kt$com.ivy.wallet.utils.DateExt.kt</ID>
    <ID>NewLineAtEndOfFile:DefaultImportSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.DefaultImportSteps.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteAccountRequest.kt$com.ivy.wallet.io.network.request.account.DeleteAccountRequest.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteAllData.kt$com.ivy.design.l4_patterns.delete.DeleteAllData.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteBudgetRequest.kt$com.ivy.wallet.io.network.request.budget.DeleteBudgetRequest.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteButton.kt$com.ivy.wallet.ui.theme.components.DeleteButton.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteItem.kt$com.ivy.design.l4_patterns.delete.DeleteItem.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteLoanRecordRequest.kt$com.ivy.wallet.io.network.request.loan.DeleteLoanRecordRequest.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteLoanRequest.kt$com.ivy.wallet.io.network.request.loan.DeleteLoanRequest.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteModal.kt$com.ivy.wallet.ui.theme.modal.DeleteModal.kt</ID>
    <ID>NewLineAtEndOfFile:DeletePlannedPaymentRuleRequest.kt$com.ivy.wallet.io.network.request.planned.DeletePlannedPaymentRuleRequest.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteTransactionRequest.kt$com.ivy.wallet.io.network.request.transaction.DeleteTransactionRequest.kt</ID>
    <ID>NewLineAtEndOfFile:DeleteWalletCategoryRequest.kt$com.ivy.wallet.io.network.request.category.DeleteWalletCategoryRequest.kt</ID>
    <ID>NewLineAtEndOfFile:Description.kt$com.ivy.wallet.ui.edit.core.Description.kt</ID>
    <ID>NewLineAtEndOfFile:DescriptionModal.kt$com.ivy.wallet.ui.theme.modal.edit.DescriptionModal.kt</ID>
    <ID>NewLineAtEndOfFile:DisplayBudget.kt$com.ivy.wallet.ui.budget.model.DisplayBudget.kt</ID>
    <ID>NewLineAtEndOfFile:DisplayLoan.kt$com.ivy.wallet.ui.loan.data.DisplayLoan.kt</ID>
    <ID>NewLineAtEndOfFile:Dividers.kt$com.ivy.design.l1_buildingBlocks.Dividers.kt</ID>
    <ID>NewLineAtEndOfFile:DonateEvent.kt$com.ivy.wallet.ui.donate.DonateEvent.kt</ID>
    <ID>NewLineAtEndOfFile:DonateModal.kt$com.ivy.wallet.ui.donate.DonateModal.kt</ID>
    <ID>NewLineAtEndOfFile:DonateOption.kt$com.ivy.wallet.ui.donate.data.DonateOption.kt</ID>
    <ID>NewLineAtEndOfFile:DonateScreen.kt$com.ivy.wallet.ui.donate.DonateScreen.kt</ID>
    <ID>NewLineAtEndOfFile:DonateState.kt$com.ivy.wallet.ui.donate.DonateState.kt</ID>
    <ID>NewLineAtEndOfFile:DonateViewModel.kt$com.ivy.wallet.ui.donate.DonateViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:DueDate.kt$com.ivy.wallet.ui.edit.core.DueDate.kt</ID>
    <ID>NewLineAtEndOfFile:DueSection.kt$com.ivy.wallet.ui.data.DueSection.kt</ID>
    <ID>NewLineAtEndOfFile:DueTrnsAct.kt$com.ivy.wallet.domain.action.transaction.DueTrnsAct.kt</ID>
    <ID>NewLineAtEndOfFile:DueTrnsInfoAct.kt$com.ivy.wallet.domain.action.viewmodel.home.DueTrnsInfoAct.kt</ID>
    <ID>NewLineAtEndOfFile:EditBottomSheet.kt$com.ivy.wallet.ui.edit.core.EditBottomSheet.kt</ID>
    <ID>NewLineAtEndOfFile:EditContentCard.kt$com.ivy.design.l4_patterns.EditContentCard.kt</ID>
    <ID>NewLineAtEndOfFile:EditLoanRecordData.kt$com.ivy.wallet.domain.deprecated.logic.model.EditLoanRecordData.kt</ID>
    <ID>NewLineAtEndOfFile:EditPlannedScreen.kt$com.ivy.wallet.ui.planned.edit.EditPlannedScreen.kt</ID>
    <ID>NewLineAtEndOfFile:EditPlannedViewModel.kt$com.ivy.wallet.ui.planned.edit.EditPlannedViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:EditTransactionScreen.kt$com.ivy.wallet.ui.edit.EditTransactionScreen.kt</ID>
    <ID>NewLineAtEndOfFile:EditTransactionViewModel.kt$com.ivy.wallet.ui.edit.EditTransactionViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:EmailState.kt$com.ivy.wallet.domain.data.EmailState.kt</ID>
    <ID>NewLineAtEndOfFile:EncryptedSharedPrefs.kt$com.ivy.wallet.data.EncryptedSharedPrefs.kt</ID>
    <ID>NewLineAtEndOfFile:ErrorCode.kt$com.ivy.wallet.io.network.error.ErrorCode.kt</ID>
    <ID>NewLineAtEndOfFile:ExampleInstrumentedTest.kt$com.ivy.design.ExampleInstrumentedTest.kt</ID>
    <ID>NewLineAtEndOfFile:Exchange.kt$com.ivy.wallet.domain.pure.exchange.Exchange.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRate.kt$com.ivy.wallet.domain.data.core.ExchangeRate.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRateDTO.kt$com.ivy.wallet.io.network.data.ExchangeRateDTO.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRateDao.kt$com.ivy.wallet.io.persistence.dao.ExchangeRateDao.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRateEntity.kt$com.ivy.wallet.io.persistence.data.ExchangeRateEntity.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRatesLogic.kt$com.ivy.wallet.domain.deprecated.logic.currency.ExchangeRatesLogic.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRatesResponse.kt$com.ivy.wallet.io.network.request.currency.ExchangeRatesResponse.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRatesScreen.kt$com.ivy.wallet.ui.exchangerates.ExchangeRatesScreen.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRatesService.kt$com.ivy.wallet.io.network.service.ExchangeRatesService.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeRatesViewModel.kt$com.ivy.wallet.ui.exchangerates.ExchangeRatesViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:ExchangeTrns.kt$com.ivy.wallet.domain.pure.exchange.ExchangeTrns.kt</ID>
    <ID>NewLineAtEndOfFile:ExpImagesService.kt$com.ivy.wallet.io.network.service.ExpImagesService.kt</ID>
    <ID>NewLineAtEndOfFile:ExportCSVLogic.kt$com.ivy.wallet.domain.deprecated.logic.csv.ExportCSVLogic.kt</ID>
    <ID>NewLineAtEndOfFile:FAB.kt$com.ivy.design.l3_ivyComponents.button.FAB.kt</ID>
    <ID>NewLineAtEndOfFile:FetchAllTrnsFromServerAct.kt$com.ivy.wallet.domain.action.transaction.FetchAllTrnsFromServerAct.kt</ID>
    <ID>NewLineAtEndOfFile:FetchImagesAct.kt$com.ivy.wallet.domain.action.viewmodel.experiment.FetchImagesAct.kt</ID>
    <ID>NewLineAtEndOfFile:FileUtil.kt$com.ivy.wallet.utils.FileUtil.kt</ID>
    <ID>NewLineAtEndOfFile:FilterOverlay.kt$com.ivy.wallet.ui.reports.FilterOverlay.kt</ID>
    <ID>NewLineAtEndOfFile:FinancistoSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.FinancistoSteps.kt</ID>
    <ID>NewLineAtEndOfFile:FirebaseExt.kt$com.ivy.wallet.utils.FirebaseExt.kt</ID>
    <ID>NewLineAtEndOfFile:FoldTransactions.kt$com.ivy.wallet.domain.pure.transaction.FoldTransactions.kt</ID>
    <ID>NewLineAtEndOfFile:FortuneCitySteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.FortuneCitySteps.kt</ID>
    <ID>NewLineAtEndOfFile:FromToTimeRange.kt$com.ivy.wallet.ui.onboarding.model.FromToTimeRange.kt</ID>
    <ID>NewLineAtEndOfFile:GesturesExt.kt$com.ivy.wallet.utils.GesturesExt.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubBackup.kt$com.ivy.wallet.backup.github.GitHubBackup.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubBackupCard.kt$com.ivy.wallet.backup.github.ui.GitHubBackupCard.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubBackupScreen.kt$com.ivy.wallet.backup.github.ui.GitHubBackupScreen.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubBackupStatus.kt$com.ivy.wallet.backup.github.ui.GitHubBackupStatus.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubBackupViewModel.kt$com.ivy.wallet.backup.github.ui.GitHubBackupViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubBackupViewState.kt$com.ivy.wallet.backup.github.ui.GitHubBackupViewState.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubClient.kt$com.ivy.wallet.backup.github.GitHubClient.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubCredentials.kt$com.ivy.wallet.backup.github.GitHubCredentials.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubPATMigration.kt$com.ivy.wallet.migrations.impl.GitHubPATMigration.kt</ID>
    <ID>NewLineAtEndOfFile:GitHubWorkerMigration.kt$com.ivy.wallet.migrations.impl.GitHubWorkerMigration.kt</ID>
    <ID>NewLineAtEndOfFile:GoogleSignInRequest.kt$com.ivy.wallet.io.network.request.auth.GoogleSignInRequest.kt</ID>
    <ID>NewLineAtEndOfFile:GradientCut.kt$com.ivy.wallet.ui.theme.components.GradientCut.kt</ID>
    <ID>NewLineAtEndOfFile:GsonTypeAdapters.kt$com.ivy.wallet.io.network.GsonTypeAdapters.kt</ID>
    <ID>NewLineAtEndOfFile:HasTrnsAct.kt$com.ivy.wallet.domain.action.viewmodel.home.HasTrnsAct.kt</ID>
    <ID>NewLineAtEndOfFile:Health.kt$com.ivy.wallet.ui.analytics.model.Health.kt</ID>
    <ID>NewLineAtEndOfFile:HealthTab.kt$com.ivy.wallet.ui.analytics.tab.HealthTab.kt</ID>
    <ID>NewLineAtEndOfFile:HistoryDateDivider.kt$com.ivy.wallet.ui.component.transaction.HistoryDateDivider.kt</ID>
    <ID>NewLineAtEndOfFile:HistoryTrnsAct.kt$com.ivy.wallet.domain.action.transaction.HistoryTrnsAct.kt</ID>
    <ID>NewLineAtEndOfFile:HistoryWithDateDivsAct.kt$com.ivy.wallet.domain.action.transaction.HistoryWithDateDivsAct.kt</ID>
    <ID>NewLineAtEndOfFile:HomeEvent.kt$com.ivy.wallet.ui.home.HomeEvent.kt</ID>
    <ID>NewLineAtEndOfFile:HomeHeader.kt$com.ivy.wallet.ui.home.HomeHeader.kt</ID>
    <ID>NewLineAtEndOfFile:HomeMoreMenu.kt$com.ivy.wallet.ui.home.HomeMoreMenu.kt</ID>
    <ID>NewLineAtEndOfFile:HomeState.kt$com.ivy.wallet.ui.home.HomeState.kt</ID>
    <ID>NewLineAtEndOfFile:HomeTab.kt$com.ivy.wallet.ui.home.HomeTab.kt</ID>
    <ID>NewLineAtEndOfFile:HomeViewModel.kt$com.ivy.wallet.ui.home.HomeViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:IconButton.kt$com.ivy.design.l2_components.IconButton.kt</ID>
    <ID>NewLineAtEndOfFile:ImportFrom.kt$com.ivy.wallet.ui.csvimport.flow.ImportFrom.kt</ID>
    <ID>NewLineAtEndOfFile:ImportProcessing.kt$com.ivy.wallet.ui.csvimport.flow.ImportProcessing.kt</ID>
    <ID>NewLineAtEndOfFile:ImportResult.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.ImportResult.kt</ID>
    <ID>NewLineAtEndOfFile:ImportResultUI.kt$com.ivy.wallet.ui.csvimport.flow.ImportResultUI.kt</ID>
    <ID>NewLineAtEndOfFile:ImportStep.kt$com.ivy.wallet.ui.csvimport.ImportStep.kt</ID>
    <ID>NewLineAtEndOfFile:ImportType.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.ImportType.kt</ID>
    <ID>NewLineAtEndOfFile:ImportViewModel.kt$com.ivy.wallet.ui.csvimport.ImportViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:IncomeExpensePair.kt$com.ivy.wallet.domain.pure.data.IncomeExpensePair.kt</ID>
    <ID>NewLineAtEndOfFile:InitiateResetPasswordRequest.kt$com.ivy.wallet.io.network.request.auth.InitiateResetPasswordRequest.kt</ID>
    <ID>NewLineAtEndOfFile:InitiateResetPasswordResponse.kt$com.ivy.wallet.io.network.request.auth.InitiateResetPasswordResponse.kt</ID>
    <ID>NewLineAtEndOfFile:InputError.kt$com.ivy.wallet.utils.InputError.kt</ID>
    <ID>NewLineAtEndOfFile:InputField.kt$com.ivy.design.l2_components.InputField.kt</ID>
    <ID>NewLineAtEndOfFile:Insets.kt$com.ivy.design.utils.Insets.kt</ID>
    <ID>NewLineAtEndOfFile:IntervalPickerRow.kt$com.ivy.wallet.ui.theme.components.IntervalPickerRow.kt</ID>
    <ID>NewLineAtEndOfFile:IntervalType.kt$com.ivy.wallet.domain.data.IntervalType.kt</ID>
    <ID>NewLineAtEndOfFile:ItemDetailsScreen.kt$com.ivy.design.l5_concept.ItemDetailsScreen.kt</ID>
    <ID>NewLineAtEndOfFile:ItemIcon.kt$com.ivy.wallet.ui.theme.components.ItemIcon.kt</ID>
    <ID>NewLineAtEndOfFile:ItemStatisticScreen.kt$com.ivy.wallet.ui.statistic.level2.ItemStatisticScreen.kt</ID>
    <ID>NewLineAtEndOfFile:ItemStatisticViewModel.kt$com.ivy.wallet.ui.statistic.level2.ItemStatisticViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:IvyAnalytics.kt$com.ivy.wallet.io.network.IvyAnalytics.kt</ID>
    <ID>NewLineAtEndOfFile:IvyAndroidApp.kt$com.ivy.wallet.IvyAndroidApp.kt</ID>
    <ID>NewLineAtEndOfFile:IvyAnimation.kt$com.ivy.wallet.utils.IvyAnimation.kt</ID>
    <ID>NewLineAtEndOfFile:IvyBasicTextField.kt$com.ivy.wallet.ui.theme.components.IvyBasicTextField.kt</ID>
    <ID>NewLineAtEndOfFile:IvyBilling.kt$com.ivy.wallet.android.billing.IvyBilling.kt</ID>
    <ID>NewLineAtEndOfFile:IvyBorderButton.kt$com.ivy.wallet.ui.theme.components.IvyBorderButton.kt</ID>
    <ID>NewLineAtEndOfFile:IvyButton.kt$com.ivy.wallet.ui.theme.components.IvyButton.kt</ID>
    <ID>NewLineAtEndOfFile:IvyCheckbox.kt$com.ivy.wallet.ui.theme.components.IvyCheckbox.kt</ID>
    <ID>NewLineAtEndOfFile:IvyChecklistTextField.kt$com.ivy.wallet.ui.theme.components.IvyChecklistTextField.kt</ID>
    <ID>NewLineAtEndOfFile:IvyCircleButton.kt$com.ivy.wallet.ui.theme.components.IvyCircleButton.kt</ID>
    <ID>NewLineAtEndOfFile:IvyColorPicker.kt$com.ivy.wallet.ui.theme.components.IvyColorPicker.kt</ID>
    <ID>NewLineAtEndOfFile:IvyColors.kt$com.ivy.design.l0_system.IvyColors.kt</ID>
    <ID>NewLineAtEndOfFile:IvyColors.kt$com.ivy.wallet.ui.theme.IvyColors.kt</ID>
    <ID>NewLineAtEndOfFile:IvyComponents.kt$com.ivy.wallet.ui.theme.components.IvyComponents.kt</ID>
    <ID>NewLineAtEndOfFile:IvyContext.kt$com.ivy.design.IvyContext.kt</ID>
    <ID>NewLineAtEndOfFile:IvyDataStore.kt$com.ivy.wallet.io.persistence.datastore.IvyDataStore.kt</ID>
    <ID>NewLineAtEndOfFile:IvyDescriptionTextField.kt$com.ivy.wallet.ui.theme.components.IvyDescriptionTextField.kt</ID>
    <ID>NewLineAtEndOfFile:IvyDesign.kt$com.ivy.design.api.IvyDesign.kt</ID>
    <ID>NewLineAtEndOfFile:IvyDivider.kt$com.ivy.wallet.ui.theme.components.IvyDivider.kt</ID>
    <ID>NewLineAtEndOfFile:IvyDividerDot.kt$com.ivy.wallet.ui.theme.components.IvyDividerDot.kt</ID>
    <ID>NewLineAtEndOfFile:IvyDomainUtils.kt$com.ivy.wallet.domain.pure.util.IvyDomainUtils.kt</ID>
    <ID>NewLineAtEndOfFile:IvyFileReader.kt$com.ivy.wallet.domain.deprecated.logic.csv.IvyFileReader.kt</ID>
    <ID>NewLineAtEndOfFile:IvyIcon.kt$com.ivy.design.l1_buildingBlocks.IvyIcon.kt</ID>
    <ID>NewLineAtEndOfFile:IvyIcon.kt$com.ivy.wallet.ui.theme.components.IvyIcon.kt</ID>
    <ID>NewLineAtEndOfFile:IvyLineChart.kt$com.ivy.wallet.ui.theme.components.charts.linechart.IvyLineChart.kt</ID>
    <ID>NewLineAtEndOfFile:IvyModal.kt$com.ivy.wallet.ui.theme.modal.IvyModal.kt</ID>
    <ID>NewLineAtEndOfFile:IvyModalComponents.kt$com.ivy.wallet.ui.theme.modal.IvyModalComponents.kt</ID>
    <ID>NewLineAtEndOfFile:IvyNameTextFieldValue.kt$com.ivy.wallet.ui.theme.components.IvyNameTextFieldValue.kt</ID>
    <ID>NewLineAtEndOfFile:IvyNotification.kt$com.ivy.wallet.android.notification.IvyNotification.kt</ID>
    <ID>NewLineAtEndOfFile:IvyNotificationChannel.kt$com.ivy.wallet.android.notification.IvyNotificationChannel.kt</ID>
    <ID>NewLineAtEndOfFile:IvyOutlinedButton.kt$com.ivy.wallet.ui.theme.components.IvyOutlinedButton.kt</ID>
    <ID>NewLineAtEndOfFile:IvyOutlinedTextField.kt$com.ivy.wallet.ui.theme.components.IvyOutlinedTextField.kt</ID>
    <ID>NewLineAtEndOfFile:IvyPadding.kt$com.ivy.design.l1_buildingBlocks.data.IvyPadding.kt</ID>
    <ID>NewLineAtEndOfFile:IvyRoomDatabase.kt$com.ivy.wallet.io.persistence.IvyRoomDatabase.kt</ID>
    <ID>NewLineAtEndOfFile:IvySession.kt$com.ivy.wallet.io.network.IvySession.kt</ID>
    <ID>NewLineAtEndOfFile:IvyShapes.kt$com.ivy.design.l0_system.IvyShapes.kt</ID>
    <ID>NewLineAtEndOfFile:IvySwitch.kt$com.ivy.wallet.ui.theme.components.IvySwitch.kt</ID>
    <ID>NewLineAtEndOfFile:IvySync.kt$com.ivy.wallet.domain.deprecated.sync.IvySync.kt</ID>
    <ID>NewLineAtEndOfFile:IvyText.kt$com.ivy.design.l1_buildingBlocks.IvyText.kt</ID>
    <ID>NewLineAtEndOfFile:IvyTitleTextField.kt$com.ivy.wallet.ui.theme.components.IvyTitleTextField.kt</ID>
    <ID>NewLineAtEndOfFile:IvyToolbar.kt$com.ivy.wallet.ui.theme.components.IvyToolbar.kt</ID>
    <ID>NewLineAtEndOfFile:IvyTypography.kt$com.ivy.design.l0_system.IvyTypography.kt</ID>
    <ID>NewLineAtEndOfFile:IvyUI.kt$com.ivy.design.api.IvyUI.kt</ID>
    <ID>NewLineAtEndOfFile:IvyViewPager.kt$com.ivy.wallet.ui.theme.components.IvyViewPager.kt</ID>
    <ID>NewLineAtEndOfFile:IvyWalletCompleteData.kt$com.ivy.wallet.domain.data.IvyWalletCompleteData.kt</ID>
    <ID>NewLineAtEndOfFile:IvyWalletDatastore.kt$com.ivy.wallet.data.IvyWalletDatastore.kt</ID>
    <ID>NewLineAtEndOfFile:IvyWalletDesign.kt$com.ivy.design.api.systems.IvyWalletDesign.kt</ID>
    <ID>NewLineAtEndOfFile:IvyWalletSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.IvyWalletSteps.kt</ID>
    <ID>NewLineAtEndOfFile:KPIs.kt$com.ivy.wallet.ui.analytics.model.KPIs.kt</ID>
    <ID>NewLineAtEndOfFile:KPIsTab.kt$com.ivy.wallet.ui.analytics.tab.KPIsTab.kt</ID>
    <ID>NewLineAtEndOfFile:KTWMoneyMangerSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.KTWMoneyMangerSteps.kt</ID>
    <ID>NewLineAtEndOfFile:Keyboard.kt$com.ivy.design.utils.Keyboard.kt</ID>
    <ID>NewLineAtEndOfFile:KtorClient.kt$com.ivy.wallet.backup.ktor.KtorClient.kt</ID>
    <ID>NewLineAtEndOfFile:KtorClientModule.kt$com.ivy.wallet.backup.ktor.KtorClientModule.kt</ID>
    <ID>NewLineAtEndOfFile:LTLoanRecordMapper.kt$com.ivy.wallet.domain.deprecated.logic.loantrasactions.LTLoanRecordMapper.kt</ID>
    <ID>NewLineAtEndOfFile:LastNTimeRange.kt$com.ivy.wallet.ui.onboarding.model.LastNTimeRange.kt</ID>
    <ID>NewLineAtEndOfFile:Loan.kt$com.ivy.wallet.domain.data.core.Loan.kt</ID>
    <ID>NewLineAtEndOfFile:LoanBottomBar.kt$com.ivy.wallet.ui.loan.LoanBottomBar.kt</ID>
    <ID>NewLineAtEndOfFile:LoanByIdAct.kt$com.ivy.wallet.domain.action.loan.LoanByIdAct.kt</ID>
    <ID>NewLineAtEndOfFile:LoanCreator.kt$com.ivy.wallet.domain.deprecated.logic.LoanCreator.kt</ID>
    <ID>NewLineAtEndOfFile:LoanDTO.kt$com.ivy.wallet.io.network.data.LoanDTO.kt</ID>
    <ID>NewLineAtEndOfFile:LoanDao.kt$com.ivy.wallet.io.persistence.dao.LoanDao.kt</ID>
    <ID>NewLineAtEndOfFile:LoanDetailsScreen.kt$com.ivy.wallet.ui.loandetails.LoanDetailsScreen.kt</ID>
    <ID>NewLineAtEndOfFile:LoanDetailsViewModel.kt$com.ivy.wallet.ui.loandetails.LoanDetailsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:LoanEntity.kt$com.ivy.wallet.io.persistence.data.LoanEntity.kt</ID>
    <ID>NewLineAtEndOfFile:LoanModal.kt$com.ivy.wallet.ui.theme.modal.LoanModal.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecord.kt$com.ivy.wallet.domain.data.core.LoanRecord.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordCreator.kt$com.ivy.wallet.domain.deprecated.logic.LoanRecordCreator.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordDTO.kt$com.ivy.wallet.io.network.data.LoanRecordDTO.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordDao.kt$com.ivy.wallet.io.persistence.dao.LoanRecordDao.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordEntity.kt$com.ivy.wallet.io.persistence.data.LoanRecordEntity.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordModal.kt$com.ivy.wallet.ui.theme.modal.LoanRecordModal.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordSync.kt$com.ivy.wallet.domain.deprecated.sync.item.LoanRecordSync.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.LoanRecordUploader.kt</ID>
    <ID>NewLineAtEndOfFile:LoanRecordsResponse.kt$com.ivy.wallet.io.network.request.loan.LoanRecordsResponse.kt</ID>
    <ID>NewLineAtEndOfFile:LoanService.kt$com.ivy.wallet.io.network.service.LoanService.kt</ID>
    <ID>NewLineAtEndOfFile:LoanSync.kt$com.ivy.wallet.domain.deprecated.sync.item.LoanSync.kt</ID>
    <ID>NewLineAtEndOfFile:LoanTransactionsCore.kt$com.ivy.wallet.domain.deprecated.logic.loantrasactions.LoanTransactionsCore.kt</ID>
    <ID>NewLineAtEndOfFile:LoanType.kt$com.ivy.wallet.domain.data.LoanType.kt</ID>
    <ID>NewLineAtEndOfFile:LoanUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.LoanUploader.kt</ID>
    <ID>NewLineAtEndOfFile:LoanViewModel.kt$com.ivy.wallet.ui.loan.LoanViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:LoansAct.kt$com.ivy.wallet.domain.action.loan.LoansAct.kt</ID>
    <ID>NewLineAtEndOfFile:LoansResponse.kt$com.ivy.wallet.io.network.request.loan.LoansResponse.kt</ID>
    <ID>NewLineAtEndOfFile:LoansScreen.kt$com.ivy.wallet.ui.loan.LoansScreen.kt</ID>
    <ID>NewLineAtEndOfFile:LogEventRequest.kt$com.ivy.wallet.io.network.request.analytics.LogEventRequest.kt</ID>
    <ID>NewLineAtEndOfFile:LogoutLogic.kt$com.ivy.wallet.domain.deprecated.logic.LogoutLogic.kt</ID>
    <ID>NewLineAtEndOfFile:MVVMExt.kt$com.ivy.wallet.utils.MVVMExt.kt</ID>
    <ID>NewLineAtEndOfFile:MainBottomBar.kt$com.ivy.wallet.ui.main.MainBottomBar.kt</ID>
    <ID>NewLineAtEndOfFile:MainScreen.kt$com.ivy.wallet.ui.main.MainScreen.kt</ID>
    <ID>NewLineAtEndOfFile:MainTab.kt$com.ivy.wallet.ui.main.MainTab.kt</ID>
    <ID>NewLineAtEndOfFile:MainViewModel.kt$com.ivy.wallet.ui.main.MainViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Migration.kt$com.ivy.wallet.migrations.Migration.kt</ID>
    <ID>NewLineAtEndOfFile:Migration105to106_TrnRecurringRules.kt$com.ivy.wallet.io.persistence.migration.Migration105to106_TrnRecurringRules.kt</ID>
    <ID>NewLineAtEndOfFile:Migration106to107_Wishlist.kt$com.ivy.wallet.io.persistence.migration.Migration106to107_Wishlist.kt</ID>
    <ID>NewLineAtEndOfFile:Migration107to108_Sync.kt$com.ivy.wallet.io.persistence.migration.Migration107to108_Sync.kt</ID>
    <ID>NewLineAtEndOfFile:Migration108to109_Users.kt$com.ivy.wallet.io.persistence.migration.Migration108to109_Users.kt</ID>
    <ID>NewLineAtEndOfFile:Migration109to110_PlannedPayments.kt$com.ivy.wallet.io.persistence.migration.Migration109to110_PlannedPayments.kt</ID>
    <ID>NewLineAtEndOfFile:Migration110to111_PlannedPaymentRule.kt$com.ivy.wallet.io.persistence.migration.Migration110to111_PlannedPaymentRule.kt</ID>
    <ID>NewLineAtEndOfFile:Migration111to112_User_testUser.kt$com.ivy.wallet.io.persistence.migration.Migration111to112_User_testUser.kt</ID>
    <ID>NewLineAtEndOfFile:Migration112to113_ExchangeRates.kt$com.ivy.wallet.io.persistence.migration.Migration112to113_ExchangeRates.kt</ID>
    <ID>NewLineAtEndOfFile:Migration113to114_Multi_Currency.kt$com.ivy.wallet.io.persistence.migration.Migration113to114_Multi_Currency.kt</ID>
    <ID>NewLineAtEndOfFile:Migration114to115_Category_Account_Icons.kt$com.ivy.wallet.io.persistence.migration.Migration114to115_Category_Account_Icons.kt</ID>
    <ID>NewLineAtEndOfFile:Migration115to116_Account_Include_In_Balance.kt$com.ivy.wallet.io.persistence.migration.Migration115to116_Account_Include_In_Balance.kt</ID>
    <ID>NewLineAtEndOfFile:Migration116to117_SalteEdgeIntgration.kt$com.ivy.wallet.io.persistence.migration.Migration116to117_SalteEdgeIntgration.kt</ID>
    <ID>NewLineAtEndOfFile:Migration117to118_Budgets.kt$com.ivy.wallet.io.persistence.migration.Migration117to118_Budgets.kt</ID>
    <ID>NewLineAtEndOfFile:Migration118to119_Loans.kt$com.ivy.wallet.io.persistence.migration.Migration118to119_Loans.kt</ID>
    <ID>NewLineAtEndOfFile:Migration119to120_LoanTransactions.kt$com.ivy.wallet.io.persistence.migration.Migration119to120_LoanTransactions.kt</ID>
    <ID>NewLineAtEndOfFile:Migration120to121_DropWishlistItem.kt$com.ivy.wallet.io.persistence.migration.Migration120to121_DropWishlistItem.kt</ID>
    <ID>NewLineAtEndOfFile:Migration122to123_ExchangeRates.kt$com.ivy.wallet.io.persistence.migration.Migration122to123_ExchangeRates.kt</ID>
    <ID>NewLineAtEndOfFile:MigrationsManager.kt$com.ivy.wallet.migrations.MigrationsManager.kt</ID>
    <ID>NewLineAtEndOfFile:MonefySteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.MonefySteps.kt</ID>
    <ID>NewLineAtEndOfFile:MoneyManagerPraseSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.MoneyManagerPraseSteps.kt</ID>
    <ID>NewLineAtEndOfFile:Month.kt$com.ivy.wallet.ui.theme.modal.model.Month.kt</ID>
    <ID>NewLineAtEndOfFile:MonthPickerModal.kt$com.ivy.wallet.ui.theme.modal.MonthPickerModal.kt</ID>
    <ID>NewLineAtEndOfFile:MoreInfo.kt$com.ivy.design.l4_patterns.MoreInfo.kt</ID>
    <ID>NewLineAtEndOfFile:MoreMenu.kt$com.ivy.design.l4_patterns.MoreMenu.kt</ID>
    <ID>NewLineAtEndOfFile:NameModal.kt$com.ivy.wallet.ui.theme.modal.NameModal.kt</ID>
    <ID>NewLineAtEndOfFile:NetworkError.kt$com.ivy.wallet.io.network.error.NetworkError.kt</ID>
    <ID>NewLineAtEndOfFile:NewEditScreenPref.kt$com.ivy.wallet.domain.data.preference.NewEditScreenPref.kt</ID>
    <ID>NewLineAtEndOfFile:NotificationService.kt$com.ivy.wallet.android.notification.NotificationService.kt</ID>
    <ID>NewLineAtEndOfFile:NukeService.kt$com.ivy.wallet.io.network.service.NukeService.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingAccounts.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingAccounts.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingCategories.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingCategories.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingComponents.kt$com.ivy.wallet.ui.theme.components.OnboardingComponents.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingPrivacyTC.kt$com.ivy.wallet.ui.onboarding.steps.archived.OnboardingPrivacyTC.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingProgressSlider.kt$com.ivy.wallet.ui.onboarding.components.OnboardingProgressSlider.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingReport.kt$com.ivy.wallet.ui.analytics.model.OnboardingReport.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingReportTab.kt$com.ivy.wallet.ui.analytics.tab.OnboardingReportTab.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingRouter.kt$com.ivy.wallet.ui.onboarding.viewmodel.OnboardingRouter.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingScreen.kt$com.ivy.wallet.ui.onboarding.OnboardingScreen.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingSetCurrency.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingSetCurrency.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingSetName.kt$com.ivy.wallet.ui.onboarding.steps.archived.OnboardingSetName.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingSplashLogin.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingSplashLogin.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingState.kt$com.ivy.wallet.ui.onboarding.OnboardingState.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingToolbar.kt$com.ivy.wallet.ui.onboarding.components.OnboardingToolbar.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingType.kt$com.ivy.wallet.ui.onboarding.steps.OnboardingType.kt</ID>
    <ID>NewLineAtEndOfFile:OnboardingViewModel.kt$com.ivy.wallet.ui.onboarding.viewmodel.OnboardingViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:OneMoneySteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.OneMoneySteps.kt</ID>
    <ID>NewLineAtEndOfFile:OpResult.kt$com.ivy.wallet.utils.OpResult.kt</ID>
    <ID>NewLineAtEndOfFile:OpenIssueRequest.kt$com.ivy.wallet.io.network.request.github.OpenIssueRequest.kt</ID>
    <ID>NewLineAtEndOfFile:OpenIssueResponse.kt$com.ivy.wallet.io.network.request.github.OpenIssueResponse.kt</ID>
    <ID>NewLineAtEndOfFile:OverdueAct.kt$com.ivy.wallet.domain.action.viewmodel.home.OverdueAct.kt</ID>
    <ID>NewLineAtEndOfFile:ParseFields.kt$com.ivy.wallet.ui.csv.domain.ParseFields.kt</ID>
    <ID>NewLineAtEndOfFile:ParseStatus.kt$com.ivy.wallet.ui.csv.domain.ParseStatus.kt</ID>
    <ID>NewLineAtEndOfFile:PaywallLogic.kt$com.ivy.wallet.domain.deprecated.logic.PaywallLogic.kt</ID>
    <ID>NewLineAtEndOfFile:PaywallReason.kt$com.ivy.wallet.ui.paywall.PaywallReason.kt</ID>
    <ID>NewLineAtEndOfFile:PaywallViewModel.kt$com.ivy.wallet.ui.paywall.PaywallViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:PeriodSelector.kt$com.ivy.wallet.ui.theme.wallet.PeriodSelector.kt</ID>
    <ID>NewLineAtEndOfFile:PieChart.kt$com.ivy.wallet.ui.statistic.level1.PieChart.kt</ID>
    <ID>NewLineAtEndOfFile:PieChartAct.kt$com.ivy.wallet.domain.action.charts.PieChartAct.kt</ID>
    <ID>NewLineAtEndOfFile:PieChartStatisticBottomBar.kt$com.ivy.wallet.ui.statistic.level1.PieChartStatisticBottomBar.kt</ID>
    <ID>NewLineAtEndOfFile:PieChartStatisticViewModel.kt$com.ivy.wallet.ui.statistic.level1.PieChartStatisticViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Plan.kt$com.ivy.wallet.android.billing.Plan.kt</ID>
    <ID>NewLineAtEndOfFile:PlanType.kt$com.ivy.wallet.android.billing.PlanType.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentRule.kt$com.ivy.wallet.domain.data.core.PlannedPaymentRule.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentRuleDTO.kt$com.ivy.wallet.io.network.data.PlannedPaymentRuleDTO.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentRuleDao.kt$com.ivy.wallet.io.persistence.dao.PlannedPaymentRuleDao.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentRuleEntity.kt$com.ivy.wallet.io.persistence.data.PlannedPaymentRuleEntity.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentRuleService.kt$com.ivy.wallet.io.network.service.PlannedPaymentRuleService.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentRuleUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.PlannedPaymentRuleUploader.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentRulesResponse.kt$com.ivy.wallet.io.network.request.planned.PlannedPaymentRulesResponse.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentSync.kt$com.ivy.wallet.domain.deprecated.sync.item.PlannedPaymentSync.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentsBottomBar.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsBottomBar.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentsGenerator.kt$com.ivy.wallet.domain.deprecated.logic.PlannedPaymentsGenerator.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentsLazyColumn.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsLazyColumn.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentsLogic.kt$com.ivy.wallet.domain.deprecated.logic.PlannedPaymentsLogic.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentsScreen.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsScreen.kt</ID>
    <ID>NewLineAtEndOfFile:PlannedPaymentsViewModel.kt$com.ivy.wallet.ui.planned.list.PlannedPaymentsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:PlansSheet.kt$com.ivy.wallet.ui.paywall.PlansSheet.kt</ID>
    <ID>NewLineAtEndOfFile:Preference.kt$com.ivy.wallet.domain.data.preference.Preference.kt</ID>
    <ID>NewLineAtEndOfFile:PreferenceAct.kt$com.ivy.wallet.domain.action.settings.preference.PreferenceAct.kt</ID>
    <ID>NewLineAtEndOfFile:Preview.kt$com.ivy.design.utils.Preview.kt</ID>
    <ID>NewLineAtEndOfFile:PrimaryAttributeColumn.kt$com.ivy.wallet.ui.edit.PrimaryAttributeColumn.kt</ID>
    <ID>NewLineAtEndOfFile:ProgressBar.kt$com.ivy.wallet.ui.theme.components.ProgressBar.kt</ID>
    <ID>NewLineAtEndOfFile:ProgressModal.kt$com.ivy.wallet.ui.theme.modal.ProgressModal.kt</ID>
    <ID>NewLineAtEndOfFile:PropertyTestExample.kt$com.ivy.wallet.PropertyTestExample.kt</ID>
    <ID>NewLineAtEndOfFile:RateItem.kt$com.ivy.wallet.ui.exchangerates.component.RateItem.kt</ID>
    <ID>NewLineAtEndOfFile:RateUi.kt$com.ivy.wallet.ui.exchangerates.data.RateUi.kt</ID>
    <ID>NewLineAtEndOfFile:RatesEvent.kt$com.ivy.wallet.ui.exchangerates.RatesEvent.kt</ID>
    <ID>NewLineAtEndOfFile:RatesState.kt$com.ivy.wallet.ui.exchangerates.RatesState.kt</ID>
    <ID>NewLineAtEndOfFile:RecurringRule.kt$com.ivy.wallet.ui.planned.edit.RecurringRule.kt</ID>
    <ID>NewLineAtEndOfFile:RecurringRuleModal.kt$com.ivy.wallet.ui.theme.modal.RecurringRuleModal.kt</ID>
    <ID>NewLineAtEndOfFile:ReorderModal.kt$com.ivy.design.l4_patterns.ReorderModal.kt</ID>
    <ID>NewLineAtEndOfFile:ReorderModal.kt$com.ivy.wallet.ui.theme.components.ReorderModal.kt</ID>
    <ID>NewLineAtEndOfFile:Reorderable.kt$com.ivy.wallet.domain.data.Reorderable.kt</ID>
    <ID>NewLineAtEndOfFile:ReportFilter.kt$com.ivy.wallet.ui.reports.ReportFilter.kt</ID>
    <ID>NewLineAtEndOfFile:ReportScreen.kt$com.ivy.wallet.ui.reports.ReportScreen.kt</ID>
    <ID>NewLineAtEndOfFile:ReportScreenEvent.kt$com.ivy.wallet.ui.reports.ReportScreenEvent.kt</ID>
    <ID>NewLineAtEndOfFile:ReportScreenState.kt$com.ivy.wallet.ui.reports.ReportScreenState.kt</ID>
    <ID>NewLineAtEndOfFile:ReportViewModel.kt$com.ivy.wallet.ui.reports.ReportViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:ResetPasswordRequest.kt$com.ivy.wallet.io.network.request.auth.ResetPasswordRequest.kt</ID>
    <ID>NewLineAtEndOfFile:RestClient.kt$com.ivy.wallet.io.network.RestClient.kt</ID>
    <ID>NewLineAtEndOfFile:RestError.kt$com.ivy.wallet.io.network.error.RestError.kt</ID>
    <ID>NewLineAtEndOfFile:RoomTypeConverters.kt$com.ivy.wallet.io.persistence.RoomTypeConverters.kt</ID>
    <ID>NewLineAtEndOfFile:RootActivity.kt$com.ivy.wallet.ui.RootActivity.kt</ID>
    <ID>NewLineAtEndOfFile:RootViewModel.kt$com.ivy.wallet.ui.RootViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:RowMapping.kt$com.ivy.wallet.domain.deprecated.logic.csv.model.RowMapping.kt</ID>
    <ID>NewLineAtEndOfFile:SaveTrnLocallyAct.kt$com.ivy.wallet.domain.action.viewmodel.transaction.SaveTrnLocallyAct.kt</ID>
    <ID>NewLineAtEndOfFile:ScreenTitle.kt$com.ivy.design.l3_ivyComponents.ScreenTitle.kt</ID>
    <ID>NewLineAtEndOfFile:SearchScreen.kt$com.ivy.wallet.ui.search.SearchScreen.kt</ID>
    <ID>NewLineAtEndOfFile:SearchViewModel.kt$com.ivy.wallet.ui.search.SearchViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:SelectedCategory.kt$com.ivy.wallet.ui.statistic.level1.SelectedCategory.kt</ID>
    <ID>NewLineAtEndOfFile:ServerStopScreen.kt$com.ivy.wallet.ui.serverstop.ServerStopScreen.kt</ID>
    <ID>NewLineAtEndOfFile:ServerStopState.kt$com.ivy.wallet.ui.serverstop.ServerStopState.kt</ID>
    <ID>NewLineAtEndOfFile:ServerStopViewModel.kt$com.ivy.wallet.ui.serverstop.ServerStopViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:SetPreferenceAct.kt$com.ivy.wallet.domain.action.settings.preference.SetPreferenceAct.kt</ID>
    <ID>NewLineAtEndOfFile:Settings.kt$com.ivy.wallet.domain.data.core.Settings.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsAct.kt$com.ivy.wallet.domain.action.settings.SettingsAct.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsDTO.kt$com.ivy.wallet.io.network.data.SettingsDTO.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsDao.kt$com.ivy.wallet.io.persistence.dao.SettingsDao.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsEntity.kt$com.ivy.wallet.io.persistence.data.SettingsEntity.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsScreen.kt$com.ivy.wallet.ui.settings.SettingsScreen.kt</ID>
    <ID>NewLineAtEndOfFile:SettingsViewModel.kt$com.ivy.wallet.ui.settings.SettingsViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Shapes.kt$com.ivy.design.l1_buildingBlocks.Shapes.kt</ID>
    <ID>NewLineAtEndOfFile:SharedPrefs.kt$com.ivy.wallet.io.persistence.SharedPrefs.kt</ID>
    <ID>NewLineAtEndOfFile:ShortAmountTest.kt$com.ivy.wallet.ShortAmountTest.kt</ID>
    <ID>NewLineAtEndOfFile:ShouldHideBalanceAct.kt$com.ivy.wallet.domain.action.viewmodel.home.ShouldHideBalanceAct.kt</ID>
    <ID>NewLineAtEndOfFile:SignInRequest.kt$com.ivy.wallet.io.network.request.auth.SignInRequest.kt</ID>
    <ID>NewLineAtEndOfFile:SignUpRequest.kt$com.ivy.wallet.io.network.request.auth.SignUpRequest.kt</ID>
    <ID>NewLineAtEndOfFile:SmallTrnsPref.kt$com.ivy.wallet.domain.data.preference.SmallTrnsPref.kt</ID>
    <ID>NewLineAtEndOfFile:SmartTitleSuggestionsLogic.kt$com.ivy.wallet.domain.deprecated.logic.SmartTitleSuggestionsLogic.kt</ID>
    <ID>NewLineAtEndOfFile:SortOrder.kt$com.ivy.wallet.domain.data.SortOrder.kt</ID>
    <ID>NewLineAtEndOfFile:Spacers.kt$com.ivy.design.l1_buildingBlocks.Spacers.kt</ID>
    <ID>NewLineAtEndOfFile:SpendeeSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.SpendeeSteps.kt</ID>
    <ID>NewLineAtEndOfFile:StartDayOfMonthAct.kt$com.ivy.wallet.domain.action.global.StartDayOfMonthAct.kt</ID>
    <ID>NewLineAtEndOfFile:Suggestions.kt$com.ivy.wallet.ui.onboarding.components.Suggestions.kt</ID>
    <ID>NewLineAtEndOfFile:Switch.kt$com.ivy.design.l2_components.Switch.kt</ID>
    <ID>NewLineAtEndOfFile:SyncExchangeRatesAct.kt$com.ivy.wallet.domain.action.exchange.SyncExchangeRatesAct.kt</ID>
    <ID>NewLineAtEndOfFile:TestScreen.kt$com.ivy.wallet.ui.test.TestScreen.kt</ID>
    <ID>NewLineAtEndOfFile:TestViewModel.kt$com.ivy.wallet.ui.test.TestViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:Theme.kt$com.ivy.design.l0_system.Theme.kt</ID>
    <ID>NewLineAtEndOfFile:TimePeriod.kt$com.ivy.wallet.ui.onboarding.model.TimePeriod.kt</ID>
    <ID>NewLineAtEndOfFile:TimeValue.kt$com.ivy.wallet.ui.charts.TimeValue.kt</ID>
    <ID>NewLineAtEndOfFile:Title.kt$com.ivy.wallet.ui.edit.core.Title.kt</ID>
    <ID>NewLineAtEndOfFile:Transaction.kt$com.ivy.wallet.domain.data.core.Transaction.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionCard.kt$com.ivy.wallet.ui.component.transaction.TransactionCard.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionDTO.kt$com.ivy.wallet.io.network.data.TransactionDTO.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionDao.kt$com.ivy.wallet.io.persistence.dao.TransactionDao.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionDateTime.kt$com.ivy.wallet.ui.edit.TransactionDateTime.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionEntity.kt$com.ivy.wallet.io.persistence.data.TransactionEntity.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionHistoryDateDivider.kt$com.ivy.wallet.domain.data.TransactionHistoryDateDivider.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionHistoryItem.kt$com.ivy.wallet.domain.data.TransactionHistoryItem.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionReminderLogic.kt$com.ivy.wallet.domain.deprecated.logic.notification.TransactionReminderLogic.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionReminderWorker.kt$com.ivy.wallet.domain.deprecated.logic.notification.TransactionReminderWorker.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionSectionDivider.kt$com.ivy.wallet.ui.component.transaction.TransactionSectionDivider.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionService.kt$com.ivy.wallet.io.network.service.TransactionService.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionSync.kt$com.ivy.wallet.domain.deprecated.sync.item.TransactionSync.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionType.kt$com.ivy.wallet.domain.data.TransactionType.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionUploader.kt$com.ivy.wallet.domain.deprecated.sync.uploader.TransactionUploader.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionViewModel.kt$com.ivy.wallet.ui.transaction.TransactionViewModel.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionsDividerLine.kt$com.ivy.wallet.ui.component.transaction.TransactionsDividerLine.kt</ID>
    <ID>NewLineAtEndOfFile:TransactionsResponse.kt$com.ivy.wallet.io.network.request.transaction.TransactionsResponse.kt</ID>
    <ID>NewLineAtEndOfFile:TrnByIdAct.kt$com.ivy.wallet.domain.action.transaction.TrnByIdAct.kt</ID>
    <ID>NewLineAtEndOfFile:TrnDate.kt$com.ivy.wallet.ui.transaction.data.TrnDate.kt</ID>
    <ID>NewLineAtEndOfFile:TrnDateDividers.kt$com.ivy.wallet.domain.pure.transaction.TrnDateDividers.kt</ID>
    <ID>NewLineAtEndOfFile:TrnEvent.kt$com.ivy.wallet.ui.transaction.TrnEvent.kt</ID>
    <ID>NewLineAtEndOfFile:TrnExchangeRate.kt$com.ivy.wallet.ui.transaction.data.TrnExchangeRate.kt</ID>
    <ID>NewLineAtEndOfFile:TrnFunctions.kt$com.ivy.wallet.domain.pure.transaction.TrnFunctions.kt</ID>
    <ID>NewLineAtEndOfFile:TrnState.kt$com.ivy.wallet.ui.transaction.TrnState.kt</ID>
    <ID>NewLineAtEndOfFile:TrnsWithDateDivsAct.kt$com.ivy.wallet.domain.action.transaction.TrnsWithDateDivsAct.kt</ID>
    <ID>NewLineAtEndOfFile:TrnsWithRangeAndAccFiltersAct.kt$com.ivy.wallet.domain.action.transaction.TrnsWithRangeAndAccFiltersAct.kt</ID>
    <ID>NewLineAtEndOfFile:TypographyExt.kt$com.ivy.design.l0_system.TypographyExt.kt</ID>
    <ID>NewLineAtEndOfFile:UIExt.kt$com.ivy.wallet.utils.UIExt.kt</ID>
    <ID>NewLineAtEndOfFile:UUIDSerializer.kt$com.ivy.wallet.backup.kotlinxserilzation.UUIDSerializer.kt</ID>
    <ID>NewLineAtEndOfFile:UiText.kt$com.ivy.wallet.utils.UiText.kt</ID>
    <ID>NewLineAtEndOfFile:UpcomingAct.kt$com.ivy.wallet.domain.action.viewmodel.home.UpcomingAct.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateAccCacheAct.kt$com.ivy.wallet.domain.action.viewmodel.home.UpdateAccCacheAct.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateAccountRequest.kt$com.ivy.wallet.io.network.request.account.UpdateAccountRequest.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateCategoriesCacheAct.kt$com.ivy.wallet.domain.action.viewmodel.home.UpdateCategoriesCacheAct.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateLoanRecordRequest.kt$com.ivy.wallet.io.network.request.loan.UpdateLoanRecordRequest.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateLoanRequest.kt$com.ivy.wallet.io.network.request.loan.UpdateLoanRequest.kt</ID>
    <ID>NewLineAtEndOfFile:UpdatePlannedPaymentRuleRequest.kt$com.ivy.wallet.io.network.request.planned.UpdatePlannedPaymentRuleRequest.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateSettingsAct.kt$com.ivy.wallet.domain.action.settings.UpdateSettingsAct.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateStartDayOfMonthAct.kt$com.ivy.wallet.domain.action.global.UpdateStartDayOfMonthAct.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateTransactionRequest.kt$com.ivy.wallet.io.network.request.transaction.UpdateTransactionRequest.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateUserInfoRequest.kt$com.ivy.wallet.io.network.request.auth.UpdateUserInfoRequest.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateUserInfoResponse.kt$com.ivy.wallet.io.network.request.auth.UpdateUserInfoResponse.kt</ID>
    <ID>NewLineAtEndOfFile:UpdateWalletCategoryRequest.kt$com.ivy.wallet.io.network.request.category.UpdateWalletCategoryRequest.kt</ID>
    <ID>NewLineAtEndOfFile:UploadTrnToServerAct.kt$com.ivy.wallet.domain.action.viewmodel.transaction.UploadTrnToServerAct.kt</ID>
    <ID>NewLineAtEndOfFile:User.kt$com.ivy.wallet.domain.data.core.User.kt</ID>
    <ID>NewLineAtEndOfFile:UserDTO.kt$com.ivy.wallet.io.network.data.UserDTO.kt</ID>
    <ID>NewLineAtEndOfFile:UserDao.kt$com.ivy.wallet.io.persistence.dao.UserDao.kt</ID>
    <ID>NewLineAtEndOfFile:UserEntity.kt$com.ivy.wallet.io.persistence.data.UserEntity.kt</ID>
    <ID>NewLineAtEndOfFile:UserStats.kt$com.ivy.wallet.ui.analytics.model.UserStats.kt</ID>
    <ID>NewLineAtEndOfFile:UserStatsTab.kt$com.ivy.wallet.ui.analytics.tab.UserStatsTab.kt</ID>
    <ID>NewLineAtEndOfFile:UtilExt.kt$com.ivy.wallet.utils.UtilExt.kt</ID>
    <ID>NewLineAtEndOfFile:Utils.kt$com.ivy.wallet.domain.pure.util.Utils.kt</ID>
    <ID>NewLineAtEndOfFile:Utils.kt$com.ivy.wallet.ui.component.transaction.Utils.kt</ID>
    <ID>NewLineAtEndOfFile:View.kt$com.ivy.design.utils.View.kt</ID>
    <ID>NewLineAtEndOfFile:WalletAccountLogic.kt$com.ivy.wallet.domain.deprecated.logic.WalletAccountLogic.kt</ID>
    <ID>NewLineAtEndOfFile:WalletBalanceWidget.kt$com.ivy.wallet.ui.widget.WalletBalanceWidget.kt</ID>
    <ID>NewLineAtEndOfFile:WalletBalanceWidgetActions.kt$com.ivy.wallet.ui.widget.WalletBalanceWidgetActions.kt</ID>
    <ID>NewLineAtEndOfFile:WalletBalanceWidgetContent.kt$com.ivy.wallet.ui.widget.WalletBalanceWidgetContent.kt</ID>
    <ID>NewLineAtEndOfFile:WalletByBudgetBakersSteps.kt$com.ivy.wallet.ui.csvimport.flow.instructions.WalletByBudgetBakersSteps.kt</ID>
    <ID>NewLineAtEndOfFile:WalletCategoriesResponse.kt$com.ivy.wallet.io.network.request.category.WalletCategoriesResponse.kt</ID>
    <ID>NewLineAtEndOfFile:WalletCategoryLogic.kt$com.ivy.wallet.domain.deprecated.logic.WalletCategoryLogic.kt</ID>
    <ID>NewLineAtEndOfFile:WalletCharts.kt$com.ivy.wallet.domain.pure.charts.WalletCharts.kt</ID>
    <ID>NewLineAtEndOfFile:WalletDAOs.kt$com.ivy.wallet.domain.pure.data.WalletDAOs.kt</ID>
    <ID>NewLineAtEndOfFile:WalletUtil.kt$com.ivy.wallet.utils.WalletUtil.kt</ID>
    <ID>NewLineAtEndOfFile:WalletValueFunctions.kt$com.ivy.wallet.domain.pure.transaction.WalletValueFunctions.kt</ID>
    <ID>NewLineAtEndOfFile:WidgetBase.kt$com.ivy.wallet.ui.widget.WidgetBase.kt</ID>
    <ID>NewLineAtEndOfFile:WrapContentRow.kt$com.ivy.wallet.ui.theme.components.WrapContentRow.kt</ID>
    <ID>NewLineAtEndOfFile:ZipUtils.kt$com.ivy.wallet.domain.deprecated.logic.zip.ZipUtils.kt</ID>
    <ID>NewLineAtEndOfFile:dependencies.kt$com.ivy.wallet.buildsrc.dependencies.kt</ID>
    <ID>NewLineAtEndOfFile:ivy.lint.gradle.kts$.ivy.lint.gradle.kts</ID>
    <ID>NewLineAtEndOfFile:settings.gradle.kts$.settings.gradle.kts</ID>
    <ID>NoBlankLineBeforeRbrace:AccountCharts.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:AccountModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:AccountUploader.kt$AccountUploader$ </ID>
    <ID>NoBlankLineBeforeRbrace:AddKeywordModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:AddPrimaryAttributeButton.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:AmountModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:AppModuleDI.kt$AppModuleDI.&lt;no name provided&gt;$ </ID>
    <ID>NoBlankLineBeforeRbrace:AuthService.kt$AuthService$ </ID>
    <ID>NoBlankLineBeforeRbrace:BudgetBattery.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:BudgetBottomBar.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:BudgetModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:BudgetScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:BudgetUploader.kt$BudgetUploader$ </ID>
    <ID>NoBlankLineBeforeRbrace:BufferBattery.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:Button.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ButtonWithIcon.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CSVImporter.kt$CSVImporter$ </ID>
    <ID>NoBlankLineBeforeRbrace:CSVImporter.kt$CSVImporter.&lt;no name provided&gt;$ </ID>
    <ID>NoBlankLineBeforeRbrace:CSVImporterV2.kt$CSVImporterV2$ </ID>
    <ID>NoBlankLineBeforeRbrace:CSVScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CSVViewModel.kt$CSVViewModel.&lt;no name provided&gt;$ </ID>
    <ID>NoBlankLineBeforeRbrace:CategoriesBottomBar.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CategoriesScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CategoryCharts.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CategoryCreator.kt$CategoryCreator$ </ID>
    <ID>NoBlankLineBeforeRbrace:CategoryModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CategoryUploader.kt$CategoryUploader$ </ID>
    <ID>NoBlankLineBeforeRbrace:ChangeTransactionTypeModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ChartsScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:Checkbox.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ChooseCategoryModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ChooseIconModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ChoosePeriodModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ChooseStartDateOfMonthModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CircleButtons.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CurrencyModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:CurrencyPicker.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:DataCircle.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:Description.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:DescriptionModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:EditBottomSheet.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:EditTransactionScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:FilterOverlay.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:GesturesExt.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:GitHubBackupViewModel.kt$GitHubBackupViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:GitHubClient.kt$GitHubClient$ </ID>
    <ID>NoBlankLineBeforeRbrace:GsonTypeAdapters.kt$ErrorCodeTypeAdapter$ </ID>
    <ID>NoBlankLineBeforeRbrace:HomeHeader.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:HomeMoreMenu.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IconButton.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ImportInstructions.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:ImportResultUI.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IncomeExpensesRow.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:InputField.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyBilling.kt$IvyBilling$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyBorderButton.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyButton.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyCheckbox.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyCircleButton.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyColorPicker.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyNameTextFieldValue.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyNumberTextField.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyOutlinedButton.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyTitleTextField.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyViewPager.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:IvyViewPager.kt$IvyPagerState$ </ID>
    <ID>NoBlankLineBeforeRbrace:LoanBottomBar.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:LoanModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:LoanRecordModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:LoanRecordUploader.kt$LoanRecordUploader$ </ID>
    <ID>NoBlankLineBeforeRbrace:LoanUploader.kt$LoanUploader$ </ID>
    <ID>NoBlankLineBeforeRbrace:LoansScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:MainBottomBar.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:MainViewModel.kt$MainViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration111to112_User_testUser.kt$Migration111to112_User_testUser$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration113to114_Multi_Currency.kt$Migration113to114_Multi_Currency$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration114to115_Category_Account_Icons.kt$Migration114to115_Category_Account_Icons$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration115to116_Account_Include_In_Balance.kt$Migration115to116_Account_Include_In_Balance$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration116to117_SalteEdgeIntgration.kt$Migration116to117_SalteEdgeIntgration$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration117to118_Budgets.kt$Migration117to118_Budgets$ </ID>
    <ID>NoBlankLineBeforeRbrace:Migration118to119_Loans.kt$Migration118to119_Loans$ </ID>
    <ID>NoBlankLineBeforeRbrace:MonthPickerModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:NameModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:OnboardingPrivacyTC.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:OnboardingRouter.kt$OnboardingRouter$ </ID>
    <ID>NoBlankLineBeforeRbrace:OnboardingSetCurrency.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:OnboardingSetName.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:OnboardingToolbar.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:OnboardingType.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:PaywallLogic.kt$PaywallLogic$ </ID>
    <ID>NoBlankLineBeforeRbrace:PeriodSelector.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:PieChart.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:PieChartStatisticScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:Plan.kt$Plan$ </ID>
    <ID>NoBlankLineBeforeRbrace:PlannedPaymentCard.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$ </ID>
    <ID>NoBlankLineBeforeRbrace:PlannedPaymentsGenerator.kt$PlannedPaymentsGenerator$ </ID>
    <ID>NoBlankLineBeforeRbrace:PreloadDataLogic.kt$PreloadDataLogic$ </ID>
    <ID>NoBlankLineBeforeRbrace:RecurringRuleModal.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:RootActivity.kt$RootActivity$ </ID>
    <ID>NoBlankLineBeforeRbrace:RootViewModel.kt$RootViewModel$ </ID>
    <ID>NoBlankLineBeforeRbrace:RootViewModel.kt$RootViewModel.&lt;no name provided&gt;$ </ID>
    <ID>NoBlankLineBeforeRbrace:SetPreferenceAct.kt$SetPreferenceAct$ </ID>
    <ID>NoBlankLineBeforeRbrace:SettingsScreen.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:Suggestions.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:TimePeriod.kt$TimePeriod$ </ID>
    <ID>NoBlankLineBeforeRbrace:Title.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:TransactionCard.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:TransactionDateTime.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:TransactionSectionDivider.kt$ </ID>
    <ID>NoBlankLineBeforeRbrace:TransactionUploader.kt$TransactionUploader$ </ID>
    <ID>NoBlankLineBeforeRbrace:WalletBalanceWidget.kt$WalletBalanceWidget$ </ID>
    <ID>NoBlankLineBeforeRbrace:WalletCategoryLogic.kt$WalletCategoryLogic$ </ID>
    <ID>NoBlankLineBeforeRbrace:WidgetBase.kt$WidgetBase$ </ID>
    <ID>NoBlankLineBeforeRbrace:ZipUtils.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AccTrnsAct.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AccValueFunctions.kt$AccountValueFunctions$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors4ymijgaek646mzru18sdmblu7.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors6m89nhcqblthog8es93pjkmhg.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors72k7tti784t7idmqtg2upvaru.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors7hvycqvau4uyj5knata7lx0yx.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorsa5ptgikd9fb816fav4742zvaq.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorseessl0al0otcsbyqqruvoncpd.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AccountDTO.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AccountModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AccountUploader.kt$AccountUploader$ </ID>
    <ID>NoConsecutiveBlankLines:AccountsResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AddPrimaryAttributeButton.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AddRateModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AmountCurrency.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AnalyticsEvent.kt$AnalyticsEvent.Companion$ </ID>
    <ID>NoConsecutiveBlankLines:AnalyticsReportScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AppLockedScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:AppModuleDI.kt$AppModuleDI$ </ID>
    <ID>NoConsecutiveBlankLines:BackupLogic.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BalanceRow.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BalanceScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BarChart.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BottomBar.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BottomNavigationBar.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Budget.kt$Budget$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetCreator.kt$BudgetCreator$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetDTO.kt$BudgetDTO$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetEntity.kt$BudgetEntity$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetUploader.kt$BudgetUploader$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetViewModel.kt$BudgetViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:BudgetsResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:BufferModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Button.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ButtonBack.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ButtonClose.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ButtonDelete.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ButtonExpandCollapse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ButtonPrimary.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ButtonSecondary.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CSVImporter.kt$CSVImporter$ </ID>
    <ID>NoConsecutiveBlankLines:CSVImporterV2.kt$CSVImporterV2$ </ID>
    <ID>NoConsecutiveBlankLines:CSVMapper.kt$CSVMapper$ </ID>
    <ID>NoConsecutiveBlankLines:CSVScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CSVViewModel.kt$CSVViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:CategoriesScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CategoryCharts.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CategoryCreator.kt$CategoryCreator$ </ID>
    <ID>NoConsecutiveBlankLines:CategoryModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CategoryUploader.kt$CategoryUploader$ </ID>
    <ID>NoConsecutiveBlankLines:ChartsScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ChartsViewModel.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ChartsViewModel.kt$ChartsViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:CircleButtons.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ColorPicker.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Colors.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ComposeExt.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CrupdateBudgetRequest.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CurrencyPicker.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CustomExchangeRateCard.kt$ </ID>
    <ID>NoConsecutiveBlankLines:CustomerJourneyLogic.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DataCircle.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DateExt.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DeleteConfirmationModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DependencyHandlerExt.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DetektConfigurationAccessors.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DetektPluginsConfigurationAccessors.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DonateModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DueDate.kt$ </ID>
    <ID>NoConsecutiveBlankLines:EditBottomSheet.kt$ </ID>
    <ID>NoConsecutiveBlankLines:EditPlannedViewModel.kt$EditPlannedViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:EditTransactionViewModel.kt$EditTransactionViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:ErrorModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Exchange.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ExchangeRatesScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ExchangeRatesViewModel.kt$ExchangeRatesViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:FilterOverlay.kt$ </ID>
    <ID>NoConsecutiveBlankLines:GitHubBackupStatus.kt$ </ID>
    <ID>NoConsecutiveBlankLines:GitHubBackupViewModel.kt$GitHubBackupViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:GitHubBackupViewState.kt$ </ID>
    <ID>NoConsecutiveBlankLines:GitHubClient.kt$ </ID>
    <ID>NoConsecutiveBlankLines:GitHubCredentialsManager.kt$ </ID>
    <ID>NoConsecutiveBlankLines:GradientCut.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Grid.kt$ </ID>
    <ID>NoConsecutiveBlankLines:HistoryDateDivider.kt$ </ID>
    <ID>NoConsecutiveBlankLines:HomeHeader.kt$ </ID>
    <ID>NoConsecutiveBlankLines:HomeMoreMenu.kt$ </ID>
    <ID>NoConsecutiveBlankLines:HomeTab.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IconPicker.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ImportFrom.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ImportInstructions.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ImportProcessing.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ImportResultUI.kt$ </ID>
    <ID>NoConsecutiveBlankLines:InputField.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Insets.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ItemIcon.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ItemStatisticScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyAndroidApp.kt$IvyAndroidApp$ </ID>
    <ID>NoConsecutiveBlankLines:IvyBasicTextField.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyBorderButton.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyCheckbox.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyChecklistTextField.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyCircleButton.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyColorPicker.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyColors.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyComponents.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyComposeApp.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyDescriptionTextField.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyDivider.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyDividerDot.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyIcon.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyLineChart.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyModalDomainComponents.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyNameTextFieldValue.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyNotificationChannel.kt$IvyNotificationChannel$ </ID>
    <ID>NoConsecutiveBlankLines:IvyNumberTextField.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyOutlinedButton.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyOutlinedTextField.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyRoomDatabase.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvySwitch.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyTheme.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyTitleTextField.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyUI.kt$ </ID>
    <ID>NoConsecutiveBlankLines:IvyWalletCtx.kt$IvyWalletCtx$ </ID>
    <ID>NoConsecutiveBlankLines:IvyWalletDesign.kt$IvyWalletDesign$ </ID>
    <ID>NoConsecutiveBlankLines:Keyboard.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LineChart.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Loading.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LoanCreator.kt$LoanCreator$ </ID>
    <ID>NoConsecutiveBlankLines:LoanDetailsScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LoanModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LoanRecordCreator.kt$LoanRecordCreator$ </ID>
    <ID>NoConsecutiveBlankLines:LoanRecordModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:LoanRecordUploader.kt$LoanRecordUploader$ </ID>
    <ID>NoConsecutiveBlankLines:LoanTransactionsCore.kt$LoanTransactionsCore$ </ID>
    <ID>NoConsecutiveBlankLines:LoanUploader.kt$LoanUploader$ </ID>
    <ID>NoConsecutiveBlankLines:LoansScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MainBottomBar.kt$ </ID>
    <ID>NoConsecutiveBlankLines:MoneyManagerPraseSteps.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Month.kt$Month$ </ID>
    <ID>NoConsecutiveBlankLines:MonthPickerModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:NotificationService.kt$NotificationService$ </ID>
    <ID>NoConsecutiveBlankLines:Onboarding.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingAccounts.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingCategories.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingComponents.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingProgressSlider.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingReportTab.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingRouter.kt$OnboardingRouter$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingSetName.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingSplashLogin.kt$ </ID>
    <ID>NoConsecutiveBlankLines:OnboardingViewModel.kt$OnboardingViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:Padding.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ParseStatus.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PaywallLogic.kt$PaywallLogic$ </ID>
    <ID>NoConsecutiveBlankLines:PaywallScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PeriodSelector.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PieChart.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PieChart.kt$PieChartView$ </ID>
    <ID>NoConsecutiveBlankLines:PieChartStatisticScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$ </ID>
    <ID>NoConsecutiveBlankLines:PlannedPaymentRulesResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PlannedPaymentSync.kt$PlannedPaymentSync$ </ID>
    <ID>NoConsecutiveBlankLines:PlannedPaymentsLazyColumn.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$ </ID>
    <ID>NoConsecutiveBlankLines:PlansSheet.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PluginSpecBuilders.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PreloadDataLogic.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PreloadDataLogic.kt$PreloadDataLogic$ </ID>
    <ID>NoConsecutiveBlankLines:Preview.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PreviewUtils.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PrimaryAttributeColumn.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ProgressBar.kt$ </ID>
    <ID>NoConsecutiveBlankLines:RateItem.kt$ </ID>
    <ID>NoConsecutiveBlankLines:RecurringRuleModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ReorderModal.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ReorderModal.kt$&lt;no name provided&gt;$ </ID>
    <ID>NoConsecutiveBlankLines:RestClient.kt$RestClient.Companion$ </ID>
    <ID>NoConsecutiveBlankLines:RootActivity.kt$ </ID>
    <ID>NoConsecutiveBlankLines:RootActivity.kt$RootActivity$ </ID>
    <ID>NoConsecutiveBlankLines:RootViewModel.kt$RootViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:SearchBar.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ServerStopScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:SettingsScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:SettingsViewModel.kt$SettingsViewModel$ </ID>
    <ID>NoConsecutiveBlankLines:SharedPrefs.kt$SharedPrefs.Companion$ </ID>
    <ID>NoConsecutiveBlankLines:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$ </ID>
    <ID>NoConsecutiveBlankLines:Suggestions.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Transaction.kt$Transaction$ </ID>
    <ID>NoConsecutiveBlankLines:TransactionCard.kt$ </ID>
    <ID>NoConsecutiveBlankLines:TransactionDao.kt$TransactionDao$ </ID>
    <ID>NoConsecutiveBlankLines:TransactionDateTime.kt$ </ID>
    <ID>NoConsecutiveBlankLines:TransactionService.kt$TransactionService$ </ID>
    <ID>NoConsecutiveBlankLines:TransactionUploader.kt$TransactionUploader$ </ID>
    <ID>NoConsecutiveBlankLines:TransactionsDividerLine.kt$ </ID>
    <ID>NoConsecutiveBlankLines:TransactionsResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:TrnDateDividers.kt$ </ID>
    <ID>NoConsecutiveBlankLines:UIExt.kt$ </ID>
    <ID>NoConsecutiveBlankLines:WalletAccountLogic.kt$WalletAccountLogic$ </ID>
    <ID>NoConsecutiveBlankLines:WalletBalanceWidget.kt$WalletBalanceWidgetReceiver$ </ID>
    <ID>NoConsecutiveBlankLines:WalletCategoriesResponse.kt$ </ID>
    <ID>NoConsecutiveBlankLines:WalletCategoryLogic.kt$WalletCategoryLogic$ </ID>
    <ID>NoConsecutiveBlankLines:WalletCharts.kt$ </ID>
    <ID>NoConsecutiveBlankLines:WebViewScreen.kt$ </ID>
    <ID>NoConsecutiveBlankLines:WrapContentRow.kt$ </ID>
    <ID>NoConsecutiveBlankLines:build.gradle.kts$ </ID>
    <ID>NoConsecutiveBlankLines:dependencies.kt$ </ID>
    <ID>NoConsecutiveBlankLines:ivy.lint.gradle.kts$ </ID>
    <ID>NoEmptyClassBody:AccountsUpdatedEvent.kt$AccountsUpdatedEvent${ }</ID>
    <ID>NoEmptyFirstLineInMethodBlock:AccountCharts.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AccountModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AccountsTab.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AddKeywordModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AddPrimaryAttributeButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AmountModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:AnalyticsReportScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:BudgetBottomBar.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:BudgetModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Button.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ButtonWithIcon.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:CSVViewModel.kt$CSVViewModel$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:CategoriesBottomBar.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:CategoryModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ChangeTransactionTypeModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Checkbox.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ChooseCategoryModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ChooseIconModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ChoosePeriodModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ChooseStartDateOfMonthModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:CircleButtons.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:CurrencyModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:CurrencyPicker.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Description.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:DescriptionModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:EditBottomSheet.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ExportCSVLogic.kt$ExportCSVLogic$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:HomeMoreMenu.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IconButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ImportInstructions.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:ImportResultUI.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:InputField.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IntervalPickerRow.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyBorderButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyCheckbox.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyCircleButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyColorPicker.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyNumberTextField.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:IvyOutlinedButton.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LTLoanMapper.kt$LTLoanMapper$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoanBottomBar.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoanDetailsScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoanModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoanRecordModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoanTransactionsCore.kt$LoanTransactionsCore$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoanTransactionsLogic.kt$LoanTransactionsLogic$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoanViewModel.kt$LoanViewModel$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:LoansScreen.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:MonthPickerModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:NameModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:OnboardingPrivacyTC.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:OnboardingSetCurrency.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:OnboardingSetName.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:OnboardingToolbar.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:OnboardingType.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PeriodSelector.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PieChartAct.kt$PieChartAct$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PlannedPaymentCard.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PlannedPaymentsLazyColumn.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:PlansSheet.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:RecurringRuleModal.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:RootViewModel.kt$RootViewModel.&lt;no name provided&gt;$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Suggestions.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Title.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:Toolbar.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:TransactionCard.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:TransactionDateTime.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:TransactionReminderWorker.kt$TransactionReminderWorker$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:TransactionSectionDivider.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:UIExt.kt$ </ID>
    <ID>NoEmptyFirstLineInMethodBlock:WalletCategoryLogic.kt$WalletCategoryLogic$ </ID>
    <ID>NoLineBreakAfterElse:LoanTransactionsCore.kt$LoanTransactionsCore$ </ID>
    <ID>NoMultipleSpaces:AccountsTab.kt$ </ID>
    <ID>NoMultipleSpaces:BudgetScreen.kt$ </ID>
    <ID>NoMultipleSpaces:CategoriesScreen.kt$ </ID>
    <ID>NoMultipleSpaces:ChartsViewModel.kt$ChartsViewModel$ </ID>
    <ID>NoMultipleSpaces:Constants.kt$Constants$ </ID>
    <ID>NoMultipleSpaces:DetektConfigurationAccessors.kt$ </ID>
    <ID>NoMultipleSpaces:DetektPluginsConfigurationAccessors.kt$ </ID>
    <ID>NoMultipleSpaces:LoansScreen.kt$ </ID>
    <ID>NoMultipleSpaces:ivy.lint.gradle.kts$ </ID>
    <ID>NoSemicolons:LogoutLogic.kt$LogoutLogic$;</ID>
    <ID>NoSemicolons:UIExt.kt$;</ID>
    <ID>NoSemicolons:UtilExt.kt$;</ID>
    <ID>NoTrailingSpaces:ivy.lint.gradle.kts$ </ID>
    <ID>NoUnusedImports:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors32ikgp1isdd8mwexzgbe6rirl.kt</ID>
    <ID>NoUnusedImports:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt</ID>
    <ID>NoUnusedImports:Accessors4ymijgaek646mzru18sdmblu7.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors4ymijgaek646mzru18sdmblu7.kt</ID>
    <ID>NoUnusedImports:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors5x03zd2mf47s5vj1qv3jvhdru.kt</ID>
    <ID>NoUnusedImports:Accessors6m89nhcqblthog8es93pjkmhg.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors6m89nhcqblthog8es93pjkmhg.kt</ID>
    <ID>NoUnusedImports:Accessors72k7tti784t7idmqtg2upvaru.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors72k7tti784t7idmqtg2upvaru.kt</ID>
    <ID>NoUnusedImports:Accessors7hvycqvau4uyj5knata7lx0yx.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors7hvycqvau4uyj5knata7lx0yx.kt</ID>
    <ID>NoUnusedImports:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt</ID>
    <ID>NoUnusedImports:Accessorsa5ptgikd9fb816fav4742zvaq.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorsa5ptgikd9fb816fav4742zvaq.kt</ID>
    <ID>NoUnusedImports:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorsblypoh2ruc9u3bx9djsfqsntg.kt</ID>
    <ID>NoUnusedImports:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt</ID>
    <ID>NoUnusedImports:Accessorseessl0al0otcsbyqqruvoncpd.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorseessl0al0otcsbyqqruvoncpd.kt</ID>
    <ID>NoUnusedImports:DetektConfigurationAccessors.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.DetektConfigurationAccessors.kt</ID>
    <ID>NoUnusedImports:DetektPluginsConfigurationAccessors.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.DetektPluginsConfigurationAccessors.kt</ID>
    <ID>NoUnusedImports:NotificationService.kt$com.ivy.wallet.android.notification.NotificationService.kt</ID>
    <ID>NoWildcardImports:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:AccountService.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.csv.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.sync.item.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.sync.uploader.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.io.network.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:AuthService.kt$import com.ivy.wallet.io.network.request.auth.*</ID>
    <ID>NoWildcardImports:BackupLogic.kt$import com.google.gson.*</ID>
    <ID>NoWildcardImports:BackupLogic.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:BudgetService.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:BufferModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:CSVViewModel.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:CSVViewModel.kt$import com.ivy.wallet.ui.csv.domain.*</ID>
    <ID>NoWildcardImports:CategoriesViewModel.kt$import kotlinx.coroutines.*</ID>
    <ID>NoWildcardImports:CategoryModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:CategoryModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:CategoryService.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:ChooseIconModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ChooseIconModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:ComposeExt.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:DateExt.kt$import java.time.*</ID>
    <ID>NoWildcardImports:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Dividers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:EditPlannedViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:ExchangeRatesViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:FileUtil.kt$import java.io.*</ID>
    <ID>NoWildcardImports:FromToTimeRange.kt$import com.ivy.wallet.utils.*</ID>
    <ID>NoWildcardImports:HealthTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:HomeViewModel.kt$import com.ivy.wallet.domain.action.viewmodel.home.*</ID>
    <ID>NoWildcardImports:ImportType.kt$import com.ivy.wallet.ui.csvimport.flow.instructions.*</ID>
    <ID>NoWildcardImports:ImportType.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:InputField.kt$import com.ivy.design.l0_system.*</ID>
    <ID>NoWildcardImports:InputField.kt$import com.ivy.design.utils.*</ID>
    <ID>NoWildcardImports:ItemStatisticViewModel.kt$import com.ivy.wallet.domain.deprecated.logic.*</ID>
    <ID>NoWildcardImports:ItemStatisticViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:ItemStatisticViewModel.kt$import com.ivy.wallet.utils.*</ID>
    <ID>NoWildcardImports:IvyLineChart.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:IvyLineChart.kt$import androidx.compose.ui.graphics.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.migration.*</ID>
    <ID>NoWildcardImports:IvySwitch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:IvySwitch.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:IvySync.kt$import com.ivy.wallet.domain.deprecated.sync.item.*</ID>
    <ID>NoWildcardImports:IvyToolbar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:IvyViewPager.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:IvyViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:IvyWalletCompleteData.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>NoWildcardImports:IvyWalletDesign.kt$import com.ivy.design.l0_system.*</ID>
    <ID>NoWildcardImports:KPIsTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:KPIsTab.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:Keyboard.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:LoanDetailsViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:LoanService.kt$import com.ivy.wallet.io.network.request.loan.*</ID>
    <ID>NoWildcardImports:LoanService.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:LoanTransactionsCore.kt$import com.ivy.wallet.domain.data.core.*</ID>
    <ID>NoWildcardImports:LoanTransactionsCore.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import com.ivy.wallet.ui.*</ID>
    <ID>NoWildcardImports:OnboardingReportTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:OnboardingReportTab.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import com.ivy.wallet.ui.onboarding.steps.*</ID>
    <ID>NoWildcardImports:PieChart.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PieChart.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:PlannedPaymentRuleService.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:PreloadDataLogic.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:ProgressBar.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:ReorderModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ReorderModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:ReorderModal.kt$import androidx.recyclerview.widget.ItemTouchHelper.*</ID>
    <ID>NoWildcardImports:ReportViewModel.kt$import com.ivy.wallet.utils.*</ID>
    <ID>NoWildcardImports:RestClient.kt$import com.ivy.wallet.io.network.service.*</ID>
    <ID>NoWildcardImports:Spacers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:Switch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:Switch.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:TimePeriod.kt$import com.ivy.wallet.utils.*</ID>
    <ID>NoWildcardImports:TransactionService.kt$import retrofit2.http.*</ID>
    <ID>NoWildcardImports:UserStatsTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:WalletBalanceWidgetContent.kt$import androidx.glance.layout.*</ID>
    <ID>NoWildcardImports:ZipUtils.kt$import java.io.*</ID>
    <ID>ObjectPropertyNaming:SharedPrefs.kt$SharedPrefs.Companion$//-------------------------------- Customer Journey ---------------------------------------- const val _CARD_DISMISSED = "_cj_dismissed"</ID>
    <ID>PackageName:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors4ymijgaek646mzru18sdmblu7.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors6m89nhcqblthog8es93pjkmhg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors72k7tti784t7idmqtg2upvaru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors7hvycqvau4uyj5knata7lx0yx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorsa5ptgikd9fb816fav4742zvaq.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorseessl0al0otcsbyqqruvoncpd.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Background.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageName:BarChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageName:BottomBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:BottomNavigationBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:Button.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:ButtonBack.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonClose.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonDelete.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonExpandCollapse.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonPrimary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonSecondary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonWithIcon.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:Card.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageName:Checkbox.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:ColorPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:ColoredItemCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:Colors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:ColumnRoot.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:DeleteAllData.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageName:DeleteConfirmationModal.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageName:DeleteItem.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageName:DetektConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:DetektPluginsConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Dividers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:EditContentCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:ErrorModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:FAB.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:IconButton.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:IconPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:InputField.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:ItemDetailsScreen.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageName:IvyColors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:IvyIcon.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:IvyPadding.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageName:IvyShapes.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:IvyText.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:IvyTheme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:IvyTypography.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:LineChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageName:Loading.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageName:MoreInfo.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:MoreMenu.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:Onboarding.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageName:PieChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageName:PluginSpecBuilders.kt$package gradle.kotlin.dsl.plugins._fe0b42ce1102c239397a785329863d5f</ID>
    <ID>PackageName:ProgressBar.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageName:ReorderModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:ScreenTitle.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageName:SearchBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:Shapes.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:Spacers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:Switch.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:Theme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:Toolbar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:TypographyExt.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors4ymijgaek646mzru18sdmblu7.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors6m89nhcqblthog8es93pjkmhg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors72k7tti784t7idmqtg2upvaru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors7hvycqvau4uyj5knata7lx0yx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorsa5ptgikd9fb816fav4742zvaq.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorseessl0al0otcsbyqqruvoncpd.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Background.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageNaming:BarChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageNaming:BottomBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:BottomNavigationBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:Button.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:ButtonBack.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonClose.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonDelete.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonExpandCollapse.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonPrimary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonSecondary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonWithIcon.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:Card.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageNaming:Checkbox.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:ColorPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:ColoredItemCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:Colors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:ColumnRoot.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:DeleteAllData.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageNaming:DeleteConfirmationModal.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageNaming:DeleteItem.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageNaming:DetektConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:DetektPluginsConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Dividers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:EditContentCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:ErrorModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:FAB.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:IconButton.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:IconPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:InputField.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:ItemDetailsScreen.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageNaming:IvyColors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:IvyIcon.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:IvyPadding.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageNaming:IvyShapes.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:IvyText.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:IvyTheme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:IvyTypography.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:LineChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageNaming:Loading.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageNaming:MoreInfo.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:MoreMenu.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:Onboarding.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageNaming:PieChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageNaming:PluginSpecBuilders.kt$package gradle.kotlin.dsl.plugins._fe0b42ce1102c239397a785329863d5f</ID>
    <ID>PackageNaming:ProgressBar.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageNaming:ReorderModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:ScreenTitle.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageNaming:SearchBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:Shapes.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:Spacers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:Switch.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:Theme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:Toolbar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:TypographyExt.kt$package com.ivy.design.l0_system</ID>
    <ID>ParameterListWrapping:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:Accessorseessl0al0otcsbyqqruvoncpd.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:DetektConfigurationAccessors.kt$(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit)</ID>
    <ID>ParameterListWrapping:DetektPluginsConfigurationAccessors.kt$(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit)</ID>
    <ID>ParameterListWrapping:TransactionReminderWorker.kt$TransactionReminderWorker$( @Assisted appContext: Context, @Assisted params: WorkerParameters, private val transactionDao: TransactionDao, private val notificationService: NotificationService, private val sharedPrefs: SharedPrefs, )</ID>
    <ID>PrintStackTrace:AccountSync.kt$AccountSync$e</ID>
    <ID>PrintStackTrace:AccountUploader.kt$AccountUploader$e</ID>
    <ID>PrintStackTrace:Budget.kt$Budget$e</ID>
    <ID>PrintStackTrace:BudgetCreator.kt$BudgetCreator$e</ID>
    <ID>PrintStackTrace:BudgetDTO.kt$BudgetDTO$e</ID>
    <ID>PrintStackTrace:BudgetEntity.kt$BudgetEntity$e</ID>
    <ID>PrintStackTrace:BudgetSync.kt$BudgetSync$e</ID>
    <ID>PrintStackTrace:BudgetUploader.kt$BudgetUploader$e</ID>
    <ID>PrintStackTrace:CSVImporter.kt$CSVImporter$e</ID>
    <ID>PrintStackTrace:CSVViewModel.kt$CSVViewModel$e</ID>
    <ID>PrintStackTrace:CategoryCreator.kt$CategoryCreator$e</ID>
    <ID>PrintStackTrace:CategorySync.kt$CategorySync$e</ID>
    <ID>PrintStackTrace:CategoryUploader.kt$CategoryUploader$e</ID>
    <ID>PrintStackTrace:EditTransactionViewModel.kt$EditTransactionViewModel$e</ID>
    <ID>PrintStackTrace:ExportCSVLogic.kt$ExportCSVLogic$e</ID>
    <ID>PrintStackTrace:FileUtil.kt$e</ID>
    <ID>PrintStackTrace:IvyBilling.kt$IvyBilling$e</ID>
    <ID>PrintStackTrace:IvyCurrency.kt$IvyCurrency.Companion$e</ID>
    <ID>PrintStackTrace:Keyboard.kt$e</ID>
    <ID>PrintStackTrace:LoanCreator.kt$LoanCreator$e</ID>
    <ID>PrintStackTrace:LoanRecordCreator.kt$LoanRecordCreator$e</ID>
    <ID>PrintStackTrace:LoanRecordSync.kt$LoanRecordSync$e</ID>
    <ID>PrintStackTrace:LoanRecordUploader.kt$LoanRecordUploader$e</ID>
    <ID>PrintStackTrace:LoanSync.kt$LoanSync$e</ID>
    <ID>PrintStackTrace:LoanUploader.kt$LoanUploader$e</ID>
    <ID>PrintStackTrace:MigrationsManager.kt$MigrationsManager$e</ID>
    <ID>PrintStackTrace:NotificationService.kt$NotificationService$e</ID>
    <ID>PrintStackTrace:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$e</ID>
    <ID>PrintStackTrace:PlannedPaymentSync.kt$PlannedPaymentSync$e</ID>
    <ID>PrintStackTrace:RootActivity.kt$RootActivity$e</ID>
    <ID>PrintStackTrace:SyncExchangeRatesAct.kt$SyncExchangeRatesAct$e</ID>
    <ID>PrintStackTrace:TransactionSync.kt$TransactionSync$e</ID>
    <ID>PrintStackTrace:TransactionUploader.kt$TransactionUploader$e</ID>
    <ID>PrintStackTrace:UIExt.kt$e</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private fun mapDate( rowMapping: RowMapping, dateString: String? ): LocalDateTime?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private fun mapType( row: List&lt;String&gt;, rowMapping: RowMapping ): TransactionType?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private suspend fun mapAccount( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, ): Account?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private suspend fun mapCategory( categoryNameString: String?, color: Int?, icon: String?, orderNum: Double? ): Category?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private suspend fun mapToTransaction( baseCurrency: String, row: List&lt;String&gt;, rowMapping: RowMapping ): Transaction?</ID>
    <ID>ReturnCount:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapAccount( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, ): Account?</ID>
    <ID>ReturnCount:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapCategory( categoryNameString: String?, color: Int?, icon: String?, orderNum: Double? ): Category?</ID>
    <ID>ReturnCount:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapToTransaction( baseCurrency: String, row: CSVRowNew, importantFields: ImportantFields, transferFields: TransferFields, optionalFields: OptionalFields, ): Transaction?</ID>
    <ID>ReturnCount:CSVViewModel.kt$CSVViewModel$private fun processFile( uri: Uri, normalizeCSV: Boolean = false, charset: Charset = Charsets.UTF_8 ): List&lt;CSVRow&gt;?</ID>
    <ID>ReturnCount:EditPlannedViewModel.kt$EditPlannedViewModel$private fun validate(): Boolean</ID>
    <ID>ReturnCount:EditTransactionViewModel.kt$EditTransactionViewModel$private fun validateTransaction(): Boolean</ID>
    <ID>ReturnCount:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun defaultAccountId( screen: EditTransaction, accounts: List&lt;Account&gt;, ): UUID</ID>
    <ID>ReturnCount:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun getDisplayLoanHelper(trans: Transaction): EditTransactionDisplayLoan</ID>
    <ID>ReturnCount:ExchangeRatesLogic.kt$ExchangeRatesLogic$private suspend fun exchangeRate( baseCurrency: String, currency: String ): Double</ID>
    <ID>ReturnCount:IvyCurrency.kt$IvyCurrency.Companion$fun fromCode(code: String): IvyCurrency?</ID>
    <ID>ReturnCount:LoanCreator.kt$LoanCreator$suspend fun create( data: CreateLoanData, onRefreshUI: suspend (Loan) -&gt; Unit ): UUID?</ID>
    <ID>ReturnCount:LoanRecordCreator.kt$LoanRecordCreator$suspend fun create( loanId: UUID, data: CreateLoanRecordData, onRefreshUI: suspend (LoanRecord) -&gt; Unit ): UUID?</ID>
    <ID>ReturnCount:PaywallLogic.kt$PaywallLogic$private suspend fun checkPaywall( paywallHitDefinition: suspend () -&gt; PaywallReason? ): PaywallReason?</ID>
    <ID>ReturnCount:Plan.kt$Plan$fun parsePrice(): AmountCurrency?</ID>
    <ID>ReturnCount:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$private suspend fun amountForMonthInBaseCurrency( plannedPayment: PlannedPaymentRule, baseCurrency: String, accounts: List&lt;Account&gt; ): Double</ID>
    <ID>ReturnCount:ReportFilter.kt$ReportFilter$fun validate(): Boolean</ID>
    <ID>ReturnCount:SyncExchangeRatesAct.kt$SyncExchangeRatesAct$private suspend fun sync(baseCurrency: String)</ID>
    <ID>SpacingAroundColon:AmountFormatting.kt$:</ID>
    <ID>SpacingAroundColon:ComposeExt.kt$:</ID>
    <ID>SpacingAroundColon:CreateLoanData.kt$CreateLoanData$:</ID>
    <ID>SpacingAroundColon:ReorderModal.kt$:</ID>
    <ID>SpacingAroundColon:ReportViewModel.kt$ReportViewModel$:</ID>
    <ID>SpacingAroundColon:UiText.kt$UiText$:</ID>
    <ID>SpacingAroundComma:ItemStatisticScreen.kt$,</ID>
    <ID>SpacingAroundComma:IvyDesign.kt$IvyDesign$,</ID>
    <ID>SpacingAroundComma:IvyWalletDesign.kt$IvyWalletDesign$,</ID>
    <ID>SpacingAroundComma:PlannedPaymentCard.kt$,</ID>
    <ID>SpacingAroundCurly:ItemStatisticScreen.kt${</ID>
    <ID>SpacingAroundCurly:ItemStatisticViewModel.kt$ItemStatisticViewModel${</ID>
    <ID>SpacingAroundCurly:PlannedPaymentsLogic.kt$PlannedPaymentsLogic${</ID>
    <ID>SpacingAroundCurly:ReportViewModel.kt$ReportViewModel${</ID>
    <ID>SpacingAroundKeyword:ExportCSVLogic.kt$ExportCSVLogic$when</ID>
    <ID>SpacingAroundKeyword:IvyWalletDesign.kt$IvyWalletDesign$if</ID>
    <ID>SpacingAroundKeyword:OnboardingAccounts.kt$if</ID>
    <ID>SpacingAroundParens:AppModuleDI.kt$AppModuleDI$(</ID>
    <ID>SpacingAroundParens:IvyBilling.kt$IvyBilling$(</ID>
    <ID>SpreadOperator:UiText.kt$UiText$(resId, *args)</ID>
    <ID>StringTemplate:AccountModal.kt$${currencyName}</ID>
    <ID>StringTemplate:AddRateModal.kt$${baseCurrency}</ID>
    <ID>StringTemplate:AddRateModal.kt$${toCurrency}</ID>
    <ID>StringTemplate:AmountFormatting.kt$${decimalPartString}</ID>
    <ID>StringTemplate:AmountModal.kt$${decimalPartString}</ID>
    <ID>StringTemplate:AmountModal.kt$${value}</ID>
    <ID>StringTemplate:FileUtil.kt$${dirPath}</ID>
    <ID>StringTemplate:GitHubBackupViewModel.kt$GitHubBackupViewModel$${owner}</ID>
    <ID>StringTemplate:GitHubBackupViewModel.kt$GitHubBackupViewModel$${repo}</ID>
    <ID>StringTemplate:ImportProcessing.kt$${progressPercent}</ID>
    <ID>StringTemplate:ItemIcon.kt$${size}</ID>
    <ID>StringTemplate:Migration117to118_Budgets.kt$Migration117to118_Budgets$${tableName}</ID>
    <ID>StringTemplate:PaywallScreen.kt$${usedCount}</ID>
    <ID>StringTemplate:PlansSheet.kt$${savePercentage}</ID>
    <ID>StringTemplate:ReorderModal.kt$Adapter.ItemViewHolder$${position}</ID>
    <ID>StringTemplate:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$${it}</ID>
    <ID>StringTemplate:SmartTitleSuggestionsLogic.kt$SmartTitleSuggestionsLogic$${title}</ID>
    <ID>SwallowedException:BackupLogic.kt$BackupLogic$e: Exception</ID>
    <ID>SwallowedException:CSVImporter.kt$CSVImporter$e: Exception</ID>
    <ID>SwallowedException:CSVImporterV2.kt$CSVImporterV2$e: Exception</ID>
    <ID>SwallowedException:CSVViewModel.kt$CSVViewModel$e: Exception</ID>
    <ID>SwallowedException:CalculatorModal.kt$e: Exception</ID>
    <ID>SwallowedException:ComposeExt.kt$e: Exception</ID>
    <ID>SwallowedException:GsonTypeAdapters.kt$ErrorCodeTypeAdapter$e: Exception</ID>
    <ID>SwallowedException:GsonTypeAdapters.kt$LocalDateTimeTypeAdapter$e: Exception</ID>
    <ID>SwallowedException:IntervalPickerRow.kt$e: Exception</ID>
    <ID>SwallowedException:ItemIcon.kt$e: Exception</ID>
    <ID>SwallowedException:Ivy_lintPlugin.kt$Ivy_lintPlugin$e: java.lang.reflect.InvocationTargetException</ID>
    <ID>SwallowedException:ParseFields.kt$e: Exception</ID>
    <ID>SwallowedException:ParseStatus.kt$e: Exception</ID>
    <ID>SwallowedException:Plan.kt$Plan$e: Exception</ID>
    <ID>SwallowedException:RestClient.kt$RestClient.Companion$e: NoSessionException</ID>
    <ID>SwallowedException:RootActivity.kt$RootActivity$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:RootViewModel.kt$RootViewModel$e: IllegalArgumentException</ID>
    <ID>ThrowsCount:RestClient.kt$RestClient.Companion$private fun newRetrofit(gson: Gson, session: IvySession): Retrofit</ID>
    <ID>TooGenericExceptionCaught:AccountSync.kt$AccountSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AccountUploader.kt$AccountUploader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AmountModal.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnalyticsReportViewModel.kt$AnalyticsReportViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupLogic.kt$BackupLogic$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Budget.kt$Budget$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BudgetCreator.kt$BudgetCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BudgetDTO.kt$BudgetDTO$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BudgetEntity.kt$BudgetEntity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BudgetSync.kt$BudgetSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BudgetUploader.kt$BudgetUploader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CSVImporter.kt$CSVImporter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CSVImporterV2.kt$CSVImporterV2$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CSVViewModel.kt$CSVViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CalculatorModal.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CategoryCreator.kt$CategoryCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CategorySync.kt$CategorySync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CategoryUploader.kt$CategoryUploader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ComposeExt.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EditPlannedViewModel.kt$EditPlannedViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EditTransactionViewModel.kt$EditTransactionViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExportCSVLogic.kt$ExportCSVLogic$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GitHubClient.kt$GitHubClient$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GsonTypeAdapters.kt$ErrorCodeTypeAdapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GsonTypeAdapters.kt$LocalDateTimeTypeAdapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImportViewModel.kt$ImportViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IntervalPickerRow.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ItemIcon.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IvyAnalytics.kt$IvyAnalytics$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IvyBilling.kt$IvyBilling$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IvyCurrency.kt$IvyCurrency.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Keyboard.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanCreator.kt$LoanCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanRecordCreator.kt$LoanRecordCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanRecordSync.kt$LoanRecordSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanRecordUploader.kt$LoanRecordUploader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanSync.kt$LoanSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanUploader.kt$LoanUploader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MigrationsManager.kt$MigrationsManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NotificationService.kt$NotificationService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OnboardingViewModel.kt$OnboardingViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ParseFields.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ParseStatus.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Plan.kt$Plan$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlannedPaymentRuleUploader.kt$PlannedPaymentRuleUploader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlannedPaymentSync.kt$PlannedPaymentSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RestClient.kt$RestClient.Companion$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:RootActivity.kt$RootActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsViewModel.kt$SettingsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncExchangeRatesAct.kt$SyncExchangeRatesAct$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TransactionSync.kt$TransactionSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:TransactionUploader.kt$TransactionUploader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UIExt.kt$e: Exception</ID>
    <ID>TooManyFunctions:AmountFormatting.kt$com.ivy.wallet.utils.AmountFormatting.kt</ID>
    <ID>TooManyFunctions:AppModuleDI.kt$AppModuleDI</ID>
    <ID>TooManyFunctions:BackupLogic.kt$BackupLogic</ID>
    <ID>TooManyFunctions:BudgetBattery.kt$com.ivy.wallet.ui.theme.components.BudgetBattery.kt</ID>
    <ID>TooManyFunctions:CSVImporter.kt$CSVImporter</ID>
    <ID>TooManyFunctions:CSVMapper.kt$CSVMapper</ID>
    <ID>TooManyFunctions:CSVScreen.kt$com.ivy.wallet.ui.csv.CSVScreen.kt</ID>
    <ID>TooManyFunctions:CSVViewModel.kt$CSVViewModel : ViewModel</ID>
    <ID>TooManyFunctions:ChartsViewModel.kt$ChartsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:Colors.kt$com.ivy.design.l0_system.Colors.kt</ID>
    <ID>TooManyFunctions:ComposeExt.kt$com.ivy.wallet.utils.ComposeExt.kt</ID>
    <ID>TooManyFunctions:CustomerJourneyLogic.kt$CustomerJourneyLogic$Companion</ID>
    <ID>TooManyFunctions:CustomerJourneyLogic.kt$com.ivy.wallet.domain.deprecated.logic.CustomerJourneyLogic.kt</ID>
    <ID>TooManyFunctions:DateExt.kt$com.ivy.wallet.utils.DateExt.kt</ID>
    <ID>TooManyFunctions:EditBottomSheet.kt$com.ivy.wallet.ui.edit.core.EditBottomSheet.kt</ID>
    <ID>TooManyFunctions:EditPlannedViewModel.kt$EditPlannedViewModel : ViewModel</ID>
    <ID>TooManyFunctions:EditTransactionViewModel.kt$EditTransactionViewModel : ViewModel</ID>
    <ID>TooManyFunctions:FilterOverlay.kt$com.ivy.wallet.ui.reports.FilterOverlay.kt</ID>
    <ID>TooManyFunctions:HomeViewModel.kt$HomeViewModel : FRPViewModel</ID>
    <ID>TooManyFunctions:ItemIcon.kt$com.ivy.wallet.ui.theme.components.ItemIcon.kt</ID>
    <ID>TooManyFunctions:ItemStatisticViewModel.kt$ItemStatisticViewModel : ViewModel</ID>
    <ID>TooManyFunctions:IvyColors.kt$com.ivy.wallet.ui.theme.IvyColors.kt</ID>
    <ID>TooManyFunctions:IvyLineChart.kt$com.ivy.wallet.ui.theme.components.charts.linechart.IvyLineChart.kt</ID>
    <ID>TooManyFunctions:IvyModalComponents.kt$com.ivy.wallet.ui.theme.modal.IvyModalComponents.kt</ID>
    <ID>TooManyFunctions:IvyRoomDatabase.kt$IvyRoomDatabase : RoomDatabase</ID>
    <ID>TooManyFunctions:LoanTransactionsCore.kt$LoanTransactionsCore</ID>
    <ID>TooManyFunctions:OnboardingRouter.kt$OnboardingRouter</ID>
    <ID>TooManyFunctions:OnboardingViewModel.kt$OnboardingViewModel : ViewModel</ID>
    <ID>TooManyFunctions:ParseFields.kt$com.ivy.wallet.ui.csv.domain.ParseFields.kt</ID>
    <ID>TooManyFunctions:PieChartStatisticViewModel.kt$PieChartStatisticViewModel : FRPViewModel</ID>
    <ID>TooManyFunctions:PlannedPaymentRuleDao.kt$PlannedPaymentRuleDao</ID>
    <ID>TooManyFunctions:PlannedPaymentsLogic.kt$PlannedPaymentsLogic</ID>
    <ID>TooManyFunctions:ReportViewModel.kt$ReportViewModel : FRPViewModel</ID>
    <ID>TooManyFunctions:RoomTypeConverters.kt$RoomTypeConverters</ID>
    <ID>TooManyFunctions:RootActivity.kt$RootActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:RootViewModel.kt$RootViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SettingsScreen.kt$com.ivy.wallet.ui.settings.SettingsScreen.kt</ID>
    <ID>TooManyFunctions:SettingsViewModel.kt$SettingsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SharedPrefs.kt$SharedPrefs</ID>
    <ID>TooManyFunctions:TransactionCard.kt$com.ivy.wallet.ui.component.transaction.TransactionCard.kt</ID>
    <ID>TooManyFunctions:TransactionDao.kt$TransactionDao</ID>
    <ID>TooManyFunctions:UIExt.kt$com.ivy.wallet.utils.UIExt.kt</ID>
    <ID>TooManyFunctions:UtilExt.kt$com.ivy.wallet.utils.UtilExt.kt</ID>
    <ID>TooManyFunctions:WalletAccountLogic.kt$WalletAccountLogic</ID>
    <ID>TooManyFunctions:WalletCategoryLogic.kt$WalletCategoryLogic</ID>
    <ID>TopLevelPropertyNaming:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val io.gitlab.arturbosch.detekt.extensions.DetektExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors4ymijgaek646mzru18sdmblu7.kt$/** * Retrieves the [detekt][io.gitlab.arturbosch.detekt.extensions.DetektExtension] extension. */ internal val org.gradle.api.Project.`detekt`: io.gitlab.arturbosch.detekt.extensions.DetektExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("detekt") as io.gitlab.arturbosch.detekt.extensions.DetektExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$/** * Provides the existing [detekt][io.gitlab.arturbosch.detekt.Detekt] task. */ internal val TaskContainer.`detekt`: TaskProvider&lt;io.gitlab.arturbosch.detekt.Detekt&gt; get() = named&lt;io.gitlab.arturbosch.detekt.Detekt&gt;("detekt")</ID>
    <ID>TopLevelPropertyNaming:Accessors6m89nhcqblthog8es93pjkmhg.kt$/** * Provides the existing [detektPlugins][org.gradle.api.artifacts.Configuration] element. */ internal val org.gradle.api.NamedDomainObjectContainer&lt;org.gradle.api.artifacts.Configuration&gt;.`detektPlugins`: NamedDomainObjectProvider&lt;org.gradle.api.artifacts.Configuration&gt; get() = named&lt;org.gradle.api.artifacts.Configuration&gt;("detektPlugins")</ID>
    <ID>TopLevelPropertyNaming:Accessors72k7tti784t7idmqtg2upvaru.kt$/** * Provides the existing [detekt][org.gradle.api.artifacts.Configuration] element. */ internal val org.gradle.api.NamedDomainObjectContainer&lt;org.gradle.api.artifacts.Configuration&gt;.`detekt`: NamedDomainObjectProvider&lt;org.gradle.api.artifacts.Configuration&gt; get() = named&lt;org.gradle.api.artifacts.Configuration&gt;("detekt")</ID>
    <ID>TopLevelPropertyNaming:Accessors7hvycqvau4uyj5knata7lx0yx.kt$/** * Provides the existing [detektGenerateConfig][io.gitlab.arturbosch.detekt.DetektGenerateConfigTask] task. */ internal val TaskContainer.`detektGenerateConfig`: TaskProvider&lt;io.gitlab.arturbosch.detekt.DetektGenerateConfigTask&gt; get() = named&lt;io.gitlab.arturbosch.detekt.DetektGenerateConfigTask&gt;("detektGenerateConfig")</ID>
    <ID>TopLevelPropertyNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.artifacts.dsl.DependencyHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessorsa5ptgikd9fb816fav4742zvaq.kt$/** * Provides the existing [detektBaseline][io.gitlab.arturbosch.detekt.DetektCreateBaselineTask] task. */ internal val TaskContainer.`detektBaseline`: TaskProvider&lt;io.gitlab.arturbosch.detekt.DetektCreateBaselineTask&gt; get() = named&lt;io.gitlab.arturbosch.detekt.DetektCreateBaselineTask&gt;("detektBaseline")</ID>
    <ID>TopLevelPropertyNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.Project.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$/** * Retrieves the [reporting][org.gradle.api.reporting.ReportingExtension] extension. */ internal val org.gradle.api.Project.`reporting`: org.gradle.api.reporting.ReportingExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("reporting") as org.gradle.api.reporting.ReportingExtension</ID>
    <ID>TopLevelPropertyNaming:Accessorseessl0al0otcsbyqqruvoncpd.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.reporting.ReportingExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.internal.kotlin.multiplatform`. */ internal val `ComAndroidInternalKotlinPluginGroup`.`multiplatform`: `ComAndroidInternalKotlinMultiplatformPluginGroup` get() = `ComAndroidInternalKotlinMultiplatformPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.internal.kotlin`. */ internal val `ComAndroidInternalPluginGroup`.`kotlin`: `ComAndroidInternalKotlinPluginGroup` get() = `ComAndroidInternalKotlinPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.internal`. */ internal val `ComAndroidPluginGroup`.`internal`: `ComAndroidInternalPluginGroup` get() = `ComAndroidInternalPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.kotlin.multiplatform`. */ internal val `ComAndroidKotlinPluginGroup`.`multiplatform`: `ComAndroidKotlinMultiplatformPluginGroup` get() = `ComAndroidKotlinMultiplatformPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.kotlin`. */ internal val `ComAndroidPluginGroup`.`kotlin`: `ComAndroidKotlinPluginGroup` get() = `ComAndroidKotlinPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android`. */ internal val `ComPluginGroup`.`android`: `ComAndroidPluginGroup` get() = `ComAndroidPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.dagger.hilt`. */ internal val `ComGoogleDaggerPluginGroup`.`hilt`: `ComGoogleDaggerHiltPluginGroup` get() = `ComGoogleDaggerHiltPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.dagger`. */ internal val `ComGooglePluginGroup`.`dagger`: `ComGoogleDaggerPluginGroup` get() = `ComGoogleDaggerPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.firebase`. */ internal val `ComGooglePluginGroup`.`firebase`: `ComGoogleFirebasePluginGroup` get() = `ComGoogleFirebasePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.gms`. */ internal val `ComGooglePluginGroup`.`gms`: `ComGoogleGmsPluginGroup` get() = `ComGoogleGmsPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google`. */ internal val `ComPluginGroup`.`google`: `ComGooglePluginGroup` get() = `ComGooglePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com`. */ internal val `PluginDependenciesSpec`.`com`: `ComPluginGroup` get() = `ComPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `dagger.hilt.android`. */ internal val `DaggerHiltPluginGroup`.`android`: `DaggerHiltAndroidPluginGroup` get() = `DaggerHiltAndroidPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `dagger.hilt`. */ internal val `DaggerPluginGroup`.`hilt`: `DaggerHiltPluginGroup` get() = `DaggerHiltPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `dagger`. */ internal val `PluginDependenciesSpec`.`dagger`: `DaggerPluginGroup` get() = `DaggerPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.github.detekt.gradle`. */ internal val `IoGithubDetektPluginGroup`.`gradle`: `IoGithubDetektGradlePluginGroup` get() = `IoGithubDetektGradlePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.github.detekt`. */ internal val `IoGithubPluginGroup`.`detekt`: `IoGithubDetektPluginGroup` get() = `IoGithubDetektPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.github`. */ internal val `IoPluginGroup`.`github`: `IoGithubPluginGroup` get() = `IoGithubPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.gitlab.arturbosch`. */ internal val `IoGitlabPluginGroup`.`arturbosch`: `IoGitlabArturboschPluginGroup` get() = `IoGitlabArturboschPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.gitlab`. */ internal val `IoPluginGroup`.`gitlab`: `IoGitlabPluginGroup` get() = `IoGitlabPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io`. */ internal val `PluginDependenciesSpec`.`io`: `IoPluginGroup` get() = `IoPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.gradle`. */ internal val `OrgPluginGroup`.`gradle`: `OrgGradlePluginGroup` get() = `OrgGradlePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin.native`. */ internal val `OrgJetbrainsKotlinPluginGroup`.`native`: `OrgJetbrainsKotlinNativePluginGroup` get() = `OrgJetbrainsKotlinNativePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin.platform`. */ internal val `OrgJetbrainsKotlinPluginGroup`.`platform`: `OrgJetbrainsKotlinPlatformPluginGroup` get() = `OrgJetbrainsKotlinPlatformPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin.plugin`. */ internal val `OrgJetbrainsKotlinPluginGroup`.`plugin`: `OrgJetbrainsKotlinPluginPluginGroup` get() = `OrgJetbrainsKotlinPluginPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin`. */ internal val `OrgJetbrainsPluginGroup`.`kotlin`: `OrgJetbrainsKotlinPluginGroup` get() = `OrgJetbrainsKotlinPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains`. */ internal val `OrgPluginGroup`.`jetbrains`: `OrgJetbrainsPluginGroup` get() = `OrgJetbrainsPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org`. */ internal val `PluginDependenciesSpec`.`org`: `OrgPluginGroup` get() = `OrgPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `android-library` plugin implemented by [com.android.build.gradle.LibraryPlugin]. */ internal val `PluginDependenciesSpec`.`android-library`: PluginDependencySpec get() = this.id("android-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `android-reporting` plugin implemented by [com.android.build.gradle.ReportingPlugin]. */ internal val `PluginDependenciesSpec`.`android-reporting`: PluginDependencySpec get() = this.id("android-reporting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `android` plugin implemented by [com.android.build.gradle.AppPlugin]. */ internal val `PluginDependenciesSpec`.`android`: PluginDependencySpec get() = this.id("android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.application` plugin implemented by [com.android.build.gradle.AppPlugin]. */ internal val `ComAndroidPluginGroup`.`application`: PluginDependencySpec get() = plugins.id("com.android.application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.asset-pack-bundle` plugin implemented by [com.android.build.gradle.AssetPackBundlePlugin]. */ internal val `ComAndroidPluginGroup`.`asset-pack-bundle`: PluginDependencySpec get() = plugins.id("com.android.asset-pack-bundle")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.asset-pack` plugin implemented by [com.android.build.gradle.AssetPackPlugin]. */ internal val `ComAndroidPluginGroup`.`asset-pack`: PluginDependencySpec get() = plugins.id("com.android.asset-pack")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.base` plugin implemented by [com.android.build.gradle.api.AndroidBasePlugin]. */ internal val `ComAndroidPluginGroup`.`base`: PluginDependencySpec get() = plugins.id("com.android.base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.dynamic-feature` plugin implemented by [com.android.build.gradle.DynamicFeaturePlugin]. */ internal val `ComAndroidPluginGroup`.`dynamic-feature`: PluginDependencySpec get() = plugins.id("com.android.dynamic-feature")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.fused-library` plugin implemented by [com.android.build.gradle.api.FusedLibraryPlugin]. */ internal val `ComAndroidPluginGroup`.`fused-library`: PluginDependencySpec get() = plugins.id("com.android.fused-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.application` plugin implemented by [com.android.build.gradle.internal.plugins.AppPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`application`: PluginDependencySpec get() = plugins.id("com.android.internal.application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.asset-pack-bundle` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackBundlePlugin]. */ internal val `ComAndroidInternalPluginGroup`.`asset-pack-bundle`: PluginDependencySpec get() = plugins.id("com.android.internal.asset-pack-bundle")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.asset-pack` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`asset-pack`: PluginDependencySpec get() = plugins.id("com.android.internal.asset-pack")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.dynamic-feature` plugin implemented by [com.android.build.gradle.internal.plugins.DynamicFeaturePlugin]. */ internal val `ComAndroidInternalPluginGroup`.`dynamic-feature`: PluginDependencySpec get() = plugins.id("com.android.internal.dynamic-feature")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.fused-library` plugin implemented by [com.android.build.gradle.internal.plugins.FusedLibraryPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`fused-library`: PluginDependencySpec get() = plugins.id("com.android.internal.fused-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.internal.plugins.KotlinMultiplatformAndroidPlugin]. */ internal val `ComAndroidInternalKotlinMultiplatformPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.internal.kotlin.multiplatform.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.library` plugin implemented by [com.android.build.gradle.internal.plugins.LibraryPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.internal.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.lint` plugin implemented by [com.android.build.gradle.internal.plugins.LintPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`lint`: PluginDependencySpec get() = plugins.id("com.android.internal.lint")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.privacy-sandbox-sdk` plugin implemented by [com.android.build.gradle.internal.plugins.PrivacySandboxSdkPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`privacy-sandbox-sdk`: PluginDependencySpec get() = plugins.id("com.android.internal.privacy-sandbox-sdk")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.reporting` plugin implemented by [com.android.build.gradle.internal.plugins.ReportingPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`reporting`: PluginDependencySpec get() = plugins.id("com.android.internal.reporting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.test` plugin implemented by [com.android.build.gradle.internal.plugins.TestPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`test`: PluginDependencySpec get() = plugins.id("com.android.internal.test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.version-check` plugin implemented by [com.android.build.gradle.internal.plugins.VersionCheckPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`version-check`: PluginDependencySpec get() = plugins.id("com.android.internal.version-check")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.api.KotlinMultiplatformAndroidPlugin]. */ internal val `ComAndroidKotlinMultiplatformPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.kotlin.multiplatform.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.library` plugin implemented by [com.android.build.gradle.LibraryPlugin]. */ internal val `ComAndroidPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.lint` plugin implemented by [com.android.build.gradle.LintPlugin]. */ internal val `ComAndroidPluginGroup`.`lint`: PluginDependencySpec get() = plugins.id("com.android.lint")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.privacy-sandbox-sdk` plugin implemented by [com.android.build.gradle.api.PrivacySandboxSdkPlugin]. */ internal val `ComAndroidPluginGroup`.`privacy-sandbox-sdk`: PluginDependencySpec get() = plugins.id("com.android.privacy-sandbox-sdk")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.reporting` plugin implemented by [com.android.build.gradle.ReportingPlugin]. */ internal val `ComAndroidPluginGroup`.`reporting`: PluginDependencySpec get() = plugins.id("com.android.reporting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.test` plugin implemented by [com.android.build.gradle.TestPlugin]. */ internal val `ComAndroidPluginGroup`.`test`: PluginDependencySpec get() = plugins.id("com.android.test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.google.dagger.hilt.android` plugin implemented by [dagger.hilt.android.plugin.HiltGradlePlugin]. */ internal val `ComGoogleDaggerHiltPluginGroup`.`android`: PluginDependencySpec get() = plugins.id("com.google.dagger.hilt.android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.google.firebase.crashlytics` plugin implemented by [com.google.firebase.crashlytics.gradle.CrashlyticsPlugin]. */ internal val `ComGoogleFirebasePluginGroup`.`crashlytics`: PluginDependencySpec get() = plugins.id("com.google.firebase.crashlytics")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.google.gms.google-services` plugin implemented by [com.google.gms.googleservices.GoogleServicesPlugin]. */ internal val `ComGoogleGmsPluginGroup`.`google-services`: PluginDependencySpec get() = plugins.id("com.google.gms.google-services")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `dagger.hilt.android.plugin` plugin implemented by [dagger.hilt.android.plugin.HiltGradlePlugin]. */ internal val `DaggerHiltAndroidPluginGroup`.`plugin`: PluginDependencySpec get() = plugins.id("dagger.hilt.android.plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `io.github.detekt.gradle.compiler-plugin` plugin implemented by [io.github.detekt.gradle.DetektKotlinCompilerPlugin]. */ internal val `IoGithubDetektGradlePluginGroup`.`compiler-plugin`: PluginDependencySpec get() = plugins.id("io.github.detekt.gradle.compiler-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `io.gitlab.arturbosch.detekt` plugin implemented by [io.gitlab.arturbosch.detekt.DetektPlugin]. */ internal val `IoGitlabArturboschPluginGroup`.`detekt`: PluginDependencySpec get() = plugins.id("io.gitlab.arturbosch.detekt")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-android-extensions` plugin implemented by [org.jetbrains.kotlin.gradle.internal.AndroidExtensionsSubpluginIndicator]. */ internal val `PluginDependenciesSpec`.`kotlin-android-extensions`: PluginDependencySpec get() = this.id("kotlin-android-extensions")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper]. */ internal val `PluginDependenciesSpec`.`kotlin-android`: PluginDependencySpec get() = this.id("kotlin-android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-kapt` plugin implemented by [org.jetbrains.kotlin.gradle.internal.Kapt3GradleSubplugin]. */ internal val `PluginDependenciesSpec`.`kotlin-kapt`: PluginDependencySpec get() = this.id("kotlin-kapt")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper]. */ internal val `PluginDependenciesSpec`.`kotlin-multiplatform`: PluginDependencySpec get() = this.id("kotlin-multiplatform")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-native-cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-native-cocoapods`: PluginDependencySpec get() = this.id("kotlin-native-cocoapods")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-native-performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-native-performance`: PluginDependencySpec get() = this.id("kotlin-native-performance")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-parcelize` plugin implemented by [org.jetbrains.kotlin.gradle.internal.ParcelizeSubplugin]. */ internal val `PluginDependenciesSpec`.`kotlin-parcelize`: PluginDependencySpec get() = this.id("kotlin-parcelize")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformAndroidPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-android`: PluginDependencySpec get() = this.id("kotlin-platform-android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-common` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformCommonPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-common`: PluginDependencySpec get() = this.id("kotlin-platform-common")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJsPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-js`: PluginDependencySpec get() = this.id("kotlin-platform-js")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-jvm`: PluginDependencySpec get() = this.id("kotlin-platform-jvm")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin]. */ internal val `PluginDependenciesSpec`.`kotlin-scripting`: PluginDependencySpec get() = this.id("kotlin-scripting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapper]. */ internal val `PluginDependenciesSpec`.`kotlin`: PluginDependencySpec get() = this.id("kotlin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.antlr` plugin implemented by [org.gradle.api.plugins.antlr.AntlrPlugin]. */ internal val `OrgGradlePluginGroup`.`antlr`: PluginDependencySpec get() = plugins.id("org.gradle.antlr")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.application` plugin implemented by [org.gradle.api.plugins.ApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`application`: PluginDependencySpec get() = plugins.id("org.gradle.application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.assembler-lang` plugin implemented by [org.gradle.language.assembler.plugins.AssemblerLangPlugin]. */ internal val `OrgGradlePluginGroup`.`assembler-lang`: PluginDependencySpec get() = plugins.id("org.gradle.assembler-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.assembler` plugin implemented by [org.gradle.language.assembler.plugins.AssemblerPlugin]. */ internal val `OrgGradlePluginGroup`.`assembler`: PluginDependencySpec get() = plugins.id("org.gradle.assembler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.base` plugin implemented by [org.gradle.api.plugins.BasePlugin]. */ internal val `OrgGradlePluginGroup`.`base`: PluginDependencySpec get() = plugins.id("org.gradle.base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.binary-base` plugin implemented by [org.gradle.platform.base.plugins.BinaryBasePlugin]. */ internal val `OrgGradlePluginGroup`.`binary-base`: PluginDependencySpec get() = plugins.id("org.gradle.binary-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.build-dashboard` plugin implemented by [org.gradle.api.reporting.plugins.BuildDashboardPlugin]. */ internal val `OrgGradlePluginGroup`.`build-dashboard`: PluginDependencySpec get() = plugins.id("org.gradle.build-dashboard")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.build-init` plugin implemented by [org.gradle.buildinit.plugins.BuildInitPlugin]. */ internal val `OrgGradlePluginGroup`.`build-init`: PluginDependencySpec get() = plugins.id("org.gradle.build-init")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.c-lang` plugin implemented by [org.gradle.language.c.plugins.CLangPlugin]. */ internal val `OrgGradlePluginGroup`.`c-lang`: PluginDependencySpec get() = plugins.id("org.gradle.c-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.c` plugin implemented by [org.gradle.language.c.plugins.CPlugin]. */ internal val `OrgGradlePluginGroup`.`c`: PluginDependencySpec get() = plugins.id("org.gradle.c")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.checkstyle` plugin implemented by [org.gradle.api.plugins.quality.CheckstylePlugin]. */ internal val `OrgGradlePluginGroup`.`checkstyle`: PluginDependencySpec get() = plugins.id("org.gradle.checkstyle")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.clang-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.ClangCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`clang-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.clang-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.codenarc` plugin implemented by [org.gradle.api.plugins.quality.CodeNarcPlugin]. */ internal val `OrgGradlePluginGroup`.`codenarc`: PluginDependencySpec get() = plugins.id("org.gradle.codenarc")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.component-base` plugin implemented by [org.gradle.platform.base.plugins.ComponentBasePlugin]. */ internal val `OrgGradlePluginGroup`.`component-base`: PluginDependencySpec get() = plugins.id("org.gradle.component-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.component-model-base` plugin implemented by [org.gradle.language.base.plugins.ComponentModelBasePlugin]. */ internal val `OrgGradlePluginGroup`.`component-model-base`: PluginDependencySpec get() = plugins.id("org.gradle.component-model-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-application` plugin implemented by [org.gradle.language.cpp.plugins.CppApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-application`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-lang` plugin implemented by [org.gradle.language.cpp.plugins.CppLangPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-lang`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-library` plugin implemented by [org.gradle.language.cpp.plugins.CppLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-library`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-unit-test` plugin implemented by [org.gradle.nativeplatform.test.cpp.plugins.CppUnitTestPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-unit-test`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-unit-test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp` plugin implemented by [org.gradle.language.cpp.plugins.CppPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp`: PluginDependencySpec get() = plugins.id("org.gradle.cpp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cunit-test-suite` plugin implemented by [org.gradle.nativeplatform.test.cunit.plugins.CUnitPlugin]. */ internal val `OrgGradlePluginGroup`.`cunit-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.cunit-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cunit` plugin implemented by [org.gradle.nativeplatform.test.cunit.plugins.CUnitConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`cunit`: PluginDependencySpec get() = plugins.id("org.gradle.cunit")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.distribution` plugin implemented by [org.gradle.api.distribution.plugins.DistributionPlugin]. */ internal val `OrgGradlePluginGroup`.`distribution`: PluginDependencySpec get() = plugins.id("org.gradle.distribution")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.ear` plugin implemented by [org.gradle.plugins.ear.EarPlugin]. */ internal val `OrgGradlePluginGroup`.`ear`: PluginDependencySpec get() = plugins.id("org.gradle.ear")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.eclipse-wtp` plugin implemented by [org.gradle.plugins.ide.eclipse.EclipseWtpPlugin]. */ internal val `OrgGradlePluginGroup`.`eclipse-wtp`: PluginDependencySpec get() = plugins.id("org.gradle.eclipse-wtp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.eclipse` plugin implemented by [org.gradle.plugins.ide.eclipse.EclipsePlugin]. */ internal val `OrgGradlePluginGroup`.`eclipse`: PluginDependencySpec get() = plugins.id("org.gradle.eclipse")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.gcc-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.GccCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`gcc-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.gcc-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.google-test-test-suite` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestPlugin]. */ internal val `OrgGradlePluginGroup`.`google-test-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.google-test-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.google-test` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`google-test`: PluginDependencySpec get() = plugins.id("org.gradle.google-test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy-base` plugin implemented by [org.gradle.api.plugins.GroovyBasePlugin]. */ internal val `OrgGradlePluginGroup`.`groovy-base`: PluginDependencySpec get() = plugins.id("org.gradle.groovy-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.internal.precompiled.PrecompiledGroovyPluginsPlugin]. */ internal val `OrgGradlePluginGroup`.`groovy-gradle-plugin`: PluginDependencySpec get() = plugins.id("org.gradle.groovy-gradle-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy` plugin implemented by [org.gradle.api.plugins.GroovyPlugin]. */ internal val `OrgGradlePluginGroup`.`groovy`: PluginDependencySpec get() = plugins.id("org.gradle.groovy")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.help-tasks` plugin implemented by [org.gradle.api.plugins.HelpTasksPlugin]. */ internal val `OrgGradlePluginGroup`.`help-tasks`: PluginDependencySpec get() = plugins.id("org.gradle.help-tasks")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.idea` plugin implemented by [org.gradle.plugins.ide.idea.IdeaPlugin]. */ internal val `OrgGradlePluginGroup`.`idea`: PluginDependencySpec get() = plugins.id("org.gradle.idea")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.ivy-publish` plugin implemented by [org.gradle.api.publish.ivy.plugins.IvyPublishPlugin]. */ internal val `OrgGradlePluginGroup`.`ivy-publish`: PluginDependencySpec get() = plugins.id("org.gradle.ivy-publish")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jacoco-report-aggregation` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoReportAggregationPlugin]. */ internal val `OrgGradlePluginGroup`.`jacoco-report-aggregation`: PluginDependencySpec get() = plugins.id("org.gradle.jacoco-report-aggregation")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jacoco` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoPlugin]. */ internal val `OrgGradlePluginGroup`.`jacoco`: PluginDependencySpec get() = plugins.id("org.gradle.jacoco")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-base` plugin implemented by [org.gradle.api.plugins.JavaBasePlugin]. */ internal val `OrgGradlePluginGroup`.`java-base`: PluginDependencySpec get() = plugins.id("org.gradle.java-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin]. */ internal val `OrgGradlePluginGroup`.`java-gradle-plugin`: PluginDependencySpec get() = plugins.id("org.gradle.java-gradle-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-library-distribution` plugin implemented by [org.gradle.api.plugins.JavaLibraryDistributionPlugin]. */ internal val `OrgGradlePluginGroup`.`java-library-distribution`: PluginDependencySpec get() = plugins.id("org.gradle.java-library-distribution")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-library` plugin implemented by [org.gradle.api.plugins.JavaLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`java-library`: PluginDependencySpec get() = plugins.id("org.gradle.java-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-platform` plugin implemented by [org.gradle.api.plugins.JavaPlatformPlugin]. */ internal val `OrgGradlePluginGroup`.`java-platform`: PluginDependencySpec get() = plugins.id("org.gradle.java-platform")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-test-fixtures` plugin implemented by [org.gradle.api.plugins.JavaTestFixturesPlugin]. */ internal val `OrgGradlePluginGroup`.`java-test-fixtures`: PluginDependencySpec get() = plugins.id("org.gradle.java-test-fixtures")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java` plugin implemented by [org.gradle.api.plugins.JavaPlugin]. */ internal val `OrgGradlePluginGroup`.`java`: PluginDependencySpec get() = plugins.id("org.gradle.java")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jdk-toolchains` plugin implemented by [org.gradle.api.plugins.JdkToolchainsPlugin]. */ internal val `OrgGradlePluginGroup`.`jdk-toolchains`: PluginDependencySpec get() = plugins.id("org.gradle.jdk-toolchains")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-ecosystem` plugin implemented by [org.gradle.api.plugins.JvmEcosystemPlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-ecosystem`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-ecosystem")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-test-suite` plugin implemented by [org.gradle.api.plugins.JvmTestSuitePlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-toolchain-management` plugin implemented by [org.gradle.api.plugins.JvmToolchainManagementPlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-toolchain-management`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-toolchain-management")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-toolchains` plugin implemented by [org.gradle.api.plugins.JvmToolchainsPlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-toolchains`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-toolchains")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.language-base` plugin implemented by [org.gradle.language.base.plugins.LanguageBasePlugin]. */ internal val `OrgGradlePluginGroup`.`language-base`: PluginDependencySpec get() = plugins.id("org.gradle.language-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.lifecycle-base` plugin implemented by [org.gradle.language.base.plugins.LifecycleBasePlugin]. */ internal val `OrgGradlePluginGroup`.`lifecycle-base`: PluginDependencySpec get() = plugins.id("org.gradle.lifecycle-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.maven-publish` plugin implemented by [org.gradle.api.publish.maven.plugins.MavenPublishPlugin]. */ internal val `OrgGradlePluginGroup`.`maven-publish`: PluginDependencySpec get() = plugins.id("org.gradle.maven-publish")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.microsoft-visual-cpp-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.MicrosoftVisualCppCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`microsoft-visual-cpp-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.microsoft-visual-cpp-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.native-component-model` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentModelPlugin]. */ internal val `OrgGradlePluginGroup`.`native-component-model`: PluginDependencySpec get() = plugins.id("org.gradle.native-component-model")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.native-component` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentPlugin]. */ internal val `OrgGradlePluginGroup`.`native-component`: PluginDependencySpec get() = plugins.id("org.gradle.native-component")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-c-lang` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCLangPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-c-lang`: PluginDependencySpec get() = plugins.id("org.gradle.objective-c-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-c` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-c`: PluginDependencySpec get() = plugins.id("org.gradle.objective-c")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-cpp-lang` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppLangPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-cpp-lang`: PluginDependencySpec get() = plugins.id("org.gradle.objective-cpp-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-cpp` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-cpp`: PluginDependencySpec get() = plugins.id("org.gradle.objective-cpp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.pmd` plugin implemented by [org.gradle.api.plugins.quality.PmdPlugin]. */ internal val `OrgGradlePluginGroup`.`pmd`: PluginDependencySpec get() = plugins.id("org.gradle.pmd")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.project-report` plugin implemented by [org.gradle.api.plugins.ProjectReportsPlugin]. */ internal val `OrgGradlePluginGroup`.`project-report`: PluginDependencySpec get() = plugins.id("org.gradle.project-report")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.project-reports` plugin implemented by [org.gradle.api.plugins.ProjectReportsPlugin]. */ internal val `OrgGradlePluginGroup`.`project-reports`: PluginDependencySpec get() = plugins.id("org.gradle.project-reports")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.publishing` plugin implemented by [org.gradle.api.publish.plugins.PublishingPlugin]. */ internal val `OrgGradlePluginGroup`.`publishing`: PluginDependencySpec get() = plugins.id("org.gradle.publishing")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.reporting-base` plugin implemented by [org.gradle.api.plugins.ReportingBasePlugin]. */ internal val `OrgGradlePluginGroup`.`reporting-base`: PluginDependencySpec get() = plugins.id("org.gradle.reporting-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.scala-base` plugin implemented by [org.gradle.api.plugins.scala.ScalaBasePlugin]. */ internal val `OrgGradlePluginGroup`.`scala-base`: PluginDependencySpec get() = plugins.id("org.gradle.scala-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.scala` plugin implemented by [org.gradle.api.plugins.scala.ScalaPlugin]. */ internal val `OrgGradlePluginGroup`.`scala`: PluginDependencySpec get() = plugins.id("org.gradle.scala")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.signing` plugin implemented by [org.gradle.plugins.signing.SigningPlugin]. */ internal val `OrgGradlePluginGroup`.`signing`: PluginDependencySpec get() = plugins.id("org.gradle.signing")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.standard-tool-chains` plugin implemented by [org.gradle.nativeplatform.toolchain.internal.plugins.StandardToolChainsPlugin]. */ internal val `OrgGradlePluginGroup`.`standard-tool-chains`: PluginDependencySpec get() = plugins.id("org.gradle.standard-tool-chains")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swift-application` plugin implemented by [org.gradle.language.swift.plugins.SwiftApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`swift-application`: PluginDependencySpec get() = plugins.id("org.gradle.swift-application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swift-library` plugin implemented by [org.gradle.language.swift.plugins.SwiftLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`swift-library`: PluginDependencySpec get() = plugins.id("org.gradle.swift-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swiftpm-export` plugin implemented by [org.gradle.swiftpm.plugins.SwiftPackageManagerExportPlugin]. */ internal val `OrgGradlePluginGroup`.`swiftpm-export`: PluginDependencySpec get() = plugins.id("org.gradle.swiftpm-export")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.test-report-aggregation` plugin implemented by [org.gradle.api.plugins.TestReportAggregationPlugin]. */ internal val `OrgGradlePluginGroup`.`test-report-aggregation`: PluginDependencySpec get() = plugins.id("org.gradle.test-report-aggregation")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.test-suite-base` plugin implemented by [org.gradle.testing.base.plugins.TestSuiteBasePlugin]. */ internal val `OrgGradlePluginGroup`.`test-suite-base`: PluginDependencySpec get() = plugins.id("org.gradle.test-suite-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.version-catalog` plugin implemented by [org.gradle.api.plugins.catalog.VersionCatalogPlugin]. */ internal val `OrgGradlePluginGroup`.`version-catalog`: PluginDependencySpec get() = plugins.id("org.gradle.version-catalog")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.visual-studio` plugin implemented by [org.gradle.ide.visualstudio.plugins.VisualStudioPlugin]. */ internal val `OrgGradlePluginGroup`.`visual-studio`: PluginDependencySpec get() = plugins.id("org.gradle.visual-studio")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.war` plugin implemented by [org.gradle.api.plugins.WarPlugin]. */ internal val `OrgGradlePluginGroup`.`war`: PluginDependencySpec get() = plugins.id("org.gradle.war")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.windows-resource-script` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourceScriptPlugin]. */ internal val `OrgGradlePluginGroup`.`windows-resource-script`: PluginDependencySpec get() = plugins.id("org.gradle.windows-resource-script")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.windows-resources` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourcesPlugin]. */ internal val `OrgGradlePluginGroup`.`windows-resources`: PluginDependencySpec get() = plugins.id("org.gradle.windows-resources")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.wrapper` plugin implemented by [org.gradle.buildinit.plugins.WrapperPlugin]. */ internal val `OrgGradlePluginGroup`.`wrapper`: PluginDependencySpec get() = plugins.id("org.gradle.wrapper")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.xcode` plugin implemented by [org.gradle.ide.xcode.plugins.XcodePlugin]. */ internal val `OrgGradlePluginGroup`.`xcode`: PluginDependencySpec get() = plugins.id("org.gradle.xcode")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.xctest` plugin implemented by [org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`xctest`: PluginDependencySpec get() = plugins.id("org.gradle.xctest")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`android`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinJsPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`js`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.js")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`jvm`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.jvm")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.kapt` plugin implemented by [org.jetbrains.kotlin.gradle.internal.Kapt3GradleSubplugin]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`kapt`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.kapt")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`multiplatform`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.multiplatform")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.native.cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin]. */ internal val `OrgJetbrainsKotlinNativePluginGroup`.`cocoapods`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.native.cocoapods")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.native.performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin]. */ internal val `OrgJetbrainsKotlinNativePluginGroup`.`performance`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.native.performance")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformAndroidPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`android`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.common` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformCommonPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`common`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.common")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJsPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`js`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.js")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`jvm`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.jvm")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.plugin.parcelize` plugin implemented by [org.jetbrains.kotlin.gradle.internal.ParcelizeSubplugin]. */ internal val `OrgJetbrainsKotlinPluginPluginGroup`.`parcelize`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.plugin.parcelize")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.plugin.scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin]. */ internal val `OrgJetbrainsKotlinPluginPluginGroup`.`scripting`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.plugin.scripting")</ID>
    <ID>UnnecessaryParenthesesBeforeTrailingLambda:EditBottomSheet.kt$()</ID>
    <ID>UnstableCollections:BudgetModal.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:BudgetModal.kt$List&lt;UUID&gt;</ID>
    <ID>UnstableCollections:BudgetScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:BudgetScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:BudgetScreen.kt$List&lt;DisplayBudget&gt;</ID>
    <ID>UnstableCollections:CSVViewModel.kt$CSVViewModel$List&lt;CSVRow&gt;?</ID>
    <ID>UnstableCollections:CategoriesScreen.kt$List&lt;SortOrder&gt;</ID>
    <ID>UnstableCollections:CategoryCharts.kt$List&lt;CategoryValues&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;CategoryValues&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;IncomeExpenseChartPoint&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;SingleChartPoint&gt;</ID>
    <ID>UnstableCollections:ChooseCategoryModal.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ChooseIconModal.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:CustomerJourney.kt$List&lt;CustomerJourneyCardData&gt;</ID>
    <ID>UnstableCollections:EditBottomSheet.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:EditPlannedScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:EditPlannedScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:EditTransactionScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:EditTransactionScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:EditTransactionScreen.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:FilterOverlay.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:FilterOverlay.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:HomeTab.kt$List&lt;CustomerJourneyCardData&gt;</ID>
    <ID>UnstableCollections:HomeTab.kt$List&lt;TransactionHistoryItem&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;Transaction&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;TransactionHistoryItem&gt;</ID>
    <ID>UnstableCollections:IvyLineChart.kt$List&lt;Function&gt;</ID>
    <ID>UnstableCollections:IvyLineChart.kt$List&lt;Value&gt;</ID>
    <ID>UnstableCollections:LoanDetailsScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:LoanDetailsScreen.kt$List&lt;DisplayLoanRecord&gt;</ID>
    <ID>UnstableCollections:LoanModal.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:LoanRecordModal.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:OnboardingAccounts.kt$List&lt;AccountBalance&gt;</ID>
    <ID>UnstableCollections:OnboardingAccounts.kt$List&lt;CreateAccountData&gt;</ID>
    <ID>UnstableCollections:OnboardingCategories.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:OnboardingCategories.kt$List&lt;CreateCategoryData&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;AccountBalance&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;CreateAccountData&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;CreateCategoryData&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Budget&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Loan&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Plan&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:PieChart.kt$List&lt;CategoryAmount&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentCard.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentCard.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsLazyColumn.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsLazyColumn.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsLazyColumn.kt$List&lt;PlannedPaymentRule&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsScreen.kt$List&lt;PlannedPaymentRule&gt;</ID>
    <ID>UnstableCollections:PlansSheet.kt$List&lt;Plan&gt;</ID>
    <ID>UnstableCollections:PlansSheet.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:ReorderModal.kt$List&lt;Any&gt;</ID>
    <ID>UnstableCollections:ReorderModal.kt$List&lt;T&gt;</ID>
    <ID>UnstableCollections:SearchScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:SearchScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:SearchScreen.kt$List&lt;TransactionHistoryItem&gt;</ID>
    <ID>UnstableCollections:Suggestions.kt$List&lt;Any&gt;</ID>
    <ID>UnstableCollections:Title.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:TransactionCard.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:TransactionCard.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:Utils.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:Utils.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:WalletCharts.kt$List&lt;SingleChartPoint&gt;</ID>
    <ID>UnstableCollections:WrapContentRow.kt$List&lt;T&gt;</ID>
    <ID>UnusedParameter:AccountCharts.kt$period: ChartPeriod</ID>
    <ID>UnusedParameter:AccountsTab.kt$onLongClick: () -&gt; Unit</ID>
    <ID>UnusedParameter:AccountsTab.kt$screen: Main</ID>
    <ID>UnusedParameter:AccountsViewModel.kt$AccountsViewModel$event: AccountsUpdatedEvent</ID>
    <ID>UnusedParameter:AnalyticsReportScreen.kt$screen: AnalyticsReport</ID>
    <ID>UnusedParameter:BalanceScreen.kt$screen: BalanceScreen</ID>
    <ID>UnusedParameter:BudgetScreen.kt$screen: BudgetScreen</ID>
    <ID>UnusedParameter:CategoriesScreen.kt$onLongClick: () -&gt; Unit</ID>
    <ID>UnusedParameter:CategoriesScreen.kt$screen: Categories</ID>
    <ID>UnusedParameter:CategoryCharts.kt$countChart: Boolean</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categories: List&lt;Category&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryExpenseCount: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryExpenseValues: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryIncomeCount: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryIncomeValues: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$incomeExpenseChart: List&lt;IncomeExpenseChartPoint&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$onLoadCategory: (Category) -&gt; Unit = {}</ID>
    <ID>UnusedParameter:ChartsScreen.kt$onRemoveCategory: (Category) -&gt; Unit = {}</ID>
    <ID>UnusedParameter:ChartsScreen.kt$screen: Charts</ID>
    <ID>UnusedParameter:ChartsViewModel.kt$ChartsViewModel$calculateValue: suspend (range: FromToTimeRange) -&gt; Double</ID>
    <ID>UnusedParameter:ChartsViewModel.kt$ChartsViewModel$category: Category</ID>
    <ID>UnusedParameter:ChartsViewModel.kt$ChartsViewModel$period: ChartPeriod</ID>
    <ID>UnusedParameter:DateExt.kt$secondsLabel: String = "s"</ID>
    <ID>UnusedParameter:DonateScreen.kt$screen: DonateScreen</ID>
    <ID>UnusedParameter:FileUtil.kt$context: Context</ID>
    <ID>UnusedParameter:FileUtil.kt$directoryType: String</ID>
    <ID>UnusedParameter:HomeHeader.kt$bufferDiff: Double</ID>
    <ID>UnusedParameter:HomeHeader.kt$period: TimePeriod</ID>
    <ID>UnusedParameter:HomeMoreMenu.kt$onCurrencyClick: () -&gt; Unit</ID>
    <ID>UnusedParameter:HomeTab.kt$screen: Main</ID>
    <ID>UnusedParameter:HomeViewModel.kt$HomeViewModel$input: HomeState</ID>
    <ID>UnusedParameter:ItemStatisticScreen.kt$itemColor: Color</ID>
    <ID>UnusedParameter:IvyBasicTextField.kt$textColor: Color = UI.colors.pureInverse</ID>
    <ID>UnusedParameter:IvyLineChart.kt$cellSize: Float</ID>
    <ID>UnusedParameter:IvyLineChart.kt$chartWidth: Float</ID>
    <ID>UnusedParameter:IvyLineChart.kt$offsetRight: Float</ID>
    <ID>UnusedParameter:KPIsTab.kt$activeUsersCount: Int</ID>
    <ID>UnusedParameter:LoanDetailsScreen.kt$baseCurrency: String = ""</ID>
    <ID>UnusedParameter:LoanDetailsScreen.kt$loanRecords: List&lt;LoanRecord&gt; = emptyList()</ID>
    <ID>UnusedParameter:LoansScreen.kt$screen: Loans</ID>
    <ID>UnusedParameter:OnboardingSplashLogin.kt$onLoginWithGoogle: () -&gt; Unit</ID>
    <ID>UnusedParameter:OnboardingSplashLogin.kt$opGoogleSignIn: OpResult&lt;Unit&gt;?</ID>
    <ID>UnusedParameter:ParseFields.kt$metadata: Unit</ID>
    <ID>UnusedParameter:PaywallScreen.kt$paywallReason: PaywallReason?</ID>
    <ID>UnusedParameter:PlannedPaymentsLazyColumn.kt$listState: LazyListState</ID>
    <ID>UnusedParameter:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$screen: PlannedPayments</ID>
    <ID>UnusedParameter:ReportScreen.kt$screen: Report</ID>
    <ID>UnusedParameter:SearchScreen.kt$screen: Search</ID>
    <ID>UnusedParameter:SettingsScreen.kt$onLogin: () -&gt; Unit</ID>
    <ID>UnusedParameter:SettingsScreen.kt$screen: Settings</ID>
    <ID>UnusedParameter:Shapes.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:TestScreen.kt$screen: Test</ID>
    <ID>UnusedParameter:Title.kt$initialTransactionId: UUID?</ID>
    <ID>UnusedParameter:WalletCharts.kt$baseCurrencyCode: String</ID>
    <ID>UnusedParameter:WalletCharts.kt$walletDAOs: WalletDAOs</ID>
    <ID>UnusedPrivateMember:AccountsTab.kt$@Preview @Composable private fun PreviewAccountsTab()</ID>
    <ID>UnusedPrivateMember:AddPrimaryAttributeButton.kt$@Preview @Composable private fun PreviewAddPrimaryAttributeButton()</ID>
    <ID>UnusedPrivateMember:AppLockedScreen.kt$@Preview @Composable private fun Preview_Locked()</ID>
    <ID>UnusedPrivateMember:BalanceRow.kt$@Preview @Composable private fun Preview_Default()</ID>
    <ID>UnusedPrivateMember:BalanceRow.kt$@Preview @Composable private fun Preview_Medium()</ID>
    <ID>UnusedPrivateMember:BalanceRow.kt$@Preview @Composable private fun Preview_Mini()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_budget_0()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_100()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_125()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_25()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_50()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_75()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_buffer_90()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_expenses_0()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_expenses_negative()</ID>
    <ID>UnusedPrivateMember:BudgetBattery.kt$@Preview @Composable private fun Preview_spent_very_low()</ID>
    <ID>UnusedPrivateMember:BudgetBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>UnusedPrivateMember:BudgetModal.kt$@Preview @Composable private fun Preview_create()</ID>
    <ID>UnusedPrivateMember:BudgetModal.kt$@Preview @Composable private fun Preview_edit()</ID>
    <ID>UnusedPrivateMember:BudgetScreen.kt$@Preview @Composable private fun Preview_Budgets()</ID>
    <ID>UnusedPrivateMember:BudgetScreen.kt$@Preview @Composable private fun Preview_Empty()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_0()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_100()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_125()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_25()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_50()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_75()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_90()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_balance_0()</ID>
    <ID>UnusedPrivateMember:BufferBattery.kt$@Preview @Composable private fun Preview_buffer_very_low()</ID>
    <ID>UnusedPrivateMember:Button.kt$@Preview @Composable private fun Preview_FillMaxWidth()</ID>
    <ID>UnusedPrivateMember:Button.kt$@Preview @Composable private fun Preview_Outlined()</ID>
    <ID>UnusedPrivateMember:Button.kt$@Preview @Composable private fun Preview_Solid()</ID>
    <ID>UnusedPrivateMember:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconLeft_FillMax()</ID>
    <ID>UnusedPrivateMember:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconLeft_Wrap()</ID>
    <ID>UnusedPrivateMember:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconRight_FillMax()</ID>
    <ID>UnusedPrivateMember:ButtonWithIcon.kt$@Preview @Composable private fun Preview_IconRight_Wrap()</ID>
    <ID>UnusedPrivateMember:CategoriesBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>UnusedPrivateMember:CategoryModal.kt$@Preview @Composable private fun PreviewCategoryModal()</ID>
    <ID>UnusedPrivateMember:Checkbox.kt$@Preview @Composable private fun PreviewIvyCheckboxWithText()</ID>
    <ID>UnusedPrivateMember:ChooseCategoryModal.kt$@ExperimentalFoundationApi @Preview @Composable private fun PreviewChooseCategoryModal()</ID>
    <ID>UnusedPrivateMember:ChoosePeriodModal.kt$@Preview @Composable private fun Preview_FromTo()</ID>
    <ID>UnusedPrivateMember:ChoosePeriodModal.kt$@Preview @Composable private fun Preview_LastN()</ID>
    <ID>UnusedPrivateMember:ChoosePeriodModal.kt$@Preview @Composable private fun Preview_MonthSelected()</ID>
    <ID>UnusedPrivateMember:CircleButtons.kt$@Preview @Composable private fun PreviewBackButton()</ID>
    <ID>UnusedPrivateMember:CircleButtons.kt$@Preview @Composable private fun PreviewCloseButton()</ID>
    <ID>UnusedPrivateMember:CustomExchangeRateCard.kt$@Preview @Composable private fun Preview_OneTime()</ID>
    <ID>UnusedPrivateMember:CustomerJourney.kt$@Preview @Composable private fun PreviewCard()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewAddPlannedPaymentCard()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewAdjustBalanceCard()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewDidYouKnow_ExpensesPieChart()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewDidYouKnow_PinAddTransactionWidgetCard()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewIvyTelegram_2()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewIvyWallet_gitHubBackups()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewIvyWallet_isOpenSource()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewJoinTelegram()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewRateUsCard()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewRateUs_2()</ID>
    <ID>UnusedPrivateMember:CustomerJourneyLogic.kt$@Preview @Composable private fun PreviewShareIvyWallet()</ID>
    <ID>UnusedPrivateMember:Description.kt$@Preview @Composable private fun PreviewDescription_Empty()</ID>
    <ID>UnusedPrivateMember:Description.kt$@Preview @Composable private fun PreviewDescription_withText()</ID>
    <ID>UnusedPrivateMember:DescriptionModal.kt$@Preview @Composable private fun PreviewDescriptionModal_emptyText()</ID>
    <ID>UnusedPrivateMember:Dividers.kt$@Preview @Composable private fun PreviewDivider()</ID>
    <ID>UnusedPrivateMember:Dividers.kt$@Preview @Composable private fun PreviewHorizontalDivider_fillMax()</ID>
    <ID>UnusedPrivateMember:Dividers.kt$@Preview @Composable private fun PreviewHorizontalDivider_fixed()</ID>
    <ID>UnusedPrivateMember:Dividers.kt$@Preview @Composable private fun PreviewVerticalDivider_fillMax()</ID>
    <ID>UnusedPrivateMember:Dividers.kt$@Preview @Composable private fun PreviewVerticalDivider_fixed()</ID>
    <ID>UnusedPrivateMember:DueDate.kt$@Preview @Composable private fun Preview_OneTime()</ID>
    <ID>UnusedPrivateMember:EditBottomSheet.kt$@Preview @Composable private fun Preview_Transfer()</ID>
    <ID>UnusedPrivateMember:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun transferToAmount( amount: Double ): Double?</ID>
    <ID>UnusedPrivateMember:HistoryDateDivider.kt$@Preview @Composable private fun Preview_OneYear_Ago()</ID>
    <ID>UnusedPrivateMember:HistoryDateDivider.kt$@Preview @Composable private fun Preview_Today()</ID>
    <ID>UnusedPrivateMember:HistoryDateDivider.kt$@Preview @Composable private fun Preview_Yesterday()</ID>
    <ID>UnusedPrivateMember:HomeMoreMenu.kt$@Preview @Composable private fun Preview_Expanded()</ID>
    <ID>UnusedPrivateMember:HomeTab.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Preview @Composable private fun PreviewHomeTab()</ID>
    <ID>UnusedPrivateMember:ItemIcon.kt$@Preview @Composable private fun Preview_L()</ID>
    <ID>UnusedPrivateMember:ItemIcon.kt$@Preview @Composable private fun Preview_M()</ID>
    <ID>UnusedPrivateMember:ItemIcon.kt$@Preview @Composable private fun Preview_S()</ID>
    <ID>UnusedPrivateMember:ItemStatisticScreen.kt$@Preview @Composable private fun Preview_crypto()</ID>
    <ID>UnusedPrivateMember:ItemStatisticScreen.kt$@Preview @Composable private fun Preview_empty()</ID>
    <ID>UnusedPrivateMember:ItemStatisticScreen.kt$@Preview @Composable private fun Preview_empty_upcoming()</ID>
    <ID>UnusedPrivateMember:IvyBasicTextField.kt$@Preview @Composable private fun Preview_Filled()</ID>
    <ID>UnusedPrivateMember:IvyBasicTextField.kt$@Preview @Composable private fun Preview_Hint()</ID>
    <ID>UnusedPrivateMember:IvyBorderButton.kt$@Preview @Composable private fun PreviewIvyBorderButton()</ID>
    <ID>UnusedPrivateMember:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonFillMaxWidthWithIconEnd()</ID>
    <ID>UnusedPrivateMember:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonFillMaxWidthWithIconStart()</ID>
    <ID>UnusedPrivateMember:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonWrapContentWithIconEnd()</ID>
    <ID>UnusedPrivateMember:IvyButton.kt$@Preview @Composable private fun PreviewIvyButtonWrapContentWithIconStart()</ID>
    <ID>UnusedPrivateMember:IvyCheckbox.kt$@Preview @Composable private fun PreviewIvyCheckboxWithText()</ID>
    <ID>UnusedPrivateMember:IvyChecklistTextField.kt$@Preview @Composable private fun PreviewIvyTextField()</ID>
    <ID>UnusedPrivateMember:IvyChecklistTextField.kt$@Preview @Composable private fun PreviewIvyTextField_longText()</ID>
    <ID>UnusedPrivateMember:IvyCircleButton.kt$@Preview @Composable private fun PreviewIvyCircleButton_Disabled()</ID>
    <ID>UnusedPrivateMember:IvyCircleButton.kt$@Preview @Composable private fun PreviewIvyCircleButton_Enabled()</ID>
    <ID>UnusedPrivateMember:IvyColorPicker.kt$@Preview @Composable private fun PreviewIvyColorPicker()</ID>
    <ID>UnusedPrivateMember:IvyDescriptionTextField.kt$@Preview @Composable private fun PreviewIvyTextField()</ID>
    <ID>UnusedPrivateMember:IvyDescriptionTextField.kt$@Preview @Composable private fun PreviewIvyTextField_longText()</ID>
    <ID>UnusedPrivateMember:IvyLineChart.kt$@Preview @Composable private fun Preview_IvyChart()</ID>
    <ID>UnusedPrivateMember:IvyModal.kt$@Preview @Composable private fun PreviewIvyModal_minimal()</ID>
    <ID>UnusedPrivateMember:IvyNameTextFieldValue.kt$@Preview @Composable private fun PreviewIvyNameTextField()</ID>
    <ID>UnusedPrivateMember:IvyOutlinedButton.kt$@Preview @Composable private fun Preview_FillMaxWidth()</ID>
    <ID>UnusedPrivateMember:IvyOutlinedTextField.kt$@Preview @Composable private fun PreviewOutlineTextField()</ID>
    <ID>UnusedPrivateMember:IvySwitch.kt$@Preview @Composable private fun PreviewIvySwitch()</ID>
    <ID>UnusedPrivateMember:IvyTitleTextField.kt$@Preview @Composable private fun PreviewIvyTitleTextField()</ID>
    <ID>UnusedPrivateMember:LoanBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>UnusedPrivateMember:LoanDetailsScreen.kt$@Preview @Composable private fun Preview_Empty()</ID>
    <ID>UnusedPrivateMember:LoanDetailsScreen.kt$@Preview @Composable private fun Preview_Records()</ID>
    <ID>UnusedPrivateMember:MainScreen.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Preview @Composable private fun PreviewMainScreen()</ID>
    <ID>UnusedPrivateMember:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$private fun SupportSQLiteDatabase.addSyncColumns(tableName: String)</ID>
    <ID>UnusedPrivateMember:OnboardingAccounts.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Accounts()</ID>
    <ID>UnusedPrivateMember:OnboardingAccounts.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Empty()</ID>
    <ID>UnusedPrivateMember:OnboardingAccounts.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Premium()</ID>
    <ID>UnusedPrivateMember:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Categories()</ID>
    <ID>UnusedPrivateMember:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Empty()</ID>
    <ID>UnusedPrivateMember:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Premium()</ID>
    <ID>UnusedPrivateMember:OnboardingComponents.kt$@Preview @Composable private fun PreviewOnboardingButton()</ID>
    <ID>UnusedPrivateMember:OnboardingComponents.kt$@Preview @Composable private fun PreviewOnboardingTextField()</ID>
    <ID>UnusedPrivateMember:OnboardingReportTab.kt$@Composable private fun PrivacyTCorSetName( report: OnboardingReport )</ID>
    <ID>UnusedPrivateMember:OnboardingScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun PreviewOnboarding()</ID>
    <ID>UnusedPrivateMember:OnboardingSplashLogin.kt$@Composable private fun LoginWithGoogleExplanation()</ID>
    <ID>UnusedPrivateMember:PieChartStatisticBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>UnusedPrivateMember:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Expense()</ID>
    <ID>UnusedPrivateMember:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Income()</ID>
    <ID>UnusedPrivateMember:PlannedPaymentCard.kt$@Preview @Composable private fun Preview_oneTime()</ID>
    <ID>UnusedPrivateMember:PlannedPaymentCard.kt$@Preview @Composable private fun Preview_recurring()</ID>
    <ID>UnusedPrivateMember:PlannedPaymentCard.kt$@Preview @Composable private fun Preview_recurringError()</ID>
    <ID>UnusedPrivateMember:PlannedPaymentsBottomBar.kt$@Preview @Composable private fun PreviewBottomBar()</ID>
    <ID>UnusedPrivateMember:PlansSheet.kt$@Composable private fun BoxWithConstraintsScope.BottomBar( Action: @Composable () -&gt; Unit, setBottomBarHeight: (Int) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>UnusedPrivateMember:PlansSheet.kt$@Preview @Composable private fun Preview_Shitty()</ID>
    <ID>UnusedPrivateMember:PrimaryAttributeColumn.kt$@Preview @Composable private fun PreviewPrimaryAttributeColumn()</ID>
    <ID>UnusedPrivateMember:RateItem.kt$@Preview @Composable private fun Preview_Delete()</ID>
    <ID>UnusedPrivateMember:RecurringRule.kt$@Preview @Composable private fun Preview_Empty()</ID>
    <ID>UnusedPrivateMember:RecurringRule.kt$@Preview @Composable private fun Preview_OneTime()</ID>
    <ID>UnusedPrivateMember:RecurringRule.kt$@Preview @Composable private fun Preview_Repeat()</ID>
    <ID>UnusedPrivateMember:RecurringRuleModal.kt$@Preview @Composable private fun Preview_multipleTimes()</ID>
    <ID>UnusedPrivateMember:RecurringRuleModal.kt$@Preview @Composable private fun Preview_oneTime()</ID>
    <ID>UnusedPrivateMember:ReportScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_NO_FILTER()</ID>
    <ID>UnusedPrivateMember:ScreenTitle.kt$@Preview @Composable private fun Preview_Large()</ID>
    <ID>UnusedPrivateMember:ScreenTitle.kt$@Preview @Composable private fun Preview_Standard()</ID>
    <ID>UnusedPrivateMember:ServerStopScreen.kt$@Preview @Composable private fun PreviewLoading()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@Composable private fun Premium()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_loading()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_localAccount()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_notSynced()</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_synced()</ID>
    <ID>UnusedPrivateMember:Shapes.kt$@Preview @Composable private fun PreviewOutlined()</ID>
    <ID>UnusedPrivateMember:Shapes.kt$@Preview @Composable private fun Preview_Circle()</ID>
    <ID>UnusedPrivateMember:Switch.kt$@Preview @Composable private fun PreviewIvySwitch()</ID>
    <ID>UnusedPrivateMember:Title.kt$@Preview @Composable private fun PreviewTitleWithSuggestions()</ID>
    <ID>UnusedPrivateMember:TransactionCard.kt$@Preview @Composable private fun PreviewIncome()</ID>
    <ID>UnusedPrivateMember:TransactionCard.kt$@Preview @Composable private fun PreviewNormalExpense()</ID>
    <ID>UnusedPrivateMember:TransactionCard.kt$@Preview @Composable private fun PreviewOverdueExpense()</ID>
    <ID>UnusedPrivateMember:TransactionCard.kt$@Preview @Composable private fun PreviewTransfer()</ID>
    <ID>UnusedPrivateMember:TransactionCard.kt$@Preview @Composable private fun PreviewTransfer_differentCurrency()</ID>
    <ID>UnusedPrivateMember:TransactionCard.kt$@Preview @Composable private fun PreviewUpcomingExpense()</ID>
    <ID>UnusedPrivateMember:TransactionSectionDivider.kt$@Preview @Composable private fun Preview_Expenses()</ID>
    <ID>UnusedPrivateMember:TransactionSectionDivider.kt$@Preview @Composable private fun Preview_Income()</ID>
    <ID>UnusedPrivateMember:TransactionSectionDivider.kt$@Preview @Composable private fun Preview_Income_Expenses()</ID>
    <ID>UnusedPrivateMember:TransactionViewModel.kt$TransactionViewModel$private fun isEditMode(): Boolean</ID>
    <ID>UnusedPrivateMember:TransactionViewModel.kt$TransactionViewModel$private suspend fun createNewTransaction(state: TrnState.NewTransaction)</ID>
    <ID>UnusedPrivateMember:WrapContentRow.kt$@Preview @Composable private fun PreviewWrapContentRow()</ID>
    <ID>UnusedPrivateProperty:AccountModal.kt$val context = LocalContext.current</ID>
    <ID>UnusedPrivateProperty:AccountsViewModel.kt$AccountsViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:AccountsViewModel.kt$AccountsViewModel$private val walletDAOs: WalletDAOs</ID>
    <ID>UnusedPrivateProperty:AppModuleDI.kt$AppModuleDI.&lt;no name provided&gt;$i</ID>
    <ID>UnusedPrivateProperty:BudgetViewModel.kt$BudgetViewModel$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:BudgetViewModel.kt$BudgetViewModel$private val categoryDao: CategoryDao</ID>
    <ID>UnusedPrivateProperty:BudgetViewModel.kt$BudgetViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:CategoryCharts.kt$val value = functions.getOrNull(it.functionIndex)?.values?.get(it.valueIndex) ?: return@let</ID>
    <ID>UnusedPrivateProperty:ChartsViewModel.kt$ChartsViewModel$private val categoryDao: CategoryDao</ID>
    <ID>UnusedPrivateProperty:ChartsViewModel.kt$ChartsViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:DateExt.kt$val seconds = TimeUnit.MILLISECONDS.toSeconds(timeLeftAfterCalculations)</ID>
    <ID>UnusedPrivateProperty:EditPlannedViewModel.kt$EditPlannedViewModel$private val ivyContext: IvyWalletCtx</ID>
    <ID>UnusedPrivateProperty:EditTransactionViewModel.kt$EditTransactionViewModel$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:EditTransactionViewModel.kt$EditTransactionViewModel$private val categoryDao: CategoryDao</ID>
    <ID>UnusedPrivateProperty:EditTransactionViewModel.kt$EditTransactionViewModel$private val ivyContext: IvyWalletCtx</ID>
    <ID>UnusedPrivateProperty:ExchangeRatesLogic.kt$ExchangeRatesLogic$restClient: RestClient</ID>
    <ID>UnusedPrivateProperty:HomeTab.kt$val nav = navigation()</ID>
    <ID>UnusedPrivateProperty:HomeViewModel.kt$HomeViewModel$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:ItemStatisticViewModel.kt$ItemStatisticViewModel$private val exchangeRateDao: ExchangeRateDao</ID>
    <ID>UnusedPrivateProperty:ItemStatisticViewModel.kt$ItemStatisticViewModel$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:ItemStatisticViewModel.kt$ItemStatisticViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:ItemStatisticViewModel.kt$ItemStatisticViewModel$private val walletDAOs: WalletDAOs</ID>
    <ID>UnusedPrivateProperty:IvyBilling.kt$IvyBilling.Companion$private const val LIFETIME_V1 = "ivy_wallet_lifetime_v1"</ID>
    <ID>UnusedPrivateProperty:IvyLineChart.kt$val marginFromX = 4.dp.toPx()</ID>
    <ID>UnusedPrivateProperty:LoanDetailsViewModel.kt$LoanDetailsViewModel$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:LoanDetailsViewModel.kt$LoanDetailsViewModel$private val ivyContext: IvyWalletCtx</ID>
    <ID>UnusedPrivateProperty:LoanDetailsViewModel.kt$LoanDetailsViewModel$private val loanDao: LoanDao</ID>
    <ID>UnusedPrivateProperty:LoanViewModel.kt$LoanViewModel$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:LoanViewModel.kt$LoanViewModel$private val categoriesAct: CategoriesAct</ID>
    <ID>UnusedPrivateProperty:MainViewModel.kt$MainViewModel$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:OnboardingRouter.kt$OnboardingRouter$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:OnboardingRouter.kt$OnboardingRouter$private val ivyContext: IvyWalletCtx</ID>
    <ID>UnusedPrivateProperty:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$private val categoryDao: CategoryDao</ID>
    <ID>UnusedPrivateProperty:ReportScreen.kt$val ivyContext = ivyWalletCtx()</ID>
    <ID>UnusedPrivateProperty:ReportScreen.kt$val listState = rememberLazyListState()</ID>
    <ID>UnusedPrivateProperty:ReportViewModel.kt$ReportViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:SearchScreen.kt$val ivyContext = ivyWalletCtx()</ID>
    <ID>UnusedPrivateProperty:SearchScreen.kt$val nav = navigation()</ID>
    <ID>UnusedPrivateProperty:SettingsViewModel.kt$SettingsViewModel$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:TransactionReminderLogic.kt$TransactionReminderLogic.Companion$private const val UNIQUE_WORK_NAME_V1 = "transaction_reminder_work"</ID>
    <ID>UnusedPrivateProperty:TransactionViewModel.kt$TransactionViewModel$private val saveTrnLocallyAct: SaveTrnLocallyAct</ID>
    <ID>UnusedPrivateProperty:UploadTrnToServerAct.kt$UploadTrnToServerAct$private val dao: TransactionDao</ID>
    <ID>UnusedPrivateProperty:UploadTrnToServerAct.kt$UploadTrnToServerAct$private val ivySession: IvySession</ID>
    <ID>UnusedPrivateProperty:UploadTrnToServerAct.kt$UploadTrnToServerAct$private val service = restClient.transactionService</ID>
    <ID>UnusedPrivateProperty:WalletAccountLogic.kt$WalletAccountLogic$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:WalletAccountLogic.kt$WalletAccountLogic$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:WalletAccountLogic.kt$WalletAccountLogic$private val settingsDao: SettingsDao</ID>
    <ID>UseCheckOrError:IvyContext.kt$IvyContext$throw IllegalStateException("screenHeight not initialized")</ID>
    <ID>UseCheckOrError:IvyContext.kt$IvyContext$throw IllegalStateException("screenWidth not initialized")</ID>
    <ID>UseCheckOrError:SharedPrefs.kt$SharedPrefs$throw IllegalStateException("SharePrefs key '$key' cannot be null")</ID>
    <ID>UseCheckOrError:ZipUtils.kt$throw IllegalStateException("Location file must be directory or not exist")</ID>
    <ID>UtilityClassWithPublicConstructor:WidgetBase.kt$WidgetBase</ID>
    <ID>ViewModelForwarding:GitHubBackupCard.kt$GitHubBackupStatus(viewModel)</ID>
    <ID>ViewModelForwarding:GitHubBackupCard.kt$LastBackup(viewModel)</ID>
    <ID>ViewModelInjection:AccountsTab.kt$viewModel</ID>
    <ID>ViewModelInjection:AnalyticsReportScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:BalanceScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:BudgetScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:CSVScreen.kt$onboardingViewModel</ID>
    <ID>ViewModelInjection:CSVScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:CategoriesScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ChartsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:DonateScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:EditPlannedScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:EditTransactionScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ExchangeRatesScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:GitHubBackupCard.kt$viewModel</ID>
    <ID>ViewModelInjection:GitHubBackupScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:HomeTab.kt$viewModel</ID>
    <ID>ViewModelInjection:ImportScreen.kt$onboardingViewModel</ID>
    <ID>ViewModelInjection:ImportScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ItemStatisticScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:LoanDetailsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:LoansScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:MainScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:OnboardingScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:PaywallScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:PieChartStatisticScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:PlannedPaymentsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ReportScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:SearchScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ServerStopScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:SettingsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:TestScreen.kt$viewModel</ID>
    <ID>WildcardImport:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:AccountService.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.csv.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.sync.item.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.sync.uploader.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.io.network.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:AuthService.kt$import com.ivy.wallet.io.network.request.auth.*</ID>
    <ID>WildcardImport:BackupLogic.kt$import com.google.gson.*</ID>
    <ID>WildcardImport:BackupLogic.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:BudgetService.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:BufferModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CSVViewModel.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CSVViewModel.kt$import com.ivy.wallet.ui.csv.domain.*</ID>
    <ID>WildcardImport:CategoriesViewModel.kt$import kotlinx.coroutines.*</ID>
    <ID>WildcardImport:CategoryModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CategoryModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CategoryService.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:ChooseIconModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ChooseIconModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ComposeExt.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:DateExt.kt$import java.time.*</ID>
    <ID>WildcardImport:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Dividers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:EditPlannedViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:ExchangeRatesViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:FileUtil.kt$import java.io.*</ID>
    <ID>WildcardImport:FromToTimeRange.kt$import com.ivy.wallet.utils.*</ID>
    <ID>WildcardImport:HealthTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:HomeViewModel.kt$import com.ivy.wallet.domain.action.viewmodel.home.*</ID>
    <ID>WildcardImport:ImportType.kt$import com.ivy.wallet.ui.csvimport.flow.instructions.*</ID>
    <ID>WildcardImport:ImportType.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:InputField.kt$import com.ivy.design.l0_system.*</ID>
    <ID>WildcardImport:InputField.kt$import com.ivy.design.utils.*</ID>
    <ID>WildcardImport:ItemStatisticViewModel.kt$import com.ivy.wallet.domain.deprecated.logic.*</ID>
    <ID>WildcardImport:ItemStatisticViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:ItemStatisticViewModel.kt$import com.ivy.wallet.utils.*</ID>
    <ID>WildcardImport:IvyLineChart.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:IvyLineChart.kt$import androidx.compose.ui.graphics.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import androidx.room.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.migration.*</ID>
    <ID>WildcardImport:IvySwitch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:IvySwitch.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:IvySync.kt$import com.ivy.wallet.domain.deprecated.sync.item.*</ID>
    <ID>WildcardImport:IvyToolbar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:IvyViewPager.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:IvyViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:IvyWalletCompleteData.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>WildcardImport:IvyWalletDesign.kt$import com.ivy.design.l0_system.*</ID>
    <ID>WildcardImport:KPIsTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:KPIsTab.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:Keyboard.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:LoanDetailsViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:LoanService.kt$import com.ivy.wallet.io.network.request.loan.*</ID>
    <ID>WildcardImport:LoanService.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:LoanTransactionsCore.kt$import com.ivy.wallet.domain.data.core.*</ID>
    <ID>WildcardImport:LoanTransactionsCore.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:MainScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:MainScreen.kt$import com.ivy.wallet.ui.*</ID>
    <ID>WildcardImport:OnboardingReportTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:OnboardingReportTab.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import com.ivy.wallet.ui.onboarding.steps.*</ID>
    <ID>WildcardImport:PieChart.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PieChart.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:PlannedPaymentRuleService.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:PreloadDataLogic.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:ProgressBar.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:ReorderModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ReorderModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ReorderModal.kt$import androidx.recyclerview.widget.ItemTouchHelper.*</ID>
    <ID>WildcardImport:ReportViewModel.kt$import com.ivy.wallet.utils.*</ID>
    <ID>WildcardImport:RestClient.kt$import com.ivy.wallet.io.network.service.*</ID>
    <ID>WildcardImport:Spacers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:Switch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:Switch.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:TimePeriod.kt$import com.ivy.wallet.utils.*</ID>
    <ID>WildcardImport:TransactionService.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:UserStatsTab.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:WalletBalanceWidgetContent.kt$import androidx.glance.layout.*</ID>
    <ID>WildcardImport:ZipUtils.kt$import java.io.*</ID>
    <ID>Wrapping:AccountModal.kt$(</ID>
    <ID>Wrapping:AccountsViewModel.kt$AccountsViewModel$( R.string.total, baseCurrencyCode, totalBalanceWithExcluded.format( baseCurrencyCode ) )</ID>
    <ID>Wrapping:AmountModal.kt$(</ID>
    <ID>Wrapping:BackupLogic.kt$BackupLogic$(</ID>
    <ID>Wrapping:BackupLogic.kt$BackupLogic$( LocalDateTime::class.java, object : JsonDeserializer&lt;LocalDateTime?&gt; { @Throws(JsonParseException::class) override fun deserialize( json: JsonElement, type: Type?, jsonDeserializationContext: JsonDeserializationContext? ): LocalDateTime? { val instant: Instant = Instant.ofEpochMilli(json.asJsonPrimitive.asLong) return LocalDateTime.ofInstant(instant, ZoneOffset.UTC) } })</ID>
    <ID>Wrapping:BackupLogic.kt$BackupLogic$( LocalDateTime::class.java, object : JsonSerializer&lt;LocalDateTime?&gt; { @Throws(JsonParseException::class) override fun serialize( src: LocalDateTime?, typeOfSrc: Type?, context: JsonSerializationContext? ): JsonElement { return JsonPrimitive(src!!.toEpochMilli().toString()) } })</ID>
    <ID>Wrapping:BufferBattery.kt$(</ID>
    <ID>Wrapping:ChartsViewModel.kt$ChartsViewModel$(</ID>
    <ID>Wrapping:ChooseStartDateOfMonthModal.kt$(</ID>
    <ID>Wrapping:CustomExchangeRateCard.kt$(</ID>
    <ID>Wrapping:ItemStatisticViewModel.kt$ItemStatisticViewModel$(</ID>
    <ID>Wrapping:IvyChecklistTextField.kt$(</ID>
    <ID>Wrapping:IvyDescriptionTextField.kt$(</ID>
    <ID>Wrapping:IvyOutlinedTextField.kt$(</ID>
    <ID>Wrapping:IvyViewPager.kt$(</ID>
    <ID>Wrapping:KtorClient.kt$(</ID>
    <ID>Wrapping:Loan.kt$Loan$(</ID>
    <ID>Wrapping:LoanModal.kt$(</ID>
    <ID>Wrapping:LoanRecordModal.kt$(</ID>
    <ID>Wrapping:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$-&gt;</ID>
    <ID>Wrapping:RestClient.kt$RestClient.Companion$(</ID>
    <ID>Wrapping:RootActivity.kt$RootActivity$( Intent().apply { action = Intent.ACTION_SEND putExtra(Intent.EXTRA_STREAM, fileUri) type = "application/zip" }, null )</ID>
    <ID>Wrapping:RootActivity.kt$RootActivity$( Intent().apply { action = Intent.ACTION_SEND putExtra(Intent.EXTRA_STREAM, fileUri) type = "text/csv" }, null )</ID>
    <ID>Wrapping:RootActivity.kt$RootActivity$( Intent.EXTRA_SUBJECT, "Ivy Wallet Support Request #" + caseNumber + "0" + BuildConfig.VERSION_CODE )</ID>
    <ID>Wrapping:SettingsScreen.kt$( R.string.confirm_all_userd_data_deletion, user?.email ?: stringResource( R.string.all_of_your_data ) )</ID>
    <ID>Wrapping:SettingsScreen.kt$( R.string.delete_all_user_cloud_data_warning, user?.email ?: stringResource( R.string.your_account ) )</ID>
    <ID>Wrapping:SettingsScreen.kt$( R.string.delete_all_user_data_warning, user?.email ?: stringResource( R.string.your_account ) )</ID>
    <ID>Wrapping:ViewPager.kt$(</ID>
  </CurrentIssues>
</SmellBaseline>
