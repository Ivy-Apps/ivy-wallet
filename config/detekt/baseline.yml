<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ArgumentListWrapping:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessors4ymijgaek646mzru18sdmblu7.kt$("detekt")</ID>
    <ID>ArgumentListWrapping:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$("ext")</ID>
    <ID>ArgumentListWrapping:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$("reporting")</ID>
    <ID>ArgumentListWrapping:Accessorseessl0al0otcsbyqqruvoncpd.kt$("ext")</ID>
    <ID>ArgumentListWrapping:DetektConfigurationAccessors.kt$( this, "detekt", dependencyNotation, dependencyConfiguration )</ID>
    <ID>ArgumentListWrapping:DetektPluginsConfigurationAccessors.kt$( this, "detektPlugins", dependencyNotation, dependencyConfiguration )</ID>
    <ID>ClassNaming:Ivy_lintPlugin.kt$Ivy_lintPlugin : Plugin</ID>
    <ID>ClassNaming:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules : Migration</ID>
    <ID>ClassNaming:Migration106to107_Wishlist.kt$Migration106to107_Wishlist : Migration</ID>
    <ID>ClassNaming:Migration107to108_Sync.kt$Migration107to108_Sync : Migration</ID>
    <ID>ClassNaming:Migration108to109_Users.kt$Migration108to109_Users : Migration</ID>
    <ID>ClassNaming:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments : Migration</ID>
    <ID>ClassNaming:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule : Migration</ID>
    <ID>ClassNaming:Migration111to112_User_testUser.kt$Migration111to112_User_testUser : Migration</ID>
    <ID>ClassNaming:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates : Migration</ID>
    <ID>ClassNaming:Migration113to114_Multi_Currency.kt$Migration113to114_Multi_Currency : Migration</ID>
    <ID>ClassNaming:Migration114to115_Category_Account_Icons.kt$Migration114to115_Category_Account_Icons : Migration</ID>
    <ID>ClassNaming:Migration115to116_Account_Include_In_Balance.kt$Migration115to116_Account_Include_In_Balance : Migration</ID>
    <ID>ClassNaming:Migration116to117_SalteEdgeIntgration.kt$Migration116to117_SalteEdgeIntgration : Migration</ID>
    <ID>ClassNaming:Migration117to118_Budgets.kt$Migration117to118_Budgets : Migration</ID>
    <ID>ClassNaming:Migration118to119_Loans.kt$Migration118to119_Loans : Migration</ID>
    <ID>ClassNaming:Migration119to120_LoanTransactions.kt$Migration119to120_LoanTransactions : Migration</ID>
    <ID>ClassNaming:Migration120to121_DropWishlistItem.kt$Migration120to121_DropWishlistItem : Migration</ID>
    <ID>ClassNaming:Migration122to123_ExchangeRates.kt$Migration122to123_ExchangeRates : Migration</ID>
    <ID>CommentSpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$//0.03%</ID>
    <ID>CommentSpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$//0.22%</ID>
    <ID>CommentSpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$//delete paid oneTime planned payment rules</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//!NOTE: Amount must be converted to baseCurrency amount</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Accounts</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Amount</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Categories</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Excluded Keywords</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Included Keywords</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Time Period</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Filter by Transaction Type</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Overdue</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Transfers In</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Transfers Out</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//Upcoming</ID>
    <ID>CommentSpacing:ReportViewModel.kt$ReportViewModel$//clear filter</ID>
    <ID>ComplexCondition:EditTransactionViewModel.kt$EditTransactionViewModel$customExchangeRateState.value.showCard &amp;&amp; toAccCurrencyCode == customExchangeRateState.value.toCurrencyCode &amp;&amp; fromAccCurrencyCode == customExchangeRateState.value.fromCurrencyCode &amp;&amp; !resetRate</ID>
    <ID>ComplexCondition:Transactions.kt$(upcoming == null || upcoming.trns.isEmpty()) &amp;&amp; (overdue == null || overdue.trns.isEmpty()) &amp;&amp; history.isEmpty()</ID>
    <ID>ComposableNaming:Compose.kt$onEvent</ID>
    <ID>ComposableNaming:ComposeExt.kt$onScreenStart</ID>
    <ID>ComposableNaming:Keyboard.kt$hideKeyboard</ID>
    <ID>ComposableNaming:Keyboard.kt$showKeyboard</ID>
    <ID>ComposableNaming:UIExt.kt$setStatusBarDarkTextCompat</ID>
    <ID>ComposableParamOrder:AddKeywordModal.kt$AddKeywordModal</ID>
    <ID>ComposableParamOrder:AmountModal.kt$AmountKeyboard</ID>
    <ID>ComposableParamOrder:AmountModal.kt$AmountModal</ID>
    <ID>ComposableParamOrder:AmountModal.kt$KeypadCircleButton</ID>
    <ID>ComposableParamOrder:BackBottomBar.kt$BackBottomBar</ID>
    <ID>ComposableParamOrder:BalanceRow.kt$BalanceRow</ID>
    <ID>ComposableParamOrder:BalanceRow.kt$BalanceRowMedium</ID>
    <ID>ComposableParamOrder:BalanceRow.kt$BalanceRowMini</ID>
    <ID>ComposableParamOrder:BudgetBattery.kt$BudgetBattery</ID>
    <ID>ComposableParamOrder:BudgetScreen.kt$NoBudgetsEmptyState</ID>
    <ID>ComposableParamOrder:BufferBattery.kt$BufferBattery</ID>
    <ID>ComposableParamOrder:Button.kt$Button</ID>
    <ID>ComposableParamOrder:ButtonWithIcon.kt$Button</ID>
    <ID>ComposableParamOrder:CalculatorModal.kt$CalculatorModal</ID>
    <ID>ComposableParamOrder:CategoriesScreen.kt$AddedSpent</ID>
    <ID>ComposableParamOrder:CategoriesScreen.kt$SortModal</ID>
    <ID>ComposableParamOrder:CategoryCharts.kt$CategoriesChart</ID>
    <ID>ComposableParamOrder:ChangeTransactionTypeModal.kt$ChangeTransactionTypeModal</ID>
    <ID>ComposableParamOrder:ChartsScreen.kt$ChartButton</ID>
    <ID>ComposableParamOrder:Checkbox.kt$Checkbox</ID>
    <ID>ComposableParamOrder:Checkbox.kt$CheckboxWithText</ID>
    <ID>ComposableParamOrder:ChooseCategoryModal.kt$ChooseCategoryModal</ID>
    <ID>ComposableParamOrder:ChooseIconModal.kt$ChooseIconModal</ID>
    <ID>ComposableParamOrder:ChoosePeriodModal.kt$MonthButton</ID>
    <ID>ComposableParamOrder:ChooseStartDateOfMonthModal.kt$ChooseStartDateOfMonthModal</ID>
    <ID>ComposableParamOrder:CircleButtons.kt$CircleButton</ID>
    <ID>ComposableParamOrder:CircleButtons.kt$CircleButtonFilled</ID>
    <ID>ComposableParamOrder:CircleButtons.kt$CircleButtonFilledGradient</ID>
    <ID>ComposableParamOrder:CurrencyPicker.kt$CurrencyPicker</ID>
    <ID>ComposableParamOrder:CustomExchangeRateCard.kt$CustomExchangeRateCard</ID>
    <ID>ComposableParamOrder:DeleteModal.kt$DeleteModal</ID>
    <ID>ComposableParamOrder:DescriptionModal.kt$DescriptionModal</ID>
    <ID>ComposableParamOrder:EditBottomSheet.kt$AccountsRow</ID>
    <ID>ComposableParamOrder:EditBottomSheet.kt$Amount</ID>
    <ID>ComposableParamOrder:EditBottomSheet.kt$EditBottomSheet</ID>
    <ID>ComposableParamOrder:EditPlannedScreen.kt$UI</ID>
    <ID>ComposableParamOrder:EditTransactionScreen.kt$UI</ID>
    <ID>ComposableParamOrder:FilterOverlay.kt$TypeFilterCheckbox</ID>
    <ID>ComposableParamOrder:GradientCut.kt$GradientCutTop</ID>
    <ID>ComposableParamOrder:HomeHeader.kt$CashFlowInfo</ID>
    <ID>ComposableParamOrder:HomeHeader.kt$HeaderStickyRow</ID>
    <ID>ComposableParamOrder:HomeHeader.kt$HomeHeader</ID>
    <ID>ComposableParamOrder:HomeTab.kt$HomeLazyColumn</ID>
    <ID>ComposableParamOrder:IconButton.kt$IconButton</ID>
    <ID>ComposableParamOrder:ImportInstructions.kt$InstructionButton</ID>
    <ID>ComposableParamOrder:IncomeExpensesRow.kt$IncomeExpensesRow</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIcon</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconL</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconM</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconMDefaultIcon</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconS</ID>
    <ID>ComposableParamOrder:ItemIcon.kt$ItemIconSDefaultIcon</ID>
    <ID>ComposableParamOrder:ItemStatisticScreen.kt$Header</ID>
    <ID>ComposableParamOrder:ItemStatisticScreen.kt$UI</ID>
    <ID>ComposableParamOrder:IvyBasicTextField.kt$IvyBasicTextField</ID>
    <ID>ComposableParamOrder:IvyBorderButton.kt$IvyBorderButton</ID>
    <ID>ComposableParamOrder:IvyButton.kt$IvyButton</ID>
    <ID>ComposableParamOrder:IvyCheckbox.kt$IvyCheckbox</ID>
    <ID>ComposableParamOrder:IvyCheckbox.kt$IvyCheckboxWithText</ID>
    <ID>ComposableParamOrder:IvyChecklistTextField.kt$IvyChecklistTextField</ID>
    <ID>ComposableParamOrder:IvyCircleButton.kt$IvyCircleButton</ID>
    <ID>ComposableParamOrder:IvyDescriptionTextField.kt$IvyDescriptionTextField</ID>
    <ID>ComposableParamOrder:IvyIcon.kt$IvyIcon</ID>
    <ID>ComposableParamOrder:IvyIcon.kt$IvyIconScaled</ID>
    <ID>ComposableParamOrder:IvyLineChart.kt$IvyLineChart</ID>
    <ID>ComposableParamOrder:IvyModal.kt$IvyModal</ID>
    <ID>ComposableParamOrder:IvyModalComponents.kt$ModalCheck</ID>
    <ID>ComposableParamOrder:IvyModalComponents.kt$ModalDynamicPrimaryAction</ID>
    <ID>ComposableParamOrder:IvyModalComponents.kt$ModalPositiveButton</ID>
    <ID>ComposableParamOrder:IvyNameTextFieldValue.kt$IvyNameTextField</ID>
    <ID>ComposableParamOrder:IvyNumberTextField.kt$IvyNumberTextField</ID>
    <ID>ComposableParamOrder:IvyOutlinedButton.kt$IvyOutlinedButton</ID>
    <ID>ComposableParamOrder:IvyOutlinedButton.kt$IvyOutlinedButtonFillMaxWidth</ID>
    <ID>ComposableParamOrder:IvyOutlinedTextField.kt$IvyOutlinedTextField</ID>
    <ID>ComposableParamOrder:IvySwitch.kt$IvySwitch</ID>
    <ID>ComposableParamOrder:IvyText.kt$IvyText</ID>
    <ID>ComposableParamOrder:IvyTitleTextField.kt$IvyTitleTextField</ID>
    <ID>ComposableParamOrder:LoanDetailsScreen.kt$Header</ID>
    <ID>ComposableParamOrder:LoanDetailsScreen.kt$UI</ID>
    <ID>ComposableParamOrder:LoanModal.kt$AccountsRow</ID>
    <ID>ComposableParamOrder:LoanModal.kt$LoanModal</ID>
    <ID>ComposableParamOrder:LoanRecordModal.kt$AccountsRow</ID>
    <ID>ComposableParamOrder:LoanRecordModal.kt$LoanRecordModal</ID>
    <ID>ComposableParamOrder:LoansScreen.kt$NoLoansEmptyState</ID>
    <ID>ComposableParamOrder:MonthPickerModal.kt$MonthPickerModal</ID>
    <ID>ComposableParamOrder:OnboardingComponents.kt$OnboardingButton</ID>
    <ID>ComposableParamOrder:OnboardingProgressSlider.kt$OnboardingProgressSlider</ID>
    <ID>ComposableParamOrder:PeriodSelector.kt$PeriodSelector</ID>
    <ID>ComposableParamOrder:PieChartStatisticBottomBar.kt$PieChartStatisticBottomBar</ID>
    <ID>ComposableParamOrder:PieChartStatisticScreen.kt$Header</ID>
    <ID>ComposableParamOrder:PlannedPaymentsBottomBar.kt$PlannedPaymentsBottomBar</ID>
    <ID>ComposableParamOrder:PlannedPaymentsLazyColumn.kt$PlannedPaymentsLazyColumn</ID>
    <ID>ComposableParamOrder:PlansSheet.kt$PlansSheet</ID>
    <ID>ComposableParamOrder:Preview.kt$IvyPreview</ID>
    <ID>ComposableParamOrder:PrimaryAttributeColumn.kt$PrimaryAttributeColumn</ID>
    <ID>ComposableParamOrder:ProgressBar.kt$ProgressBar</ID>
    <ID>ComposableParamOrder:ProgressModal.kt$ProgressModal</ID>
    <ID>ComposableParamOrder:ReorderModal.kt$ReorderModal</ID>
    <ID>ComposableParamOrder:ReorderModal.kt$ReorderModalSingleType</ID>
    <ID>ComposableParamOrder:ScreenTitle.kt$ScreenTitle</ID>
    <ID>ComposableParamOrder:SettingsScreen.kt$AppSwitch</ID>
    <ID>ComposableParamOrder:SettingsScreen.kt$SettingsButtonRow</ID>
    <ID>ComposableParamOrder:SettingsScreen.kt$UI</ID>
    <ID>ComposableParamOrder:Shapes.kt$Shape</ID>
    <ID>ComposableParamOrder:Shapes.kt$ShapeOutlined</ID>
    <ID>ComposableParamOrder:Switch.kt$Switch</ID>
    <ID>ComposableParamOrder:Title.kt$Title</ID>
    <ID>ComposableParamOrder:WrapContentRow.kt$WrapContentRow</ID>
    <ID>CompositionLocalAllowlist:IvyTheme.kt$LocalIvyColors</ID>
    <ID>CompositionLocalAllowlist:IvyTheme.kt$LocalIvyShapes</ID>
    <ID>CompositionLocalAllowlist:IvyTheme.kt$LocalIvyTypography</ID>
    <ID>CompositionLocalAllowlist:IvyUI.kt$LocalIvyContext</ID>
    <ID>ConstructorParameterNaming:LoanTransactionsLogic.kt$LoanTransactionsLogic$val Loan: LTLoanMapper</ID>
    <ID>ConstructorParameterNaming:LoanTransactionsLogic.kt$LoanTransactionsLogic$val LoanRecord: LTLoanRecordMapper</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _accountSuggestions: MutableLiveData&lt;List&lt;CreateAccountData&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _accounts: MutableLiveData&lt;List&lt;AccountBalance&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _categories: MutableLiveData&lt;List&lt;Category&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _categorySuggestions: MutableLiveData&lt;List&lt;CreateCategoryData&gt;&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _opGoogleSignIn: MutableLiveData&lt;OpResult&lt;Unit&gt;?&gt;</ID>
    <ID>ConstructorParameterNaming:OnboardingRouter.kt$OnboardingRouter$private val _state: MutableLiveData&lt;OnboardingState&gt;</ID>
    <ID>ConstructorParameterNaming:ReorderModal.kt$Adapter$private val ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit</ID>
    <ID>CyclomaticComplexMethod:AccountModal.kt$@Composable fun BoxWithConstraintsScope.AccountModal( modal: AccountModalData?, onCreateAccount: (CreateAccountData) -&gt; Unit, onEditAccount: (Account, balance: Double) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:BudgetBattery.kt$@Composable fun BudgetBattery( modifier: Modifier = Modifier, currency: String, expenses: Double, budget: Double, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:CSVViewModel.kt$CSVViewModel$private suspend fun handleEvent(event: CSVEvent)</ID>
    <ID>CyclomaticComplexMethod:DonateScreen.kt$@Composable private fun DonateOptionPicker( option: DonateOption, onSelect: (DonateOption) -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditTransaction, transactionType: TransactionType, baseCurrency: String, initialTitle: String?, titleSuggestions: Set&lt;String&gt;, description: String?, category: Category?, dateTime: LocalDateTime?, account: Account?, toAccount: Account?, dueDate: LocalDateTime?, amount: Double, loanData: EditTransactionDisplayLoan = EditTransactionDisplayLoan(), backgroundProcessing: Boolean = false, customExchangeRateState: CustomExchangeRateState, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, hasChanges: Boolean = false, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onDueDateChanged: (LocalDateTime?) -&gt; Unit, onSetDateTime: (LocalDateTime) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onPayPlannedPayment: () -&gt; Unit, onSave: (closeScreen: Boolean) -&gt; Unit, onSetHasChanges: (hasChanges: Boolean) -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, onExchangeRateChanged: (Double?) -&gt; Unit = { } )</ID>
    <ID>CyclomaticComplexMethod:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun updateCustomExchangeRateState( toAccount: Account? = null, fromAccount: Account? = null, amt: Double? = null, exchangeRate: Double? = null, resetRate: Boolean = false )</ID>
    <ID>CyclomaticComplexMethod:ExportCSVLogic.kt$ExportCSVLogic$private fun Transaction.toCSV( baseCurrency: String, accountMap: Map&lt;UUID, Account&gt;, categoryMap: Map&lt;UUID, Category&gt; ): String</ID>
    <ID>CyclomaticComplexMethod:HomeViewModel.kt$HomeViewModel$override suspend fun handleEvent(event: HomeEvent): suspend () -&gt; HomeState</ID>
    <ID>CyclomaticComplexMethod:InputField.kt$fun EditText.setupInputType( inputType: IvyInputType, imeAction: IvyImeAction, onImeActionListener: ((EditText) -&gt; Unit)? )</ID>
    <ID>CyclomaticComplexMethod:LoanModal.kt$@Composable fun BoxWithConstraintsScope.LoanModal( accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, modal: LoanModalData?, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, onPerformCalculations: () -&gt; Unit = {}, dismiss: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:LoanRecordModal.kt$@Composable fun BoxWithConstraintsScope.LoanRecordModal( modal: LoanRecordModalData?, accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, onDelete: (LoanRecord) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:MainBottomBar.kt$@Composable fun BoxWithConstraintsScope.BottomBar( tab: MainTab, selectTab: (MainTab) -&gt; Unit, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, showAddAccountModal: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:ParseFields.kt$fun parseTransactionType( value: String, metadata: TrnTypeMetadata ): TransactionType?</ID>
    <ID>CyclomaticComplexMethod:PlansSheet.kt$@Composable private fun ColumnScope.PlanCard( plan: Plan, purchased: Boolean, selectedPlan: Plan?, monthlyPlan: Plan?, onClick: () -&gt; Unit )</ID>
    <ID>CyclomaticComplexMethod:ReportViewModel.kt$ReportViewModel$private suspend fun filterTransactions( baseCurrency: String, accounts: List&lt;Account&gt;, filter: ReportFilter, ): List&lt;Transaction&gt;</ID>
    <ID>CyclomaticComplexMethod:RootActivity.kt$RootActivity$@ExperimentalFoundationApi @ExperimentalAnimationApi @Composable private fun BoxWithConstraintsScope.Screens(screen: Screen?)</ID>
    <ID>CyclomaticComplexMethod:TransactionCard.kt$@Composable fun TransactionCard( baseData: AppBaseData, transaction: Transaction, onPayOrGet: (Transaction) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onClick: (Transaction) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:TransactionViewModel.kt$TransactionViewModel$override suspend fun handleEvent(event: TrnEvent): suspend () -&gt; TrnState</ID>
    <ID>CyclomaticComplexMethod:ViewPager.kt$@Composable fun Pager( state: PagerState, modifier: Modifier = Modifier, pageContent: @Composable PagerScope.() -&gt; Unit )</ID>
    <ID>EmptyCatchBlock:CSVImporter.kt$CSVImporter${ }</ID>
    <ID>EmptyCatchBlock:ComposeExt.kt${ }</ID>
    <ID>EmptyCatchBlock:IntervalPickerRow.kt${ }</ID>
    <ID>EmptyFunctionBlock:AccountCharts.kt${ }</ID>
    <ID>EmptyFunctionBlock:PaywallViewModel.kt$PaywallViewModel${ }</ID>
    <ID>EmptyFunctionBlock:RootViewModel.kt$RootViewModel.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyTryBlock:SettingsViewModel.kt$SettingsViewModel${ }</ID>
    <ID>ExplicitItLambdaParameter:TimeValue.kt${ index, it -&gt; Value( x = index.toDouble(), y = it.value ) }</ID>
    <ID>ExplicitItLambdaParameter:TimeValue.kt${ index, it -&gt; Value( x = index.toDouble(), y = it.value.toDouble() ) }</ID>
    <ID>FinalNewline:ivy.lint.gradle.kts$.ivy.lint.gradle.kts</ID>
    <ID>ForbiddenComment:AmountFormatting.kt$// TODO: Review, might cause trouble when integrating crypto</ID>
    <ID>ForbiddenComment:BudgetViewModel.kt$BudgetViewModel$// TODO: Re-work this by creating an FPAction for it</ID>
    <ID>ForbiddenComment:ChartsViewModel.kt$ChartsViewModel$// TODO: Implement</ID>
    <ID>ForbiddenComment:HomeViewModel.kt$HomeViewModel$// TODO: Refactor</ID>
    <ID>ForbiddenComment:ImportResultUI.kt$// TODO: Implement "See failed imports"</ID>
    <ID>ForbiddenComment:InputField.kt$// TODO: Fix bug where cursor color isn't updated after theme switch</ID>
    <ID>ForbiddenComment:ItemStatisticViewModel.kt$ItemStatisticViewModel$// TODO: Rework Overdue to FP</ID>
    <ID>ForbiddenComment:ItemStatisticViewModel.kt$ItemStatisticViewModel$// TODO: Rework Upcoming to FP</ID>
    <ID>ForbiddenComment:IvyLineChart.kt$// TODO: Fix</ID>
    <ID>ForbiddenComment:IvyLineChart.kt$// marginFromX //TODO: FIX</ID>
    <ID>ForbiddenComment:Transaction.kt$Transaction$// TODO: Remove default values &amp; introduce Transaction#dummy() method</ID>
    <ID>ForbiddenComment:TransactionCard.kt$// TODO: Optimize this</ID>
    <ID>ForbiddenComment:TransactionViewModel.kt$TransactionViewModel$// TODO: Handle properly transfers exchange rate</ID>
    <ID>ForbiddenComment:TransactionViewModel.kt$TransactionViewModel$// TODO: Handle transfers properly</ID>
    <ID>ForbiddenComment:WalletAccountLogic.kt$WalletAccountLogic$// TODO: Remove this once Bank Integration trn sync is properly implemented</ID>
    <ID>ForbiddenComment:WalletCategoryLogic.kt$WalletCategoryLogic$// TODO: Transfer zero operation</ID>
    <ID>FunctionNaming:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$internal fun io.gitlab.arturbosch.detekt.extensions.DetektExtension.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$internal fun org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors4ymijgaek646mzru18sdmblu7.kt$internal fun org.gradle.api.Project.`detekt`(configure: Action&lt;io.gitlab.arturbosch.detekt.extensions.DetektExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$internal fun org.gradle.api.artifacts.dsl.DependencyHandler.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$internal fun org.gradle.api.Project.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$internal fun org.gradle.api.Project.`reporting`(configure: Action&lt;org.gradle.api.reporting.ReportingExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorseessl0al0otcsbyqqruvoncpd.kt$internal fun org.gradle.api.reporting.ReportingExtension.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$fun didYouKnow_expensesPieChart()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$fun didYouKnow_pinAddTransactionWidgetCard()</ID>
    <ID>FunctionNaming:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$fun rateUsCard_2()</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun &lt;T : ModuleDependency&gt; DependencyHandler.`detekt`( dependency: T, dependencyConfiguration: T.() -&gt; Unit ): T</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun ArtifactHandler.`detekt`( artifactNotation: Any, configureAction: ConfigurablePublishArtifact.() -&gt; Unit ): PublishArtifact</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun ArtifactHandler.`detekt`(artifactNotation: Any): PublishArtifact</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detekt`(constraintNotation: Any): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detekt`(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( dependencyNotation: Provider&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( dependencyNotation: ProviderConvertible&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( dependencyNotation: String, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektConfigurationAccessors.kt$internal fun DependencyHandler.`detekt`(dependencyNotation: Any): Dependency?</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun &lt;T : ModuleDependency&gt; DependencyHandler.`detektPlugins`( dependency: T, dependencyConfiguration: T.() -&gt; Unit ): T</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun ArtifactHandler.`detektPlugins`( artifactNotation: Any, configureAction: ConfigurablePublishArtifact.() -&gt; Unit ): PublishArtifact</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun ArtifactHandler.`detektPlugins`(artifactNotation: Any): PublishArtifact</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detektPlugins`(constraintNotation: Any): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyConstraintHandler.`detektPlugins`(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit): DependencyConstraint?</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( dependencyNotation: Provider&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( dependencyNotation: ProviderConvertible&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( dependencyNotation: String, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DetektPluginsConfigurationAccessors.kt$internal fun DependencyHandler.`detektPlugins`(dependencyNotation: Any): Dependency?</ID>
    <ID>FunctionNaming:TransactionDao.kt$TransactionDao$@Query("SELECT * FROM transactions WHERE isDeleted = 0 LIMIT 1") suspend fun findAll_LIMIT_1(): List&lt;TransactionEntity&gt;</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$FirstRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$FourthRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$Header: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$SecondRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$ThirdRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:AmountModal.kt$ZeroRow: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:BackBottomBar.kt$PrimaryAction: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ColumnRoot.kt$Content: @Composable ColumnScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:EditBottomSheet.kt$ActionButton: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ItemIcon.kt$Default: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:IvyComponents.kt$Content: @Composable RowScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyComposeApp.kt$Content: @Composable BoxScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyComposeApp.kt$Content: @Composable BoxWithConstraintsScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyModal.kt$Content: @Composable ColumnScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyModal.kt$PrimaryAction: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:IvyModal.kt$SecondaryActions: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:IvyModalDomainComponents.kt$Header: (@Composable () -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:IvyToolbar.kt$Content: @Composable RowScope.() -&gt; Unit = { }</ID>
    <ID>FunctionParameterNaming:IvyUI.kt$Content: @Composable BoxWithConstraintsScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PaywallScreen.kt$ExtraInfo: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PlannedPaymentsLazyColumn.kt$Header: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PlansSheet.kt$Action: @Composable () -&gt; Unit</ID>
    <ID>FunctionParameterNaming:Preview.kt$Content: @Composable BoxWithConstraintsScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PrimaryAttributeColumn.kt$Content: @Composable ColumnScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:PrimaryAttributeColumn.kt$TitleRowExtra: (@Composable RowScope.() -&gt; Unit)? = null</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$Adapter.ItemViewHolder$ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$ItemContent: @Composable (Int, T) -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit</ID>
    <ID>FunctionParameterNaming:ReorderModal.kt$TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }</ID>
    <ID>FunctionParameterNaming:SettingsScreen.kt$Content: @Composable RowScope.() -&gt; Unit</ID>
    <ID>FunctionParameterNaming:WrapContentRow.kt$ItemContent: @Composable (item: T) -&gt; Unit</ID>
    <ID>FunctionReturnTypeSpacing:ReportViewModel.kt$ReportViewModel$private fun calculateBalance(incomeExpenseTransferPair: IncomeExpenseTransferPair) : BigDecimal</ID>
    <ID>FunctionStartOfBodySpacing:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$suspend fun payOrGet( transactions: List&lt;Transaction&gt;, syncTransaction: Boolean = true, skipTransaction: Boolean = false, onUpdateUI: suspend (paidTransactions: List&lt;Transaction&gt;) -&gt; Unit )</ID>
    <ID>FunctionStartOfBodySpacing:ReportViewModel.kt$ReportViewModel$private fun calculateBalance(incomeExpenseTransferPair: IncomeExpenseTransferPair) : BigDecimal</ID>
    <ID>ImportOrdering:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:DetektConfigurationAccessors.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>ImportOrdering:DetektPluginsConfigurationAccessors.kt$import org.gradle.api.Action import org.gradle.api.Incubating import org.gradle.api.NamedDomainObjectProvider import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.artifacts.Configuration import org.gradle.api.artifacts.ConfigurablePublishArtifact import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.Dependency import org.gradle.api.artifacts.DependencyConstraint import org.gradle.api.artifacts.ExternalModuleDependency import org.gradle.api.artifacts.ModuleDependency import org.gradle.api.artifacts.PublishArtifact import org.gradle.api.artifacts.dsl.ArtifactHandler import org.gradle.api.artifacts.dsl.DependencyConstraintHandler import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.provider.Provider import org.gradle.api.provider.ProviderConvertible import org.gradle.api.tasks.TaskContainer import org.gradle.api.tasks.TaskProvider import org.gradle.kotlin.dsl.* import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>Indentation:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$ </ID>
    <ID>Indentation:ReportViewModel.kt$ReportViewModel$ </ID>
    <ID>LongMethod:AccountModal.kt$@Composable fun BoxWithConstraintsScope.AccountModal( modal: AccountModalData?, onCreateAccount: (CreateAccountData) -&gt; Unit, onEditAccount: (Account, balance: Double) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:AccountsTab.kt$@Composable private fun AccountHeader( accountData: AccountData, currency: String, baseCurrency: String, contrastColor: Color, onBalanceClick: () -&gt; Unit )</ID>
    <ID>LongMethod:AccountsTab.kt$@Composable private fun BoxWithConstraintsScope.UI( state: AccountState = AccountState(), onEventHandler: (AccountsEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:AddRateModal.kt$@Composable fun BoxWithConstraintsScope.AddRateModal( visible: Boolean, baseCurrency: String, dismiss: () -&gt; Unit, onAdd: (RatesEvent.AddRate) -&gt; Unit, )</ID>
    <ID>LongMethod:AmountModal.kt$@Composable fun AmountKeyboard( forCalculator: Boolean, ZeroRow: (@Composable RowScope.() -&gt; Unit)? = null, FirstRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, SecondRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, ThirdRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, FourthRowExtra: (@Composable RowScope.() -&gt; Unit)? = null, onNumberPressed: (String) -&gt; Unit, onDecimalPoint: () -&gt; Unit, onBackspace: () -&gt; Unit, )</ID>
    <ID>LongMethod:AmountModal.kt$@Composable fun BoxWithConstraintsScope.AmountModal( id: UUID, visible: Boolean, currency: String, initialAmount: Double?, decimalCountMax: Int = 2, Header: (@Composable () -&gt; Unit)? = null, amountSpacerTop: Dp = 64.dp, dismiss: () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, )</ID>
    <ID>LongMethod:AppLockedScreen.kt$@Composable fun BoxWithConstraintsScope.AppLockedScreen( onShowOSBiometricsModal: () -&gt; Unit, onContinueWithoutAuthentication: () -&gt; Unit )</ID>
    <ID>LongMethod:BalanceRow.kt$@Composable fun BalanceRow( modifier: Modifier = Modifier, currency: String, balance: Double, hiddenMode: Boolean = false, textColor: Color = UI.colors.pureInverse, decimalPaddingTop: Dp = 12.dp, spacerCurrency: Dp = 12.dp, spacerDecimal: Dp = 8.dp, currencyFontSize: TextUnit? = null, integerFontSize: TextUnit? = null, decimalFontSize: TextUnit? = null, currencyUpfront: Boolean = true, balanceAmountPrefix: String? = null, shortenBigNumbers: Boolean = false, )</ID>
    <ID>LongMethod:BudgetBattery.kt$@Composable fun BudgetBattery( modifier: Modifier = Modifier, currency: String, expenses: Double, budget: Double, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:BudgetModal.kt$@Composable fun BoxWithConstraintsScope.BudgetModal( modal: BudgetModalData?, onCreate: (CreateBudgetData) -&gt; Unit, onEdit: (Budget) -&gt; Unit, onDelete: (Budget) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:BudgetScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( timeRange: FromToTimeRange?, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, displayBudgets: List&lt;DisplayBudget&gt;, appBudgetMax: Double, categoryBudgetsTotal: Double, onCreateBudget: (CreateBudgetData) -&gt; Unit = {}, onEditBudget: (Budget) -&gt; Unit = {}, onDeleteBudget: (Budget) -&gt; Unit = {}, onReorder: (List&lt;DisplayBudget&gt;) -&gt; Unit = {} )</ID>
    <ID>LongMethod:BudgetScreen.kt$@Composable private fun Toolbar( timeRange: FromToTimeRange?, baseCurrency: String, appBudgetMax: Double, categoryBudgetsTotal: Double, setReorderModalVisible: (Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:BufferBattery.kt$@Composable fun BufferBattery( modifier: Modifier = Modifier, buffer: Double, balance: Double, currency: String, backgroundNotFilled: Color = UI.colors.pure, onClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:CSVImporter.kt$CSVImporter$private fun mapDate( rowMapping: RowMapping, dateString: String? ): LocalDateTime?</ID>
    <ID>LongMethod:CSVImporter.kt$CSVImporter$private suspend fun mapToTransaction( baseCurrency: String, row: List&lt;String&gt;, rowMapping: RowMapping ): Transaction?</ID>
    <ID>LongMethod:CSVImporter.kt$CSVImporter$suspend fun import( csv: String, rowMapping: RowMapping, onProgress: suspend (progressPercent: Double) -&gt; Unit, ): ImportResult</ID>
    <ID>LongMethod:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapToTransaction( baseCurrency: String, row: CSVRowNew, importantFields: ImportantFields, transferFields: TransferFields, optionalFields: OptionalFields, ): Transaction?</ID>
    <ID>LongMethod:CSVViewModel.kt$CSVViewModel$private suspend fun handleEvent(event: CSVEvent)</ID>
    <ID>LongMethod:CalculatorModal.kt$@Composable fun BoxWithConstraintsScope.CalculatorModal( id: UUID = UUID.randomUUID(), initialAmount: Double?, visible: Boolean, currency: String, dismiss: () -&gt; Unit, onCalculation: (Double) -&gt; Unit )</ID>
    <ID>LongMethod:CategoriesScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( state: CategoriesScreenState = CategoriesScreenState(), onEvent: (CategoriesScreenEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:CategoryCharts.kt$fun LazyListScope.categoryCharts( period: ChartPeriod, baseCurrencyCode: String, categories: List&lt;Category&gt;, categoryExpenseValues: List&lt;CategoryValues&gt; = emptyList(), categoryExpenseCount: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeValues: List&lt;CategoryValues&gt; = emptyList(), categoryIncomeCount: List&lt;CategoryValues&gt; = emptyList(), onLoadCategory: (Category) -&gt; Unit, onRemoveCategory: (Category) -&gt; Unit )</ID>
    <ID>LongMethod:CategoryModal.kt$@Composable fun BoxWithConstraintsScope.CategoryModal( modal: CategoryModalData?, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:ChangeTransactionTypeModal.kt$@Composable fun BoxWithConstraintsScope.ChangeTransactionTypeModal( title: String = stringResource(R.string.set_transaction_type), visible: Boolean, includeTransferType: Boolean, initialType: TransactionType, id: UUID = UUID.randomUUID(), dismiss: () -&gt; Unit, onTransactionTypeChanged: (TransactionType) -&gt; Unit )</ID>
    <ID>LongMethod:ChooseCategoryModal.kt$@ExperimentalFoundationApi @Composable private fun CategoryButton( category: Category, selected: Boolean, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onDeselect: () -&gt; Unit, )</ID>
    <ID>LongMethod:ChooseIconModal.kt$fun ivyIcons(): List&lt;Any&gt;</ID>
    <ID>LongMethod:ChoosePeriodModal.kt$@Composable fun BoxWithConstraintsScope.ChoosePeriodModal( modal: ChoosePeriodModalData?, dismiss: () -&gt; Unit, onPeriodSelected: (TimePeriod) -&gt; Unit )</ID>
    <ID>LongMethod:ChoosePeriodModal.kt$@Composable private fun ChooseMonth( selectedMonthYear: MonthYear?, onSelected: (MonthYear) -&gt; Unit, )</ID>
    <ID>LongMethod:ChoosePeriodModal.kt$@Composable private fun IntervalFromToDate( border: IntervalBorder, dateTime: LocalDateTime?, otherEndDateTime: LocalDateTime?, onSelected: (LocalDateTime?) -&gt; Unit )</ID>
    <ID>LongMethod:ChooseStartDateOfMonthModal.kt$@Composable fun BoxWithConstraintsScope.ChooseStartDateOfMonthModal( id: UUID = UUID.randomUUID(), visible: Boolean, selectedStartDateOfMonth: Int, dismiss: () -&gt; Unit, onStartDateOfMonthSelected: (Int) -&gt; Unit, )</ID>
    <ID>LongMethod:CurrencyPicker.kt$@Composable private fun SearchInput( searchTextFieldValue: TextFieldValue, onSetSearchTextFieldValue: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongMethod:CustomExchangeRateCard.kt$@Composable fun CustomExchangeRateCard( modifier: Modifier = Modifier, title: String = stringResource(R.string.exchange_rate), fromCurrencyCode: String, toCurrencyCode: String, exchangeRate: Double, onRefresh: () -&gt; Unit = {}, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:CustomerJourney.kt$@Composable fun CustomerJourneyCard( cardData: CustomerJourneyCardData, onDismiss: () -&gt; Unit, onCTA: () -&gt; Unit )</ID>
    <ID>LongMethod:DescriptionModal.kt$@Composable fun BoxWithConstraintsScope.DescriptionModal( id: UUID = UUID.randomUUID(), visible: Boolean, description: String?, onDescriptionChanged: (String?) -&gt; Unit, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:DonateModal.kt$@Composable fun BoxWithConstraintsScope.DonateModal( visible: Boolean, dismiss: () -&gt; Unit, onGooglePlay: () -&gt; Unit, onGitHubSponsors: () -&gt; Unit, )</ID>
    <ID>LongMethod:DonateScreen.kt$@Composable private fun DonateOptionPicker( option: DonateOption, onSelect: (DonateOption) -&gt; Unit )</ID>
    <ID>LongMethod:EditBottomSheet.kt$@Composable fun BoxWithConstraintsScope.EditBottomSheet( initialTransactionId: UUID?, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, amount: Double, currency: String, convertedAmount: Double? = null, convertedAmountCurrencyCode: String? = null, amountModalShown: Boolean, setAmountModalShown: (Boolean) -&gt; Unit, ActionButton: @Composable () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>LongMethod:EditBottomSheet.kt$@Composable private fun TransferRowMini( percentCollapsed: Float, fromAccount: Account?, toAccount: Account?, onSetExpanded: () -&gt; Unit )</ID>
    <ID>LongMethod:EditPlannedScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditPlanned, startDate: LocalDateTime?, intervalN: Int?, intervalType: IntervalType?, oneTime: Boolean, type: TransactionType, currency: String, initialTitle: String?, description: String?, category: Category?, account: Account?, amount: Double, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onSave: () -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.EditTransactionScreen(screen: EditTransaction)</ID>
    <ID>LongMethod:EditTransactionScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( screen: EditTransaction, transactionType: TransactionType, baseCurrency: String, initialTitle: String?, titleSuggestions: Set&lt;String&gt;, description: String?, category: Category?, dateTime: LocalDateTime?, account: Account?, toAccount: Account?, dueDate: LocalDateTime?, amount: Double, loanData: EditTransactionDisplayLoan = EditTransactionDisplayLoan(), backgroundProcessing: Boolean = false, customExchangeRateState: CustomExchangeRateState, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, hasChanges: Boolean = false, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onDueDateChanged: (LocalDateTime?) -&gt; Unit, onSetDateTime: (LocalDateTime) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onPayPlannedPayment: () -&gt; Unit, onSave: (closeScreen: Boolean) -&gt; Unit, onSetHasChanges: (hasChanges: Boolean) -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, onExchangeRateChanged: (Double?) -&gt; Unit = { } )</ID>
    <ID>LongMethod:ExchangeRatesScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( state: RatesState, onEvent: (RatesEvent) -&gt; Unit, )</ID>
    <ID>LongMethod:ExportCSVLogic.kt$ExportCSVLogic$private fun Transaction.toCSV( baseCurrency: String, accountMap: Map&lt;UUID, Account&gt;, categoryMap: Map&lt;UUID, Category&gt; ): String</ID>
    <ID>LongMethod:FilterOverlay.kt$@Composable fun BoxWithConstraintsScope.FilterOverlay( visible: Boolean, baseCurrency: String, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, filter: ReportFilter?, onClose: () -&gt; Unit, onSetFilter: (ReportFilter?) -&gt; Unit )</ID>
    <ID>LongMethod:FilterOverlay.kt$@Composable private fun KeywordsFilter( filter: ReportFilter?, nonNullFilter: (ReportFilter?) -&gt; ReportFilter, onSetFilter: (ReportFilter) -&gt; Unit, onShowIncludeKeywordModal: () -&gt; Unit, onShowExcludeKeywordModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:GitHubBackupCard.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun BackupEnabled( viewModel: GitHubBackupViewModel, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:GitHubBackupScreen.kt$@Composable private fun Content( modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:HomeHeader.kt$@Composable private fun HeaderStickyRow( percentExpanded: Float, name: String, period: TimePeriod, currency: String, balance: Double, hideCurrentBalance: Boolean = false, onShowMonthModal: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, )</ID>
    <ID>LongMethod:HomeMoreMenu.kt$@Composable fun BoxWithConstraintsScope.MoreMenu( expanded: Boolean, balance: Double, buffer: Double, currency: String, theme: Theme, setExpanded: (Boolean) -&gt; Unit, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit )</ID>
    <ID>LongMethod:HomeMoreMenu.kt$@Composable private fun QuickAccess( theme: Theme, onSwitchTheme: () -&gt; Unit )</ID>
    <ID>LongMethod:HomeTab.kt$@ExperimentalAnimationApi @ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: HomeState, onEvent: (HomeEvent) -&gt; Unit )</ID>
    <ID>LongMethod:ImportInstructions.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.ImportInstructions( hasSkip: Boolean, importType: ImportType, onSkip: () -&gt; Unit, onUploadClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:ImportResultUI.kt$@Composable fun ImportResultUI( result: ImportResult, launchedFromOnboarding: Boolean, isManualCsvImport: Boolean = false, onTryAgain: (() -&gt; Unit)? = null, onFinish: () -&gt; Unit )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable fun BoxWithConstraintsScope.ItemStatisticScreen(screen: ItemStatistic)</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( period: TimePeriod, baseCurrency: String, currency: String, account: Account?, category: Category?, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, initWithTransactions: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, history: List&lt;TransactionHistoryItem&gt;, upcomingExpanded: Boolean = true, setUpcomingExpanded: (Boolean) -&gt; Unit = {}, upcomingIncome: Double = 0.0, upcomingExpenses: Double = 0.0, upcoming: List&lt;Transaction&gt; = emptyList(), overdueExpanded: Boolean = true, setOverdueExpanded: (Boolean) -&gt; Unit = {}, overdueIncome: Double = 0.0, overdueExpenses: Double = 0.0, overdue: List&lt;Transaction&gt; = emptyList(), onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onSetPeriod: (TimePeriod) -&gt; Unit, onEditAccount: (Account, Double) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onDelete: () -&gt; Unit, onPayOrGet: (Transaction) -&gt; Unit = {}, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun Header( history: List&lt;TransactionHistoryItem&gt;, currency: String, baseCurrency: String, itemColor: Color, account: Account?, category: Category?, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, treatTransfersAsIncomeExpense: Boolean = false, onEdit: () -&gt; Unit, onDelete: () -&gt; Unit, onBalanceClick: () -&gt; Unit, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun Item( itemColor: Color, contrastColor: Color, account: Account?, category: Category?, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:ItemStatisticScreen.kt$@Composable private fun RowScope.HeaderCard( title: String, currencyCode: String, amount: Double, transactionCount: Int, isIncome: Boolean, addButtonText: String?, itemColor: Color, onHeaderCardClicked: () -&gt; Unit = {}, onAddClick: () -&gt; Unit )</ID>
    <ID>LongMethod:ItemStatisticViewModel.kt$ItemStatisticViewModel$private suspend fun initForAccount(accountId: UUID)</ID>
    <ID>LongMethod:ItemStatisticViewModel.kt$ItemStatisticViewModel$private suspend fun initForCategoryWithTransactions( categoryId: UUID, accountFilterList: List&lt;UUID&gt;, transactions: List&lt;Transaction&gt; )</ID>
    <ID>LongMethod:IvyBorderButton.kt$@Composable fun IvyBorderButton( modifier: Modifier = Modifier, text: String, textStyle: TextStyle = UI.typo.b2.style( color = UI.colors.pureInverse, fontWeight = FontWeight.Bold ), backgroundGradient: Gradient = Gradient.solid(UI.colors.mediumInverse), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = UI.colors.pureInverse, enabled: Boolean = true, wrapContentMode: Boolean = true, padding: Dp = 12.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:IvyButton.kt$@Composable fun IvyButton( modifier: Modifier = Modifier, text: String, backgroundGradient: Gradient = GradientIvy, textStyle: TextStyle = UI.typo.b2.style( color = White, fontWeight = FontWeight.Bold ), @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null, iconTint: Color = White, enabled: Boolean = true, shadowAlpha: Float = 0.15f, wrapContentMode: Boolean = true, hasGlow: Boolean = true, padding: Dp = 12.dp, iconEdgePadding: Dp = 12.dp, iconTextPadding: Dp = 4.dp, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:IvyChecklistTextField.kt$@Composable fun IvyChecklistTextField( modifier: Modifier = Modifier, textModifier: Modifier = Modifier, value: TextFieldValue, hint: String?, readOnly: Boolean = false, fontWeight: FontWeight = FontWeight.Medium, hintFontWeight: FontWeight = FontWeight.Medium, textColor: Color = UI.colors.pureInverse, hintColor: Color = UI.colors.mediumInverse, textAlign: TextAlign = TextAlign.Start, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions? = KeyboardOptions.Default, keyboardActions: KeyboardActions? = KeyboardActions.Default, paddingVertical: Dp = 16.dp, onValueChanged: (TextFieldValue) -&gt; Unit )</ID>
    <ID>LongMethod:IvyColorPicker.kt$@Composable fun ColumnScope.IvyColorPicker( selectedColor: Color, onColorSelected: (Color) -&gt; Unit )</ID>
    <ID>LongMethod:IvyLineChart.kt$@Composable private fun IvyChart( modifier: Modifier, title: String, allValues: List&lt;Value&gt;, xLabel: (x: Double) -&gt; String, yLabel: (y: Double) -&gt; String, maxY: Double, minY: Double, functions: List&lt;Function&gt;, tapEvent: TapEvent?, onTap: (TapEvent) -&gt; Unit )</ID>
    <ID>LongMethod:IvyLineChart.kt$@Preview @Composable private fun Preview_IvyChart()</ID>
    <ID>LongMethod:IvyLineChart.kt$private fun DrawScope.drawFunction( function: Function, functionIndex: Int, minY: Double, maxY: Double, chartHeight: Float, cellSize: Float, lineDistance: Float, lineWidth: Float, offsetLeft: Float, offsetTop: Float, offsetBottom: Float, ): List&lt;FunctionPoint&gt;</ID>
    <ID>LongMethod:IvyModal.kt$@Composable fun BoxScope.IvyModal( id: UUID?, visible: Boolean, dismiss: () -&gt; Unit, SecondaryActions: (@Composable () -&gt; Unit)? = null, PrimaryAction: @Composable () -&gt; Unit, scrollState: ScrollState? = rememberScrollState(), shiftIfKeyboardShown: Boolean = true, includeActionsRowPadding: Boolean = true, Content: @Composable ColumnScope.() -&gt; Unit )</ID>
    <ID>LongMethod:IvyViewPager.kt$@Composable fun IvyPager( state: IvyPagerState, pageContent: @Composable BoxScope.(page: Int) -&gt; Unit )</ID>
    <ID>LongMethod:IvyWalletDesign.kt$IvyWalletDesign$override fun typography(): IvyTypography</ID>
    <ID>LongMethod:LoanDetailsScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( baseCurrency: String, loan: Loan?, displayLoanRecords: List&lt;DisplayLoanRecord&gt; = emptyList(), amountPaid: Double, loanAmountPaid: Double = 0.0, accounts: List&lt;Account&gt; = emptyList(), selectedLoanAccount: Account? = null, createLoanTransaction: Boolean = false, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onEditLoan: (Loan, Boolean) -&gt; Unit = { _, _ -&gt; }, onCreateLoanRecord: (CreateLoanRecordData) -&gt; Unit = {}, onEditLoanRecord: (EditLoanRecordData) -&gt; Unit = {}, onDeleteLoanRecord: (LoanRecord) -&gt; Unit = {}, onDeleteLoan: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:LoanDetailsScreen.kt$@Composable private fun LoanInfoCard( loan: Loan, baseCurrency: String, amountPaid: Double, loanAmountPaid: Double = 0.0, selectedLoanAccount: Account? = null, onAddRecord: () -&gt; Unit )</ID>
    <ID>LongMethod:LoanDetailsScreen.kt$@Composable private fun LoanRecordItem( loan: Loan, loanRecord: LoanRecord, baseCurrency: String, loanBaseCurrency: String = "", account: Account? = null, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:LoanDetailsViewModel.kt$LoanDetailsViewModel$private fun load(loanId: UUID)</ID>
    <ID>LongMethod:LoanModal.kt$@Composable fun BoxWithConstraintsScope.LoanModal( accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, modal: LoanModalData?, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, onPerformCalculations: () -&gt; Unit = {}, dismiss: () -&gt; Unit, )</ID>
    <ID>LongMethod:LoanRecordModal.kt$@Composable fun BoxWithConstraintsScope.LoanRecordModal( modal: LoanRecordModalData?, accounts: List&lt;Account&gt; = emptyList(), onCreateAccount: (CreateAccountData) -&gt; Unit = {}, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, onDelete: (LoanRecord) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongMethod:LoansScreen.kt$@Composable private fun BoxWithConstraintsScope.UI( onEventHandler: (LoanScreenEvent) -&gt; Unit = {}, state: LoanScreenState = LoanScreenState() )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable fun BoxWithConstraintsScope.BottomBar( tab: MainTab, selectTab: (MainTab) -&gt; Unit, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, showAddAccountModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable private fun AddExpenseButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonCenterY: Float, clickAreaWidth: Int, onAddExpense: () -&gt; Unit )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable private fun AddIncomeButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonLeftX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddIncome: () -&gt; Unit )</ID>
    <ID>LongMethod:MainBottomBar.kt$@Composable private fun AddTransferButton( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonRightX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddTransfer: () -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingAccounts.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.OnboardingAccounts( baseCurrency: String, suggestions: List&lt;CreateAccountData&gt;, accounts: List&lt;AccountBalance&gt;, onCreateAccount: (CreateAccountData) -&gt; Unit = { }, onEditAccount: (Account, Double) -&gt; Unit = { _, _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:OnboardingCategories.kt$@ExperimentalFoundationApi @Composable fun BoxWithConstraintsScope.OnboardingCategories( suggestions: List&lt;CreateCategoryData&gt;, categories: List&lt;Category&gt;, onCreateCategory: (CreateCategoryData) -&gt; Unit = { }, onEditCategory: (Category) -&gt; Unit = { _ -&gt; }, onSkip: () -&gt; Unit = {}, onDone: () -&gt; Unit = {} )</ID>
    <ID>LongMethod:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Categories()</ID>
    <ID>LongMethod:OnboardingCategories.kt$@ExperimentalFoundationApi @Preview @Composable private fun Preview_Premium()</ID>
    <ID>LongMethod:OnboardingPrivacyTC.kt$@Composable private fun SwipeToAgree( swipeToAgreeText: String, agreedText: String, onAgreed: (Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingSetCurrency.kt$@Composable fun BoxWithConstraintsScope.OnboardingSetCurrency( preselectedCurrency: IvyCurrency, onSetCurrency: (IvyCurrency) -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingSetName.kt$@Composable fun OnboardingSetName( onNameSet: (String) -&gt; Unit )</ID>
    <ID>LongMethod:OnboardingSplashLogin.kt$@Composable fun BoxWithConstraintsScope.OnboardingSplashLogin( onboardingState: OnboardingState, opGoogleSignIn: OpResult&lt;Unit&gt;?, onLoginWithGoogle: () -&gt; Unit, onSkip: () -&gt; Unit, )</ID>
    <ID>LongMethod:OnboardingType.kt$@Composable fun OnboardingType( onStartImport: () -&gt; Unit, onStartFresh: () -&gt; Unit, )</ID>
    <ID>LongMethod:ParseFields.kt$private fun possibleDateFormats(metadata: DateMetadata): List&lt;String&gt;</ID>
    <ID>LongMethod:PaywallScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, paywallReason: PaywallReason?, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, budgets: List&lt;Budget&gt;, loans: List&lt;Loan&gt;, onPlanSelected: (Plan?) -&gt; Unit = {}, onBuy: (Plan) -&gt; Unit, )</ID>
    <ID>LongMethod:PeriodSelector.kt$@Composable fun PeriodSelector( modifier: Modifier = Modifier, period: TimePeriod, onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onShowChoosePeriodModal: () -&gt; Unit, )</ID>
    <ID>LongMethod:PieChartAct.kt$PieChartAct$override suspend fun Input.compose(): suspend () -&gt; Output</ID>
    <ID>LongMethod:PieChartStatisticScreen.kt$@Composable private fun CategoryAmountCard( categoryAmount: CategoryAmount, currency: String, totalAmount: Double, selectedCategory: SelectedCategory?, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:PieChartStatisticScreen.kt$@Composable private fun Header( transactionType: TransactionType, period: TimePeriod, percentExpanded: Float, currency: String, amount: Double, showCloseButtonOnly: Boolean = false, onShowMonthModal: () -&gt; Unit, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, onClose: () -&gt; Unit, onAdd: (TransactionType) -&gt; Unit, )</ID>
    <ID>LongMethod:PieChartStatisticScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: PieChartStatisticState = PieChartStatisticState(), onEventHandler: (PieChartStatisticEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:PlannedPaymentCard.kt$@Composable private fun PlannedPaymentHeaderRow( plannedPayment: PlannedPaymentRule, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt; )</ID>
    <ID>LongMethod:PlannedPaymentsLazyColumn.kt$private fun LazyListScope.plannedPaymentItems( nav: Navigation, currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, listState: LazyListState, oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, oneTimeExpanded: Boolean, setOneTimeExpanded: (Boolean) -&gt; Unit, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double, recurringExpanded: Boolean, setRecurringExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongMethod:PlansSheet.kt$@Composable fun BoxWithConstraintsScope.PlansSheet( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, onPlansSheetHeightChanged: (Int) -&gt; Unit = {}, onPlanSelected: (Plan?) -&gt; Unit, onBuy: (Plan) -&gt; Unit )</ID>
    <ID>LongMethod:PlansSheet.kt$@Composable private fun ColumnScope.PlanCard( plan: Plan, purchased: Boolean, selectedPlan: Plan?, monthlyPlan: Plan?, onClick: () -&gt; Unit )</ID>
    <ID>LongMethod:PreloadDataLogic.kt$PreloadDataLogic$fun categorySuggestions(): List&lt;CreateCategoryData&gt;</ID>
    <ID>LongMethod:RecurringRuleModal.kt$@Composable fun BoxWithConstraintsScope.RecurringRuleModal( modal: RecurringRuleModalData?, dismiss: () -&gt; Unit, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, )</ID>
    <ID>LongMethod:ReorderModal.kt$@Composable fun &lt;T : Reorderable&gt; BoxScope.ReorderModal( visible: Boolean, id: UUID = UUID.randomUUID(), TitleContent: @Composable ColumnScope.() -&gt; Unit = { Text( modifier = Modifier.padding(start = 32.dp), text = stringResource(R.string.reorder), style = UI.typo.b1.style( UI.colors.pureInverse, FontWeight.ExtraBold ) ) }, initialItems: List&lt;Any&gt;, dismiss: () -&gt; Unit, onUpdateItemOrderNum: ( itemsInNewOrder: List&lt;Any&gt;, item: T, newOrderNum: Double ) -&gt; Unit = { _, _, _ -&gt; }, onReordered: ((List&lt;Any&gt;) -&gt; Unit)? = null, ItemContent: @Composable RowScope.(Int, Any) -&gt; Unit )</ID>
    <ID>LongMethod:ReportScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( state: ReportScreenState = ReportScreenState(), onEventHandler: (ReportScreenEvent) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ReportViewModel.kt$ReportViewModel$private suspend fun filterTransactions( baseCurrency: String, accounts: List&lt;Account&gt;, filter: ReportFilter, ): List&lt;Transaction&gt;</ID>
    <ID>LongMethod:ReportViewModel.kt$ReportViewModel$private suspend fun setFilter(filter: ReportFilter?)</ID>
    <ID>LongMethod:SearchScreen.kt$@Composable private fun UI( transactions: List&lt;TransactionHistoryItem&gt;, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onSearch: (String) -&gt; Unit = {} )</ID>
    <ID>LongMethod:ServerStopScreen.kt$@Composable private fun Content( onBackup: () -&gt; Unit )</ID>
    <ID>LongMethod:SettingsScreen.kt$@Composable private fun AccountCardUser( localName: String?, user: User, opSync: OpResult&lt;Boolean&gt;?, onSync: () -&gt; Unit, )</ID>
    <ID>LongMethod:SettingsScreen.kt$@ExperimentalFoundationApi @Composable private fun BoxWithConstraintsScope.UI( user: User?, currencyCode: String, opSync: OpResult&lt;Boolean&gt;?, lockApp: Boolean, showNotifications: Boolean = true, hideCurrentBalance: Boolean = false, progressState: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, nameLocalAccount: String?, startDateOfMonth: Int = 1, onSetCurrency: (String) -&gt; Unit, onSetName: (String) -&gt; Unit = {}, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onBackupData: () -&gt; Unit = {}, onExportToCSV: () -&gt; Unit = {}, onSetLockApp: (Boolean) -&gt; Unit = {}, onSetShowNotifications: (Boolean) -&gt; Unit = {}, onSetTreatTransfersAsIncExp: (Boolean) -&gt; Unit = {}, onSetHideCurrentBalance: (Boolean) -&gt; Unit = {}, onSetStartDateOfMonth: (Int) -&gt; Unit = {}, onDeleteAllUserData: () -&gt; Unit = {}, onDeleteCloudUserData: () -&gt; Unit = {}, )</ID>
    <ID>LongMethod:TransactionCard.kt$@Composable fun TransactionCard( baseData: AppBaseData, transaction: Transaction, onPayOrGet: (Transaction) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onClick: (Transaction) -&gt; Unit, )</ID>
    <ID>LongMethod:TransactionCard.kt$@Composable fun TypeAmountCurrency( transactionType: TransactionType, dueDate: LocalDateTime?, currency: String, amount: Double )</ID>
    <ID>LongMethod:ViewPager.kt$@Composable fun Pager( state: PagerState, modifier: Modifier = Modifier, pageContent: @Composable PagerScope.() -&gt; Unit )</ID>
    <ID>LongMethod:WalletBalanceWidgetContent.kt$@Composable fun IncomeExpenseSection( income: String, expense: String, currency: String )</ID>
    <ID>LongParameterList:AccountModal.kt$( account: Account?, nameTextFieldValue: TextFieldValue, currency: String, color: Color, icon: String?, amount: Double, includeInBalance: Boolean, onCreateAccount: (CreateAccountData) -&gt; Unit, onEditAccount: (Account, balance: Double) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:AccountsViewModel.kt$AccountsViewModel$( private val walletDAOs: WalletDAOs, private val accountDao: AccountDao, private val settingsDao: SettingsDao, private val accountCreator: AccountCreator, private val ivyContext: IvyWalletCtx, private val sharedPrefs: SharedPrefs, private val accountsAct: AccountsAct, private val calcWalletBalanceAct: CalcWalletBalanceAct, private val baseCurrencyAct: BaseCurrencyAct, private val accountDataAct: AccountDataAct )</ID>
    <ID>LongParameterList:AmountModal.kt$( id: UUID, visible: Boolean, currency: String, initialAmount: Double?, decimalCountMax: Int = 2, Header: (@Composable () -&gt; Unit)? = null, amountSpacerTop: Dp = 64.dp, dismiss: () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, )</ID>
    <ID>LongParameterList:BackupLogic.kt$BackupLogic$( private val accountDao: AccountDao, private val budgetDao: BudgetDao, private val categoryDao: CategoryDao, private val loanRecordDao: LoanRecordDao, private val loanDao: LoanDao, private val plannedPaymentRuleDao: PlannedPaymentRuleDao, private val settingsDao: SettingsDao, private val transactionDao: TransactionDao, private val sharedPrefs: SharedPrefs, @ApplicationContext private val context: Context, )</ID>
    <ID>LongParameterList:BudgetScreen.kt$( timeRange: FromToTimeRange?, baseCurrency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, displayBudgets: List&lt;DisplayBudget&gt;, appBudgetMax: Double, categoryBudgetsTotal: Double, onCreateBudget: (CreateBudgetData) -&gt; Unit = {}, onEditBudget: (Budget) -&gt; Unit = {}, onDeleteBudget: (Budget) -&gt; Unit = {}, onReorder: (List&lt;DisplayBudget&gt;) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:BudgetViewModel.kt$BudgetViewModel$( private val sharedPrefs: SharedPrefs, private val budgetDao: BudgetDao, private val budgetCreator: BudgetCreator, private val ivyContext: IvyWalletCtx, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val budgetsAct: BudgetsAct, private val baseCurrencyAct: BaseCurrencyAct, private val historyTrnsAct: HistoryTrnsAct, private val exchangeAct: ExchangeAct )</ID>
    <ID>LongParameterList:CSVImporter.kt$CSVImporter$( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, )</ID>
    <ID>LongParameterList:CSVImporterV2.kt$CSVImporterV2$( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, )</ID>
    <ID>LongParameterList:CategoriesViewModel.kt$CategoriesViewModel$( private val categoryDao: CategoryDao, private val categoryCreator: CategoryCreator, private val categoriesAct: CategoriesAct, private val ivyContext: IvyWalletCtx, private val sharedPrefs: SharedPrefs, private val baseCurrencyAct: BaseCurrencyAct, private val accountsAct: AccountsAct, private val trnsWithRangeAndAccFiltersAct: TrnsWithRangeAndAccFiltersAct, private val categoryIncomeWithAccountFiltersAct: CategoryIncomeWithAccountFiltersAct )</ID>
    <ID>LongParameterList:CategoryModal.kt$( hint: String, @DrawableRes defaultIcon: Int, color: Color, icon: String?, autoFocusKeyboard: Boolean, nameTextFieldValue: TextFieldValue, setNameTextFieldValue: (TextFieldValue) -&gt; Unit, showChooseIconModal: () -&gt; Unit )</ID>
    <ID>LongParameterList:ChooseCategoryModal.kt$( id: UUID = UUID.randomUUID(), visible: Boolean, initialCategory: Category?, categories: List&lt;Category&gt;, showCategoryModal: (Category?) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( initialTransactionId: UUID?, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, amount: Double, currency: String, convertedAmount: Double? = null, convertedAmountCurrencyCode: String? = null, amountModalShown: Boolean, setAmountModalShown: (Boolean) -&gt; Unit, ActionButton: @Composable () -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( keyboardShown: Boolean, keyboardShownInsetDp: Dp, setBottomBarHeight: (Int) -&gt; Unit, expanded: Boolean, internalExpanded: Boolean, setInternalExpanded: (Boolean) -&gt; Unit, navBarPadding: Dp, ActionButton: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( percentExpanded: Float, label: String, type: TransactionType, accounts: List&lt;Account&gt;, selectedAccount: Account?, toAccount: Account?, onSelectedAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onAddNewAccount: () -&gt; Unit, )</ID>
    <ID>LongParameterList:EditBottomSheet.kt$( type: TransactionType, amount: Double, currency: String, percentExpanded: Float, label: String, account: Account?, showConvertedAmountText: String? = null, onShowAmountModal: () -&gt; Unit, onAccountMiniClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:EditPlannedScreen.kt$( screen: EditPlanned, startDate: LocalDateTime?, intervalN: Int?, intervalType: IntervalType?, oneTime: Boolean, type: TransactionType, currency: String, initialTitle: String?, description: String?, category: Category?, account: Account?, amount: Double, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, onRuleChanged: (LocalDateTime, oneTime: Boolean, Int?, IntervalType?) -&gt; Unit, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onSave: () -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:EditPlannedViewModel.kt$EditPlannedViewModel$( private val transactionDao: TransactionDao, private val accountDao: AccountDao, private val categoryDao: CategoryDao, private val settingsDao: SettingsDao, private val nav: Navigation, private val plannedPaymentRuleDao: PlannedPaymentRuleDao, private val plannedPaymentsGenerator: PlannedPaymentsGenerator, private val categoryCreator: CategoryCreator, private val accountCreator: AccountCreator, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct )</ID>
    <ID>LongParameterList:EditTransactionScreen.kt$( screen: EditTransaction, transactionType: TransactionType, baseCurrency: String, initialTitle: String?, titleSuggestions: Set&lt;String&gt;, description: String?, category: Category?, dateTime: LocalDateTime?, account: Account?, toAccount: Account?, dueDate: LocalDateTime?, amount: Double, loanData: EditTransactionDisplayLoan = EditTransactionDisplayLoan(), backgroundProcessing: Boolean = false, customExchangeRateState: CustomExchangeRateState, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, hasChanges: Boolean = false, onTitleChanged: (String?) -&gt; Unit, onDescriptionChanged: (String?) -&gt; Unit, onAmountChanged: (Double) -&gt; Unit, onCategoryChanged: (Category?) -&gt; Unit, onAccountChanged: (Account) -&gt; Unit, onToAccountChanged: (Account) -&gt; Unit, onDueDateChanged: (LocalDateTime?) -&gt; Unit, onSetDateTime: (LocalDateTime) -&gt; Unit, onSetTransactionType: (TransactionType) -&gt; Unit, onCreateCategory: (CreateCategoryData) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onPayPlannedPayment: () -&gt; Unit, onSave: (closeScreen: Boolean) -&gt; Unit, onSetHasChanges: (hasChanges: Boolean) -&gt; Unit, onDelete: () -&gt; Unit, onCreateAccount: (CreateAccountData) -&gt; Unit, onExchangeRateChanged: (Double?) -&gt; Unit = { } )</ID>
    <ID>LongParameterList:EditTransactionViewModel.kt$EditTransactionViewModel$( private val loanDao: LoanDao, private val transactionDao: TransactionDao, private val settingsDao: SettingsDao, private val nav: Navigation, private val sharedPrefs: SharedPrefs, private val exchangeRatesLogic: ExchangeRatesLogic, private val categoryCreator: CategoryCreator, private val accountCreator: AccountCreator, private val paywallLogic: PaywallLogic, private val plannedPaymentsLogic: PlannedPaymentsLogic, private val smartTitleSuggestionsLogic: SmartTitleSuggestionsLogic, private val loanTransactionsLogic: LoanTransactionsLogic, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val trnByIdAct: TrnByIdAct, private val categoryByIdAct: CategoryByIdAct, private val accountByIdAct: AccountByIdAct )</ID>
    <ID>LongParameterList:FilterOverlay.kt$( visible: Boolean, baseCurrency: String, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, filter: ReportFilter?, onClose: () -&gt; Unit, onSetFilter: (ReportFilter?) -&gt; Unit )</ID>
    <ID>LongParameterList:HomeHeader.kt$( @DrawableRes icon: Int, backgroundGradient: Gradient, percentVisible: Float, textColor: Color, label: String, currency: String, amount: Double, testTag: String, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:HomeHeader.kt$( expanded: Boolean, name: String, period: TimePeriod, currency: String, balance: Double, bufferDiff: Double, hideCurrentBalance: Boolean = false, onShowMonthModal: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, )</ID>
    <ID>LongParameterList:HomeHeader.kt$( percentExpanded: Float = 1f, period: TimePeriod, currency: String, balance: Double, bufferDiff: Double, monthlyIncome: Double, monthlyExpenses: Double, hideCurrentBalance: Boolean, onOpenMoreMenu: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {} )</ID>
    <ID>LongParameterList:HomeHeader.kt$( percentExpanded: Float, name: String, period: TimePeriod, currency: String, balance: Double, hideCurrentBalance: Boolean = false, onShowMonthModal: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, )</ID>
    <ID>LongParameterList:HomeMoreMenu.kt$( balance: Double, buffer: Double, currency: String, theme: Theme, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit, )</ID>
    <ID>LongParameterList:HomeMoreMenu.kt$( expanded: Boolean, balance: Double, buffer: Double, currency: String, theme: Theme, setExpanded: (Boolean) -&gt; Unit, onSwitchTheme: () -&gt; Unit, onBufferClick: () -&gt; Unit, onCurrencyClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:HomeTab.kt$( hideBalanceRowState: MutableState&lt;Boolean&gt;, listState: LazyListState, buffer: BufferInfo, hideCurrentBalance: Boolean, period: TimePeriod, baseData: AppBaseData, upcoming: DueSection, overdue: DueSection, balance: BigDecimal, stats: IncomeExpensePair, history: List&lt;TransactionHistoryItem&gt;, customerJourneyCards: List&lt;CustomerJourneyCardData&gt;, setUpcomingExpanded: (Boolean) -&gt; Unit, setOverdueExpanded: (Boolean) -&gt; Unit, onOpenMoreMenu: () -&gt; Unit, onBalanceClick: () -&gt; Unit, onHiddenBalanceClick: () -&gt; Unit = {}, onPayOrGet: (Transaction) -&gt; Unit, onDismiss: (CustomerJourneyCardData) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:HomeViewModel.kt$HomeViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val exchangeRatesLogic: ExchangeRatesLogic, private val plannedPaymentsLogic: PlannedPaymentsLogic, private val customerJourneyLogic: CustomerJourneyLogic, private val historyWithDateDivsAct: HistoryWithDateDivsAct, private val calcIncomeExpenseAct: CalcIncomeExpenseAct, private val calcWalletBalanceAct: CalcWalletBalanceAct, private val settingsAct: SettingsAct, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val calcBufferDiffAct: CalcBufferDiffAct, private val upcomingAct: UpcomingAct, private val overdueAct: OverdueAct, private val hasTrnsAct: HasTrnsAct, private val startDayOfMonthAct: StartDayOfMonthAct, private val shouldHideBalanceAct: ShouldHideBalanceAct, private val updateSettingsAct: UpdateSettingsAct, private val updateAccCacheAct: UpdateAccCacheAct, private val updateCategoriesCacheAct: UpdateCategoriesCacheAct, private val syncExchangeRatesAct: SyncExchangeRatesAct, )</ID>
    <ID>LongParameterList:ImportViewModel.kt$ImportViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val fileReader: IvyFileReader, private val csvNormalizer: CSVNormalizer, private val csvMapper: CSVMapper, private val csvImporter: CSVImporter, private val backupLogic: BackupLogic )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( history: List&lt;TransactionHistoryItem&gt;, currency: String, baseCurrency: String, itemColor: Color, account: Account?, category: Category?, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, treatTransfersAsIncomeExpense: Boolean = false, onEdit: () -&gt; Unit, onDelete: () -&gt; Unit, onBalanceClick: () -&gt; Unit, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( history: List&lt;TransactionHistoryItem&gt;, currency: String, income: Double, expenses: Double, hasAddButtons: Boolean, itemColor: Color, incomeHeaderCardClicked: () -&gt; Unit = {}, expenseHeaderCardClicked: () -&gt; Unit = {}, onAddTransaction: (TransactionType) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( itemColor: Color, contrastColor: Color, account: Account?, category: Category?, showCategoryModal: () -&gt; Unit, showAccountModal: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( period: TimePeriod, baseCurrency: String, currency: String, account: Account?, category: Category?, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, balance: Double, balanceBaseCurrency: Double?, income: Double, expenses: Double, initWithTransactions: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, history: List&lt;TransactionHistoryItem&gt;, upcomingExpanded: Boolean = true, setUpcomingExpanded: (Boolean) -&gt; Unit = {}, upcomingIncome: Double = 0.0, upcomingExpenses: Double = 0.0, upcoming: List&lt;Transaction&gt; = emptyList(), overdueExpanded: Boolean = true, setOverdueExpanded: (Boolean) -&gt; Unit = {}, overdueIncome: Double = 0.0, overdueExpenses: Double = 0.0, overdue: List&lt;Transaction&gt; = emptyList(), onPreviousMonth: () -&gt; Unit, onNextMonth: () -&gt; Unit, onSetPeriod: (TimePeriod) -&gt; Unit, onEditAccount: (Account, Double) -&gt; Unit, onEditCategory: (Category) -&gt; Unit, onDelete: () -&gt; Unit, onPayOrGet: (Transaction) -&gt; Unit = {}, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LongParameterList:ItemStatisticScreen.kt$( title: String, currencyCode: String, amount: Double, transactionCount: Int, isIncome: Boolean, addButtonText: String?, itemColor: Color, onHeaderCardClicked: () -&gt; Unit = {}, onAddClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:ItemStatisticViewModel.kt$ItemStatisticViewModel$( private val accountDao: AccountDao, private val transactionDao: TransactionDao, private val categoryDao: CategoryDao, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val accountLogic: WalletAccountLogic, private val categoryLogic: WalletCategoryLogic, private val plannedPaymentRuleDao: PlannedPaymentRuleDao, private val categoryCreator: CategoryCreator, private val accountCreator: AccountCreator, private val plannedPaymentsLogic: PlannedPaymentsLogic, private val sharedPrefs: SharedPrefs, private val categoriesAct: CategoriesAct, private val accountsAct: AccountsAct, private val accTrnsAct: AccTrnsAct, private val trnsWithDateDivsAct: TrnsWithDateDivsAct, private val baseCurrencyAct: BaseCurrencyAct, private val calcAccBalanceAct: CalcAccBalanceAct, private val calcAccIncomeExpenseAct: CalcAccIncomeExpenseAct, private val calcTrnsIncomeExpenseAct: CalcTrnsIncomeExpenseAct, private val exchangeAct: ExchangeAct )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( cellSize: Float, offsetLeft: Float, offsetRight: Float, lineDistance: Float, chartHeight: Float, allValues: List&lt;Value&gt;, xLabel: (x: Double) -&gt; String, textColor: Color )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( chartWidth: Float, lineDistance: Float, chartHeight: Float, offsetLeft: Float = 0f, offsetTop: Float = 0f, offsetBottom: Float = 0f, cellSize: Float, maxY: Double, minY: Double, functions: List&lt;Function&gt;, )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( function: Function, functionIndex: Int, minY: Double, maxY: Double, chartHeight: Float, cellSize: Float, lineDistance: Float, lineWidth: Float, offsetLeft: Float, offsetTop: Float, offsetBottom: Float, )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( functions: List&lt;Function&gt;, tapEvent: TapEvent?, chartWidth: Float, chartHeight: Float, minY: Double, maxY: Double )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( max: Double, min: Double, value: Double, chartHeight: Float, offsetTop: Float, offsetBottom: Float )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( minY: Double, maxY: Double, offsetTop: Float, chartHeight: Float, offsetBottom: Float, yLabel: (y: Double) -&gt; String, cellSize: Float )</ID>
    <ID>LongParameterList:IvyLineChart.kt$( modifier: Modifier, title: String, allValues: List&lt;Value&gt;, xLabel: (x: Double) -&gt; String, yLabel: (y: Double) -&gt; String, maxY: Double, minY: Double, functions: List&lt;Function&gt;, tapEvent: TapEvent?, onTap: (TapEvent) -&gt; Unit )</ID>
    <ID>LongParameterList:IvyModal.kt$( visible: Boolean, modalPercentVisible: Float, keyboardShownInsetDp: Dp, navBarPadding: Dp, onHeightChanged: (Int) -&gt; Unit, onClose: () -&gt; Unit, SecondaryActions: (@Composable () -&gt; Unit)? = null, PrimaryAction: @Composable () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanDetailsScreen.kt$( loan: Loan, baseCurrency: String, amountPaid: Double, loanAmountPaid: Double = 0.0, itemColor: Color, selectedLoanAccount: Account? = null, onAmountClick: () -&gt; Unit, onEditLoan: () -&gt; Unit, onDeleteLoan: () -&gt; Unit, onAddRecord: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanDetailsViewModel.kt$LoanDetailsViewModel$( private val loanDao: LoanDao, private val loanRecordDao: LoanRecordDao, private val loanCreator: LoanCreator, private val loanRecordCreator: LoanRecordCreator, private val settingsDao: SettingsDao, private val ivyContext: IvyWalletCtx, private val transactionDao: TransactionDao, private val accountDao: AccountDao, private val accountCreator: AccountCreator, private val loanTransactionsLogic: LoanTransactionsLogic, private val nav: Navigation, private val accountsAct: AccountsAct, private val loanByIdAct: LoanByIdAct )</ID>
    <ID>LongParameterList:LoanModal.kt$( loan: Loan?, nameTextFieldValue: TextFieldValue, type: LoanType, color: Color, icon: String?, amount: Double, selectedAccount: Account? = null, createLoanTransaction: Boolean = false, onCreateLoan: (CreateLoanData) -&gt; Unit, onEditLoan: (Loan, Boolean) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanRecordModal.kt$( loanRecord: LoanRecord?, noteTextFieldValue: TextFieldValue, amount: Double, dateTime: LocalDateTime, loanRecordInterest: Boolean = false, createLoanRecordTransaction: Boolean = false, selectedAccount: Account? = null, reCalculateAmount: Boolean = false, onCreate: (CreateLoanRecordData) -&gt; Unit, onEdit: (EditLoanRecordData) -&gt; Unit, dismiss: () -&gt; Unit )</ID>
    <ID>LongParameterList:LoanTransactionsCore.kt$LoanTransactionsCore$( oldLoanRecordAccountId: UUID?, oldLonRecordConvertedAmount: Double?, oldLoanRecordAmount: Double, newLoanRecordAccountID: UUID?, newLoanRecordAmount: Double, loanAccountId: UUID?, accounts: List&lt;Account&gt;, reCalculateLoanAmount: Boolean = false, )</ID>
    <ID>LongParameterList:LoanTransactionsCore.kt$LoanTransactionsCore$( private val categoryDao: CategoryDao, private val transactionDao: TransactionDao, private val ivyContext: IvyWalletCtx, private val loanRecordDao: LoanRecordDao, private val loanDao: LoanDao, private val settingsDao: SettingsDao, private val accountsDao: AccountDao, private val exchangeRatesLogic: ExchangeRatesLogic )</ID>
    <ID>LongParameterList:LoanViewModel.kt$LoanViewModel$( private val loanDao: LoanDao, private val loanRecordDao: LoanRecordDao, private val settingsDao: SettingsDao, private val loanCreator: LoanCreator, private val sharedPrefs: SharedPrefs, private val accountCreator: AccountCreator, private val loanTransactionsLogic: LoanTransactionsLogic, private val loansAct: LoansAct, private val accountsAct: AccountsAct, )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonCenterY: Float, clickAreaWidth: Int, onAddExpense: () -&gt; Unit )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonLeftX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddIncome: () -&gt; Unit )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, buttonRightX: Float, sideButtonsY: Float, clickAreaWidth: Int, onAddTransfer: () -&gt; Unit )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( buttonsShownPercent: Float, fabStartX: Float, fabStartY: Float, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MainBottomBar.kt$( tab: MainTab, selectTab: (MainTab) -&gt; Unit, onAddIncome: () -&gt; Unit, onAddExpense: () -&gt; Unit, onAddTransfer: () -&gt; Unit, onAddPlannedPayment: () -&gt; Unit, showAddAccountModal: () -&gt; Unit, )</ID>
    <ID>LongParameterList:OnboardingRouter.kt$OnboardingRouter$( private val _opGoogleSignIn: MutableLiveData&lt;OpResult&lt;Unit&gt;?&gt;, private val _state: MutableLiveData&lt;OnboardingState&gt;, private val _accounts: MutableLiveData&lt;List&lt;AccountBalance&gt;&gt;, private val _accountSuggestions: MutableLiveData&lt;List&lt;CreateAccountData&gt;&gt;, private val _categories: MutableLiveData&lt;List&lt;Category&gt;&gt;, private val _categorySuggestions: MutableLiveData&lt;List&lt;CreateCategoryData&gt;&gt;, private val nav: Navigation, private val accountDao: AccountDao, private val sharedPrefs: SharedPrefs, private val transactionReminderLogic: TransactionReminderLogic, private val preloadDataLogic: PreloadDataLogic, private val categoryDao: CategoryDao, private val logoutLogic: LogoutLogic, private val syncExchangeRatesAct: SyncExchangeRatesAct, )</ID>
    <ID>LongParameterList:OnboardingScreen.kt$( onboardingState: OnboardingState, currency: IvyCurrency, opGoogleSignIn: OpResult&lt;Unit&gt;?, accountSuggestions: List&lt;CreateAccountData&gt;, accounts: List&lt;AccountBalance&gt;, categorySuggestions: List&lt;CreateCategoryData&gt;, categories: List&lt;Category&gt;, onLoginWithGoogle: () -&gt; Unit = {}, onSkip: () -&gt; Unit = {}, onStartImport: () -&gt; Unit = {}, onStartFresh: () -&gt; Unit = {}, onSetCurrency: (IvyCurrency) -&gt; Unit = {}, onCreateAccount: (CreateAccountData) -&gt; Unit = { }, onEditAccount: (Account, Double) -&gt; Unit = { _, _ -&gt; }, onAddAccountsDone: () -&gt; Unit = {}, onAddAccountsSkip: () -&gt; Unit = {}, onCreateCategory: (CreateCategoryData) -&gt; Unit = {}, onEditCategory: (Category) -&gt; Unit = {}, onAddCategoryDone: () -&gt; Unit = {}, onAddCategorySkip: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:OnboardingSplashLogin.kt$( @DrawableRes icon: Int, text: String, textColor: Color, backgroundGradient: Gradient, hasShadow: Boolean, onClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:OnboardingViewModel.kt$OnboardingViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val accountDao: AccountDao, private val settingsDao: SettingsDao, private val accountLogic: WalletAccountLogic, private val categoryCreator: CategoryCreator, private val categoryDao: CategoryDao, private val accountCreator: AccountCreator, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val syncExchangeRatesAct: SyncExchangeRatesAct, // Only OnboardingRouter stuff sharedPrefs: SharedPrefs, transactionReminderLogic: TransactionReminderLogic, preloadDataLogic: PreloadDataLogic, exchangeRatesLogic: ExchangeRatesLogic, logoutLogic: LogoutLogic, )</ID>
    <ID>LongParameterList:PaywallLogic.kt$PaywallLogic$( private val ivyBilling: IvyBilling, private val ivyContext: IvyWalletCtx, private val navigation: Navigation, private val accountDao: AccountDao, private val categoryDao: CategoryDao, private val budgetDao: BudgetDao, private val loanDao: LoanDao )</ID>
    <ID>LongParameterList:PaywallScreen.kt$( plans: List&lt;Plan&gt;, purchasedSkus: List&lt;String&gt;, paywallReason: PaywallReason?, accounts: List&lt;Account&gt;, categories: List&lt;Category&gt;, budgets: List&lt;Budget&gt;, loans: List&lt;Loan&gt;, onPlanSelected: (Plan?) -&gt; Unit = {}, onBuy: (Plan) -&gt; Unit, )</ID>
    <ID>LongParameterList:PieChartAct.kt$PieChartAct$( showAccountTransfersCategory: Boolean, type: TransactionType, accountTransfersCategory: Category, accountIdFilterSet: Set&lt;UUID&gt;, @SideEffect transactions: suspend () -&gt; List&lt;Transaction&gt;, @SideEffect incomeExpenseTransfer: suspend () -&gt; IncomeExpenseTransferPair, @SideEffect categoryAmounts: suspend () -&gt; List&lt;CategoryAmount&gt; )</ID>
    <ID>LongParameterList:PieChartStatisticScreen.kt$( transactionType: TransactionType, period: TimePeriod, percentExpanded: Float, currency: String, amount: Double, showCloseButtonOnly: Boolean = false, onShowMonthModal: () -&gt; Unit, onSelectNextMonth: () -&gt; Unit, onSelectPreviousMonth: () -&gt; Unit, onClose: () -&gt; Unit, onAdd: (TransactionType) -&gt; Unit, )</ID>
    <ID>LongParameterList:PieChartStatisticViewModel.kt$PieChartStatisticViewModel$( period: TimePeriod, type: TransactionType, accountIdFilterList: List&lt;UUID&gt;, filterExclude: Boolean, transactions: List&lt;Transaction&gt;, treatTransfersAsIncomeExpense: Boolean )</ID>
    <ID>LongParameterList:PlannedPaymentsLazyColumn.kt$( Header: @Composable () -&gt; Unit, currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, listState: LazyListState = rememberLazyListState(), oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double, )</ID>
    <ID>LongParameterList:PlannedPaymentsLazyColumn.kt$( nav: Navigation, currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, listState: LazyListState, oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, oneTimeExpanded: Boolean, setOneTimeExpanded: (Boolean) -&gt; Unit, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double, recurringExpanded: Boolean, setRecurringExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:PlannedPaymentsScreen.kt$( currency: String, categories: List&lt;Category&gt;, accounts: List&lt;Account&gt;, oneTime: List&lt;PlannedPaymentRule&gt;, oneTimeIncome: Double, oneTimeExpenses: Double, recurring: List&lt;PlannedPaymentRule&gt;, recurringIncome: Double, recurringExpenses: Double )</ID>
    <ID>LongParameterList:RecurringRuleModal.kt$( startDate: LocalDateTime, intervalN: Int, intervalType: IntervalType, modalScrollState: ScrollState, onSetStartDate: (LocalDateTime) -&gt; Unit, onSetIntervalN: (Int) -&gt; Unit, onSetIntervalType: (IntervalType) -&gt; Unit )</ID>
    <ID>LongParameterList:ReportViewModel.kt$ReportViewModel$( private val plannedPaymentsLogic: PlannedPaymentsLogic, private val settingsDao: SettingsDao, private val transactionDao: TransactionDao, private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val exportCSVLogic: ExportCSVLogic, private val exchangeAct: ExchangeAct, private val accountsAct: AccountsAct, private val categoriesAct: CategoriesAct, private val trnsWithDateDivsAct: TrnsWithDateDivsAct, private val calcTrnsIncomeExpenseAct: CalcTrnsIncomeExpenseAct, private val baseCurrencyAct: BaseCurrencyAct )</ID>
    <ID>LongParameterList:RootViewModel.kt$RootViewModel$( private val ivyContext: IvyWalletCtx, private val nav: Navigation, private val settingsDao: SettingsDao, private val sharedPrefs: SharedPrefs, private val ivyBilling: IvyBilling, private val paywallLogic: PaywallLogic, private val transactionReminderLogic: TransactionReminderLogic, private val migrationsManager: MigrationsManager, )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( user: User?, currencyCode: String, opSync: OpResult&lt;Boolean&gt;?, lockApp: Boolean, showNotifications: Boolean = true, hideCurrentBalance: Boolean = false, progressState: Boolean = false, treatTransfersAsIncomeExpense: Boolean = false, nameLocalAccount: String?, startDateOfMonth: Int = 1, onSetCurrency: (String) -&gt; Unit, onSetName: (String) -&gt; Unit = {}, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onBackupData: () -&gt; Unit = {}, onExportToCSV: () -&gt; Unit = {}, onSetLockApp: (Boolean) -&gt; Unit = {}, onSetShowNotifications: (Boolean) -&gt; Unit = {}, onSetTreatTransfersAsIncExp: (Boolean) -&gt; Unit = {}, onSetHideCurrentBalance: (Boolean) -&gt; Unit = {}, onSetStartDateOfMonth: (Int) -&gt; Unit = {}, onDeleteAllUserData: () -&gt; Unit = {}, onDeleteCloudUserData: () -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( user: User?, opSync: OpResult&lt;Boolean&gt;?, nameLocalAccount: String?, onSync: () -&gt; Unit, onLogout: () -&gt; Unit, onLogin: () -&gt; Unit, onCardClick: () -&gt; Unit )</ID>
    <ID>LongParameterList:SettingsViewModel.kt$SettingsViewModel$( private val settingsDao: SettingsDao, private val userDao: UserDao, private val ivyContext: IvyWalletCtx, private val exportCSVLogic: ExportCSVLogic, private val logoutLogic: LogoutLogic, private val sharedPrefs: SharedPrefs, private val backupLogic: BackupLogic, private val startDayOfMonthAct: StartDayOfMonthAct, private val updateStartDayOfMonthAct: UpdateStartDayOfMonthAct, private val nav: Navigation, private val syncExchangeRatesAct: SyncExchangeRatesAct, )</ID>
    <ID>LongParameterList:Title.kt$( type: TransactionType, titleFocus: FocusRequester, initialTransactionId: UUID?, titleTextFieldValue: TextFieldValue, setTitleTextFieldValue: (TextFieldValue) -&gt; Unit, suggestions: Set&lt;String&gt;, scrollState: ScrollState? = null, onTitleChanged: (String?) -&gt; Unit, onNext: () -&gt; Unit, )</ID>
    <ID>LongParameterList:TransactionSectionDivider.kt$( expanded: Boolean, title: String, titleColor: Color, baseCurrency: String, income: Double, expenses: Double, showIncomeExpenseRow: Boolean = true, setExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:Transactions.kt$( baseData: AppBaseData, overdue: DueSection?, onPayOrGet: (Transaction) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit, setExpanded: (Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:Transactions.kt$( baseData: AppBaseData, upcoming: DueSection?, overdue: DueSection?, history: List&lt;TransactionHistoryItem&gt;, emptyStateTitle: String = stringRes(R.string.no_transactions), emptyStateText: String, dateDividerMarginTop: Dp? = null, lastItemSpacer: Dp? = null, onPayOrGet: (Transaction) -&gt; Unit, setUpcomingExpanded: (Boolean) -&gt; Unit, setOverdueExpanded: (Boolean) -&gt; Unit, onSkipTransaction: (Transaction) -&gt; Unit = {}, onSkipAllTransactions: (List&lt;Transaction&gt;) -&gt; Unit = {} )</ID>
    <ID>LoopWithTooManyJumpStatements:PieChart.kt$PieChartView$for</ID>
    <ID>MagicNumber:AmountFormatting.kt$0.009</ID>
    <ID>MagicNumber:AmountFormatting.kt$9</ID>
    <ID>MagicNumber:BackBottomBar.kt$180f</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.05</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.1</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.4</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.6</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.7</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.8</ID>
    <ID>MagicNumber:BackupLogic.kt$BackupLogic$0.9</ID>
    <ID>MagicNumber:BalanceScreen.kt$200f</ID>
    <ID>MagicNumber:BalanceScreen.kt$45f</ID>
    <ID>MagicNumber:BudgetBattery.kt$0.30</ID>
    <ID>MagicNumber:BudgetBattery.kt$0.50</ID>
    <ID>MagicNumber:BudgetBattery.kt$0.75</ID>
    <ID>MagicNumber:BufferBattery.kt$0.25</ID>
    <ID>MagicNumber:BufferBattery.kt$0.50</ID>
    <ID>MagicNumber:BufferBattery.kt$0.75</ID>
    <ID>MagicNumber:CSVImporter.kt$CSVImporter$0.5</ID>
    <ID>MagicNumber:CSVImporter.kt$CSVImporter$12</ID>
    <ID>MagicNumber:CSVImporterV2.kt$CSVImporterV2$0.5</ID>
    <ID>MagicNumber:CSVScreen.kt$10</ID>
    <ID>MagicNumber:CSVViewModel.kt$CSVViewModel$100</ID>
    <ID>MagicNumber:CSVViewModel.kt$CSVViewModel$3</ID>
    <ID>MagicNumber:ChartPeriod.kt$ChartPeriod$10</ID>
    <ID>MagicNumber:ChartPeriod.kt$ChartPeriod$7</ID>
    <ID>MagicNumber:ChartPeriod.kt$ChartPeriod$8</ID>
    <ID>MagicNumber:ChooseIconModal.kt$5</ID>
    <ID>MagicNumber:ChoosePeriodModal.kt$200</ID>
    <ID>MagicNumber:ChoosePeriodModal.kt$3</ID>
    <ID>MagicNumber:ChoosePeriodModal.kt$35</ID>
    <ID>MagicNumber:Colors.kt$0.1f</ID>
    <ID>MagicNumber:Colors.kt$0.4f</ID>
    <ID>MagicNumber:Colors.kt$0.5</ID>
    <ID>MagicNumber:Colors.kt$0.5f</ID>
    <ID>MagicNumber:Colors.kt$0.6f</ID>
    <ID>MagicNumber:Colors.kt$0.8f</ID>
    <ID>MagicNumber:Colors.kt$3</ID>
    <ID>MagicNumber:CurrencyPicker.kt$20</ID>
    <ID>MagicNumber:CustomExchangeRateCard.kt$4</ID>
    <ID>MagicNumber:DateExt.kt$10</ID>
    <ID>MagicNumber:DateExt.kt$23</ID>
    <ID>MagicNumber:DateExt.kt$30</ID>
    <ID>MagicNumber:DateExt.kt$59</ID>
    <ID>MagicNumber:DueDate.kt$5</ID>
    <ID>MagicNumber:EditBottomSheet.kt$0.01f</ID>
    <ID>MagicNumber:EditBottomSheet.kt$16</ID>
    <ID>MagicNumber:EditBottomSheet.kt$18</ID>
    <ID>MagicNumber:EditBottomSheet.kt$20</ID>
    <ID>MagicNumber:EditBottomSheet.kt$20f</ID>
    <ID>MagicNumber:EditBottomSheet.kt$30</ID>
    <ID>MagicNumber:EditBottomSheet.kt$4</ID>
    <ID>MagicNumber:EditBottomSheet.kt$40</ID>
    <ID>MagicNumber:EditBottomSheet.kt$8</ID>
    <ID>MagicNumber:EditBottomSheet.kt$8f</ID>
    <ID>MagicNumber:EditTransactionScreen.kt$0.3f</ID>
    <ID>MagicNumber:EditTransactionScreen.kt$12</ID>
    <ID>MagicNumber:ExchangeRatesScreen.kt$1.23</ID>
    <ID>MagicNumber:ExchangeRatesScreen.kt$1.85</ID>
    <ID>MagicNumber:ExchangeRatesScreen.kt$1.96</ID>
    <ID>MagicNumber:FilterOverlay.kt$0.01f</ID>
    <ID>MagicNumber:FilterOverlay.kt$100f</ID>
    <ID>MagicNumber:FilterOverlay.kt$200f</ID>
    <ID>MagicNumber:FromToTimeRange.kt$FromToTimeRange$30</ID>
    <ID>MagicNumber:GitHubAutoBackupManager.kt$GitHubAutoBackupManager$30</ID>
    <ID>MagicNumber:GitHubAutoBackupManager.kt$GitHubAutoBackupManager$6</ID>
    <ID>MagicNumber:GitHubAutoBackupManager.kt$GitHubAutoBackupManager$60</ID>
    <ID>MagicNumber:GitHubBackupViewModel.kt$GitHubBackupViewModel$2_000L</ID>
    <ID>MagicNumber:GitHubClient.kt$GitHubClient$403</ID>
    <ID>MagicNumber:GitHubClient.kt$GitHubClient$404</ID>
    <ID>MagicNumber:HomeHeader.kt$0.5f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$0.01f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$1.5f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$500f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$510f</ID>
    <ID>MagicNumber:HomeMoreMenu.kt$520f</ID>
    <ID>MagicNumber:HomeTab.kt$&lt;no name provided&gt;$150</ID>
    <ID>MagicNumber:HomeViewModel.kt$HomeViewModel$5000</ID>
    <ID>MagicNumber:ImportProcessing.kt$100</ID>
    <ID>MagicNumber:ImportResultUI.kt$100</ID>
    <ID>MagicNumber:ImportViewModel.kt$ImportViewModel$100</ID>
    <ID>MagicNumber:InputField.kt$100</ID>
    <ID>MagicNumber:IntervalPickerRow.kt$180f</ID>
    <ID>MagicNumber:ItemStatisticScreen.kt$0.7f</ID>
    <ID>MagicNumber:ItemStatisticScreen.kt$10L</ID>
    <ID>MagicNumber:IvyBilling.kt$IvyBilling.&lt;no name provided&gt;$666</ID>
    <ID>MagicNumber:IvyColors.kt$0.1f</ID>
    <ID>MagicNumber:IvyColors.kt$0.4f</ID>
    <ID>MagicNumber:IvyColors.kt$0.5</ID>
    <ID>MagicNumber:IvyColors.kt$0.5f</ID>
    <ID>MagicNumber:IvyColors.kt$0.6f</ID>
    <ID>MagicNumber:IvyColors.kt$0.8f</ID>
    <ID>MagicNumber:IvyColors.kt$3</ID>
    <ID>MagicNumber:IvyLineChart.kt$3</ID>
    <ID>MagicNumber:IvyModal.kt$0.01f</ID>
    <ID>MagicNumber:IvyModal.kt$1000f</ID>
    <ID>MagicNumber:IvyModal.kt$1100f</ID>
    <ID>MagicNumber:LoanDetailsScreen.kt$100</ID>
    <ID>MagicNumber:LoanTransactionsCore.kt$LoanTransactionsCore$12</ID>
    <ID>MagicNumber:LoanViewModel.kt$LoanViewModel$100</ID>
    <ID>MagicNumber:MainBottomBar.kt$0.01f</ID>
    <ID>MagicNumber:MainBottomBar.kt$100f</ID>
    <ID>MagicNumber:MainBottomBar.kt$199f</ID>
    <ID>MagicNumber:MainBottomBar.kt$200f</ID>
    <ID>MagicNumber:MainBottomBar.kt$3</ID>
    <ID>MagicNumber:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$105</ID>
    <ID>MagicNumber:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$106</ID>
    <ID>MagicNumber:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$106</ID>
    <ID>MagicNumber:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$107</ID>
    <ID>MagicNumber:Migration107to108_Sync.kt$Migration107to108_Sync$107</ID>
    <ID>MagicNumber:Migration107to108_Sync.kt$Migration107to108_Sync$108</ID>
    <ID>MagicNumber:Migration108to109_Users.kt$Migration108to109_Users$108</ID>
    <ID>MagicNumber:Migration108to109_Users.kt$Migration108to109_Users$109</ID>
    <ID>MagicNumber:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$109</ID>
    <ID>MagicNumber:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$110</ID>
    <ID>MagicNumber:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$110</ID>
    <ID>MagicNumber:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$111</ID>
    <ID>MagicNumber:Migration111to112_User_testUser.kt$Migration111to112_User_testUser$111</ID>
    <ID>MagicNumber:Migration111to112_User_testUser.kt$Migration111to112_User_testUser$112</ID>
    <ID>MagicNumber:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$112</ID>
    <ID>MagicNumber:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$113</ID>
    <ID>MagicNumber:Migration113to114_Multi_Currency.kt$Migration113to114_Multi_Currency$113</ID>
    <ID>MagicNumber:Migration113to114_Multi_Currency.kt$Migration113to114_Multi_Currency$114</ID>
    <ID>MagicNumber:Migration114to115_Category_Account_Icons.kt$Migration114to115_Category_Account_Icons$114</ID>
    <ID>MagicNumber:Migration114to115_Category_Account_Icons.kt$Migration114to115_Category_Account_Icons$115</ID>
    <ID>MagicNumber:Migration115to116_Account_Include_In_Balance.kt$Migration115to116_Account_Include_In_Balance$115</ID>
    <ID>MagicNumber:Migration115to116_Account_Include_In_Balance.kt$Migration115to116_Account_Include_In_Balance$116</ID>
    <ID>MagicNumber:Migration116to117_SalteEdgeIntgration.kt$Migration116to117_SalteEdgeIntgration$116</ID>
    <ID>MagicNumber:Migration116to117_SalteEdgeIntgration.kt$Migration116to117_SalteEdgeIntgration$117</ID>
    <ID>MagicNumber:Migration117to118_Budgets.kt$Migration117to118_Budgets$117</ID>
    <ID>MagicNumber:Migration117to118_Budgets.kt$Migration117to118_Budgets$118</ID>
    <ID>MagicNumber:Migration118to119_Loans.kt$Migration118to119_Loans$118</ID>
    <ID>MagicNumber:Migration118to119_Loans.kt$Migration118to119_Loans$119</ID>
    <ID>MagicNumber:Migration119to120_LoanTransactions.kt$Migration119to120_LoanTransactions$119</ID>
    <ID>MagicNumber:Migration119to120_LoanTransactions.kt$Migration119to120_LoanTransactions$120</ID>
    <ID>MagicNumber:Migration120to121_DropWishlistItem.kt$Migration120to121_DropWishlistItem$120</ID>
    <ID>MagicNumber:Migration120to121_DropWishlistItem.kt$Migration120to121_DropWishlistItem$121</ID>
    <ID>MagicNumber:Migration122to123_ExchangeRates.kt$Migration122to123_ExchangeRates$122</ID>
    <ID>MagicNumber:Migration122to123_ExchangeRates.kt$Migration122to123_ExchangeRates$123</ID>
    <ID>MagicNumber:MigrationsManager.kt$MigrationsManager$2_000L</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$10</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$11</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$12</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$3</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$4</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$5</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$6</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$7</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$8</ID>
    <ID>MagicNumber:Month.kt$Month.Companion$9</ID>
    <ID>MagicNumber:NotificationService.kt$NotificationService$1000</ID>
    <ID>MagicNumber:NotificationService.kt$NotificationService$200</ID>
    <ID>MagicNumber:OnboardingAccounts.kt$0xFF4DCAFF</ID>
    <ID>MagicNumber:OnboardingCategories.kt$0xFF1e5166</ID>
    <ID>MagicNumber:OnboardingCategories.kt$0xFF4dfff3</ID>
    <ID>MagicNumber:OnboardingCategories.kt$0xFF75ff4d</ID>
    <ID>MagicNumber:OnboardingCategories.kt$12</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$0.01f</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$0.5f</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$0.99f</ID>
    <ID>MagicNumber:OnboardingPrivacyTC.kt$10</ID>
    <ID>MagicNumber:OnboardingRouter.kt$OnboardingRouter$1000</ID>
    <ID>MagicNumber:OnboardingSplashLogin.kt$0.01f</ID>
    <ID>MagicNumber:OnboardingSplashLogin.kt$3f</ID>
    <ID>MagicNumber:ParseFields.kt$0.0001</ID>
    <ID>MagicNumber:ParseFields.kt$0.001</ID>
    <ID>MagicNumber:ParseFields.kt$0.01</ID>
    <ID>MagicNumber:ParseFields.kt$0.1</ID>
    <ID>MagicNumber:ParseFields.kt$10</ID>
    <ID>MagicNumber:ParseFields.kt$10.0</ID>
    <ID>MagicNumber:ParseFields.kt$100</ID>
    <ID>MagicNumber:ParseFields.kt$100.0</ID>
    <ID>MagicNumber:ParseFields.kt$10_000</ID>
    <ID>MagicNumber:ParseFields.kt$10_000.0</ID>
    <ID>MagicNumber:ParseFields.kt$1_000</ID>
    <ID>MagicNumber:ParseFields.kt$1_000.0</ID>
    <ID>MagicNumber:ParseFields.kt$1_0000</ID>
    <ID>MagicNumber:PeriodSelector.kt$180f</ID>
    <ID>MagicNumber:PieChart.kt$PieChartView$360</ID>
    <ID>MagicNumber:PieChart.kt$PieChartView$90.0</ID>
    <ID>MagicNumber:PieChartStatisticScreen.kt$100</ID>
    <ID>MagicNumber:PieChartStatisticScreen.kt$40</ID>
    <ID>MagicNumber:Plan.kt$Plan$3</ID>
    <ID>MagicNumber:Plan.kt$Plan$4</ID>
    <ID>MagicNumber:PlannedPaymentCard.kt$5</ID>
    <ID>MagicNumber:PlannedPaymentsGenerator.kt$PlannedPaymentsGenerator$3</ID>
    <ID>MagicNumber:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$12</ID>
    <ID>MagicNumber:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$7</ID>
    <ID>MagicNumber:PlannedPaymentsScreen.kt$5</ID>
    <ID>MagicNumber:PlansSheet.kt$0.01f</ID>
    <ID>MagicNumber:PlansSheet.kt$100</ID>
    <ID>MagicNumber:PlansSheet.kt$100f</ID>
    <ID>MagicNumber:PlansSheet.kt$12</ID>
    <ID>MagicNumber:PlansSheet.kt$200f</ID>
    <ID>MagicNumber:RecurringRule.kt$5</ID>
    <ID>MagicNumber:RecurringRuleModal.kt$12</ID>
    <ID>MagicNumber:RecurringRuleModal.kt$200</ID>
    <ID>MagicNumber:ReportScreen.kt$1000f</ID>
    <ID>MagicNumber:RootActivity.kt$RootActivity$100</ID>
    <ID>MagicNumber:RootActivity.kt$RootActivity$12</ID>
    <ID>MagicNumber:RootViewModel.kt$RootViewModel$1000</ID>
    <ID>MagicNumber:SortOrder.kt$SortOrder.ALPHABETICAL$3</ID>
    <ID>MagicNumber:TransactionCard.kt$5</ID>
    <ID>MagicNumber:TransactionReminderLogic.kt$TransactionReminderLogic$20</ID>
    <ID>MagicNumber:TransactionReminderLogic.kt$TransactionReminderLogic$24</ID>
    <ID>MagicNumber:TransactionReminderLogic.kt$TransactionReminderLogic$5</ID>
    <ID>MagicNumber:TransactionViewModel.kt$TransactionViewModel$12</ID>
    <ID>MagicNumber:Transactions.kt$5</ID>
    <ID>MagicNumber:UpdateStartDayOfMonthAct.kt$UpdateStartDayOfMonthAct$31</ID>
    <ID>MagicNumber:WalletAccountLogic.kt$WalletAccountLogic$0.009</ID>
    <ID>MatchingDeclarationName:AccountModal.kt$AccountModalData</ID>
    <ID>MatchingDeclarationName:BudgetModal.kt$BudgetModalData</ID>
    <ID>MatchingDeclarationName:BufferModal.kt$BufferModalData</ID>
    <ID>MatchingDeclarationName:CategoryModal.kt$CategoryModalData</ID>
    <ID>MatchingDeclarationName:ChartsCore.kt$ChartPoint&lt;V&gt;</ID>
    <ID>MatchingDeclarationName:Exchange.kt$ExchangeData</ID>
    <ID>MatchingDeclarationName:IvyToolbar.kt$BackButtonType</ID>
    <ID>MatchingDeclarationName:LoanModal.kt$LoanModalData</ID>
    <ID>MatchingDeclarationName:LoanRecordModal.kt$LoanRecordModalData</ID>
    <ID>MatchingDeclarationName:RecurringRuleModal.kt$RecurringRuleModalData</ID>
    <ID>MatchingDeclarationName:WalletCharts.kt$ToRange</ID>
    <ID>MaxLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$fun</ID>
    <ID>MaxLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$val</ID>
    <ID>MaxLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$fun</ID>
    <ID>MaxLineLength:Accessors4ymijgaek646mzru18sdmblu7.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("detekt") as io.gitlab.arturbosch.detekt.extensions.DetektExtension</ID>
    <ID>MaxLineLength:Accessors6m89nhcqblthog8es93pjkmhg.kt$val</ID>
    <ID>MaxLineLength:Accessors72k7tti784t7idmqtg2upvaru.kt$val</ID>
    <ID>MaxLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$fun</ID>
    <ID>MaxLineLength:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("reporting") as org.gradle.api.reporting.ReportingExtension</ID>
    <ID>MaxLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$fun</ID>
    <ID>MaxLineLength:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$description = "It looks like that you're enjoying Ivy Wallet! Feel free join our invite-only Ivy Telegram Community and make our app better :)"</ID>
    <ID>MaxLineLength:DetektConfigurationAccessors.kt$fun</ID>
    <ID>MaxLineLength:DetektPluginsConfigurationAccessors.kt$fun</ID>
    <ID>MaxLineLength:DonateModal.kt$"1) You have custom donation options.\n2) If you choose a 'tier', you'll receive a small digital reward from us "</ID>
    <ID>MaxLineLength:DonateScreen.kt$text = "BIG THANKS to all Ivy contributors who made Ivy Wallet possible! That's why we opened a donations channel to sustain and improve our small project."</ID>
    <ID>MaxLineLength:DonateScreen.kt$text = "If you want to support us feel free to donate whatever amount you're comfortable with - it all helps! (local taxes may apply)".uppercase()</ID>
    <ID>MaxLineLength:EditTransactionViewModel.kt$EditTransactionViewModel$"You are trying to change the account associated with the loan record to an account of different currency"</ID>
    <ID>MaxLineLength:EditTransactionViewModel.kt$EditTransactionViewModel$?:</ID>
    <ID>MaxLineLength:FortuneCitySteps.kt$articleUrl = "https://fourdesire.helpshift.com/hc/en/5-fortune-city/faq/242-can-i-export-my-fortune-city-records/"</ID>
    <ID>MaxLineLength:GitHubBackupScreen.kt$"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token"</ID>
    <ID>MaxLineLength:ItemStatisticViewModel.kt$ItemStatisticViewModel$// unspecifiedCategory==false is explicitly checked to accommodate for a temp AccountTransfers Category during Reports Screen</ID>
    <ID>MaxLineLength:IvyBilling.kt$IvyBilling$"Acknowledge purchase result, code=${acknowledgeResult.responseCode}: ${acknowledgeResult.debugMessage}"</ID>
    <ID>MaxLineLength:IvyChecklistTextField.kt$"Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light."</ID>
    <ID>MaxLineLength:IvyDescriptionTextField.kt$"Cur habitio favere? Sunt navises promissio grandis, primus accolaes. Yes, there is chaos, it contacts with light."</ID>
    <ID>MaxLineLength:LoanModal.kt$// enabled = nameTextFieldValue.text.isNotNullOrBlank() &amp;&amp; amount &gt; 0 &amp;&amp; ((createLoanTrans &amp;&amp; selectedAcc != null) || !createLoanTrans)</ID>
    <ID>MaxLineLength:MainBottomBar.kt$y = buttonCenterY.roundToInt() - 48.dp.roundToPx() - placealbe.height - FAB_BUTTON_SIZE.roundToPx()</ID>
    <ID>MaxLineLength:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$"CREATE TABLE IF NOT EXISTS `transaction_recurring_rules` (`startDate` INTEGER NOT NULL, `intervalSeconds` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$"CREATE TABLE IF NOT EXISTS `wishlist_items` (`name` TEXT NOT NULL, `price` REAL NOT NULL, `accountId` TEXT NOT NULL, `categoryId` TEXT, `description` TEXT, `plannedDateTime` INTEGER, `orderNum` REAL NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration108to109_Users.kt$Migration108to109_Users$"CREATE TABLE IF NOT EXISTS `users` (`email` TEXT NOT NULL, `authProviderType` TEXT NOT NULL, `firstName` TEXT NOT NULL, `lastName` TEXT, `profilePicture` TEXT, `color` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$"CREATE TABLE IF NOT EXISTS `transaction_recurring_rules` (`startDate` INTEGER, `intervalN` INTEGER, `intervalType` TEXT, `oneTime` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$"CREATE TABLE IF NOT EXISTS `planned_payment_rules` (`startDate` INTEGER, `intervalN` INTEGER, `intervalType` TEXT, `oneTime` INTEGER NOT NULL, `type` TEXT NOT NULL, `accountId` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryId` TEXT, `title` TEXT, `description` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$"CREATE TABLE IF NOT EXISTS `exchange_rates` (`baseCurrency` TEXT NOT NULL, `currency` TEXT NOT NULL, `rate` REAL NOT NULL, PRIMARY KEY(`baseCurrency`, `currency`))"</ID>
    <ID>MaxLineLength:Migration117to118_Budgets.kt$Migration117to118_Budgets$"CREATE TABLE IF NOT EXISTS `$tableName` (`name` TEXT NOT NULL, `amount` REAL NOT NULL, `categoryIdsSerialized` TEXT, `accountIdsSerialized` TEXT, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `orderId` REAL NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration118to119_Loans.kt$Migration118to119_Loans$"CREATE TABLE IF NOT EXISTS `$LOANS_TABLE` (`name` TEXT NOT NULL, `amount` REAL NOT NULL, `type` TEXT NOT NULL, `color` INTEGER NOT NULL, `icon` TEXT, `orderNum` REAL NOT NULL, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:Migration118to119_Loans.kt$Migration118to119_Loans$"CREATE TABLE IF NOT EXISTS `$LOAN_RECORDS_TABLE` (`loanId` TEXT NOT NULL, `amount` REAL NOT NULL, `note` TEXT, `dateTime` INTEGER NOT NULL, `isSynced` INTEGER NOT NULL, `isDeleted` INTEGER NOT NULL, `id` TEXT NOT NULL, PRIMARY KEY(`id`))"</ID>
    <ID>MaxLineLength:OnboardingAccounts.kt$text = if (itemsCount == 0) "Up to $freeItemsCount free $itemLabelPlural" else "$freeItemsLeft $itemLabelPlural left"</ID>
    <ID>MaxLineLength:PieChartAct.kt$PieChartAct$if</ID>
    <ID>MaxLineLength:PlannedPaymentRuleDao.kt$PlannedPaymentRuleDao$"SELECT * FROM planned_payment_rules WHERE isDeleted = 0 AND oneTime = :oneTime ORDER BY amount DESC, startDate ASC"</ID>
    <ID>MaxLineLength:PlansSheet.kt$}</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.asset-pack-bundle` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackBundlePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.asset-pack` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.dynamic-feature` plugin implemented by [com.android.build.gradle.internal.plugins.DynamicFeaturePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.fused-library` plugin implemented by [com.android.build.gradle.internal.plugins.FusedLibraryPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.internal.plugins.KotlinMultiplatformAndroidPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.privacy-sandbox-sdk` plugin implemented by [com.android.build.gradle.internal.plugins.PrivacySandboxSdkPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.reporting` plugin implemented by [com.android.build.gradle.internal.plugins.ReportingPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.internal.version-check` plugin implemented by [com.android.build.gradle.internal.plugins.VersionCheckPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.android.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.api.KotlinMultiplatformAndroidPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `com.google.firebase.crashlytics` plugin implemented by [com.google.firebase.crashlytics.buildtools.gradle.CrashlyticsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `io.github.detekt.gradle.compiler-plugin` plugin implemented by [io.github.detekt.gradle.DetektKotlinCompilerPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-android-extensions` plugin implemented by [org.jetbrains.kotlin.gradle.internal.AndroidExtensionsSubpluginIndicator].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-native-cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-native-performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `kotlin-scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.clang-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.ClangCompilerPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.component-model-base` plugin implemented by [org.gradle.language.base.plugins.ComponentModelBasePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.google-test-test-suite` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.google-test` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestConventionPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.groovy-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.internal.precompiled.PrecompiledGroovyPluginsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.jacoco-report-aggregation` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoReportAggregationPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.java-library-distribution` plugin implemented by [org.gradle.api.plugins.JavaLibraryDistributionPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.jvm-toolchain-management` plugin implemented by [org.gradle.api.plugins.JvmToolchainManagementPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.microsoft-visual-cpp-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.MicrosoftVisualCppCompilerPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.native-component-model` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentModelPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.objective-c-lang` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCLangPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.objective-cpp-lang` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppLangPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.standard-tool-chains` plugin implemented by [org.gradle.nativeplatform.toolchain.internal.plugins.StandardToolChainsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.gradle.windows-resource-script` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourceScriptPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.native.cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.native.performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformAndroidPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.common` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformCommonPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJsPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.platform.jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.plugin.parcelize` plugin implemented by [org.jetbrains.kotlin.gradle.internal.ParcelizeSubplugin].</ID>
    <ID>MaxLineLength:PluginSpecBuilders.kt$* The `org.jetbrains.kotlin.plugin.scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin].</ID>
    <ID>MaxLineLength:PrimaryAttributeColumn.kt$"See https://docs.gradle.org/7.0-rc-1/userguide/command_line_interface.html#sec:command_line_warnings"</ID>
    <ID>MaxLineLength:ReportViewModel.kt$ReportViewModel$if (stateVal().treatTransfersAsIncExp) historyIncomeExpense.value.transferExpense.toDouble() else 0.0</ID>
    <ID>MaxLineLength:ReportViewModel.kt$ReportViewModel$return incomeExpenseTransferPair.income + incomeExpenseTransferPair.transferIncome - incomeExpenseTransferPair.expense - incomeExpenseTransferPair.transferExpense</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId = :categoryId) AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId = :categoryId) AND type = :type AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId IS NULL) AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND (categoryId IS NULL) AND type = :type AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND accountId = :accountId AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate AND recurringRuleId = :recurringRuleId ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate AND type = :type ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND (categoryId = :categoryId) ORDER BY dateTime DESC, dueDate ASC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND (categoryId IS NULL) ORDER BY dateTime DESC, dueDate ASC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate AND accountId = :accountId ORDER BY dateTime DESC, dueDate ASC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND dueDate &gt;= :startDate AND dueDate &lt;= :endDate ORDER BY dueDate ASC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND toAccountId = :toAccountId AND dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and accountId = :accountId ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and accountId = :accountId and dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and toAccountId = :toAccountId ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"SELECT * FROM transactions WHERE isDeleted = 0 AND type = :type and toAccountId = :toAccountId and dateTime &gt;= :startDate AND dateTime &lt;= :endDate ORDER BY dateTime DESC"</ID>
    <ID>MaxLineLength:TransactionDao.kt$TransactionDao$"UPDATE transactions SET isDeleted = 1, isSynced = 0 WHERE recurringRuleId = :recurringRuleId AND dateTime IS NULL"</ID>
    <ID>MaxLineLength:TransactionReminderWorker.kt$TransactionReminderWorker$// Double check is needed because the user can switch off notifications in settings after it has been scheduled to show notifications for the next day</ID>
    <ID>MaxLineLength:UIExt.kt$if (pIsDark) lFlags and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv() else lFlags or View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR</ID>
    <ID>MaxLineLength:ViewPager.kt$"onDragStopped(): velocity = $velocity, finalVelocity = $finalVelocity, currentPageOffset = ${state.currentPageOffset}"</ID>
    <ID>MaxLineLength:WalletByBudgetBakersSteps.kt$articleUrl = "https://support.budgetbakers.com/hc/en-us/articles/209753325-How-to-EXPORT-transactions-from-Wallet"</ID>
    <ID>MaximumLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$ </ID>
    <ID>MaximumLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$fun</ID>
    <ID>MaximumLineLength:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$val</ID>
    <ID>MaximumLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$ </ID>
    <ID>MaximumLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$fun</ID>
    <ID>MaximumLineLength:Accessors4ymijgaek646mzru18sdmblu7.kt$ </ID>
    <ID>MaximumLineLength:Accessors6m89nhcqblthog8es93pjkmhg.kt$val</ID>
    <ID>MaximumLineLength:Accessors72k7tti784t7idmqtg2upvaru.kt$val</ID>
    <ID>MaximumLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$ </ID>
    <ID>MaximumLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$fun</ID>
    <ID>MaximumLineLength:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$ </ID>
    <ID>MaximumLineLength:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$ </ID>
    <ID>MaximumLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$ </ID>
    <ID>MaximumLineLength:Accessorseessl0al0otcsbyqqruvoncpd.kt$fun</ID>
    <ID>MaximumLineLength:CustomerJourneyLogic.kt$CustomerJourneyLogic.Companion$ </ID>
    <ID>MaximumLineLength:DetektConfigurationAccessors.kt$fun</ID>
    <ID>MaximumLineLength:DetektPluginsConfigurationAccessors.kt$fun</ID>
    <ID>MaximumLineLength:DonateModal.kt$ </ID>
    <ID>MaximumLineLength:DonateScreen.kt$ </ID>
    <ID>MaximumLineLength:EditTransactionViewModel.kt$EditTransactionViewModel$ </ID>
    <ID>MaximumLineLength:FortuneCitySteps.kt$ </ID>
    <ID>MaximumLineLength:GitHubBackupScreen.kt$ </ID>
    <ID>MaximumLineLength:IvyBilling.kt$IvyBilling$ </ID>
    <ID>MaximumLineLength:IvyChecklistTextField.kt$ </ID>
    <ID>MaximumLineLength:IvyDescriptionTextField.kt$ </ID>
    <ID>MaximumLineLength:MainBottomBar.kt$ </ID>
    <ID>MaximumLineLength:Migration105to106_TrnRecurringRules.kt$Migration105to106_TrnRecurringRules$ </ID>
    <ID>MaximumLineLength:Migration106to107_Wishlist.kt$Migration106to107_Wishlist$ </ID>
    <ID>MaximumLineLength:Migration108to109_Users.kt$Migration108to109_Users$ </ID>
    <ID>MaximumLineLength:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$ </ID>
    <ID>MaximumLineLength:Migration110to111_PlannedPaymentRule.kt$Migration110to111_PlannedPaymentRule$ </ID>
    <ID>MaximumLineLength:Migration112to113_ExchangeRates.kt$Migration112to113_ExchangeRates$ </ID>
    <ID>MaximumLineLength:Migration117to118_Budgets.kt$Migration117to118_Budgets$ </ID>
    <ID>MaximumLineLength:Migration118to119_Loans.kt$Migration118to119_Loans$ </ID>
    <ID>MaximumLineLength:OnboardingAccounts.kt$ </ID>
    <ID>MaximumLineLength:PieChartAct.kt$PieChartAct$ </ID>
    <ID>MaximumLineLength:PlannedPaymentRuleDao.kt$PlannedPaymentRuleDao$ </ID>
    <ID>MaximumLineLength:PlansSheet.kt$ </ID>
    <ID>MaximumLineLength:PrimaryAttributeColumn.kt$ </ID>
    <ID>MaximumLineLength:ReportViewModel.kt$ReportViewModel$ </ID>
    <ID>MaximumLineLength:TransactionDao.kt$TransactionDao$ </ID>
    <ID>MaximumLineLength:UIExt.kt$ </ID>
    <ID>MaximumLineLength:ViewPager.kt$ </ID>
    <ID>MaximumLineLength:WalletByBudgetBakersSteps.kt$ </ID>
    <ID>ModifierListSpacing:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors4ymijgaek646mzru18sdmblu7.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors6m89nhcqblthog8es93pjkmhg.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors72k7tti784t7idmqtg2upvaru.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors7hvycqvau4uyj5knata7lx0yx.kt$internal</ID>
    <ID>ModifierListSpacing:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorsa5ptgikd9fb816fav4742zvaq.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$internal</ID>
    <ID>ModifierListSpacing:Accessorseessl0al0otcsbyqqruvoncpd.kt$internal</ID>
    <ID>ModifierListSpacing:DetektConfigurationAccessors.kt$internal</ID>
    <ID>ModifierListSpacing:DetektPluginsConfigurationAccessors.kt$internal</ID>
    <ID>ModifierListSpacing:Ivy_lintPlugin.kt$Ivy_lintPlugin$public</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidInternalKotlinMultiplatformPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidInternalKotlinPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidInternalPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidKotlinMultiplatformPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidKotlinPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComAndroidPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleDaggerHiltPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleDaggerPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleFirebasePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGoogleGmsPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComGooglePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$ComPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$DaggerHiltAndroidPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$DaggerHiltPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$DaggerPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGithubDetektGradlePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGithubDetektPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGithubPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGitlabArturboschPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoGitlabPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$IoPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgGradlePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinNativePluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinPlatformPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsKotlinPluginPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgJetbrainsPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$OrgPluginGroup$@org.gradle.api.Generated internal</ID>
    <ID>ModifierListSpacing:PluginSpecBuilders.kt$internal</ID>
    <ID>ModifierMissing:AccountModal.kt$AccountModal</ID>
    <ID>ModifierMissing:AddKeywordModal.kt$AddKeywordModal</ID>
    <ID>ModifierMissing:AddPrimaryAttributeButton.kt$AddPrimaryAttributeButton</ID>
    <ID>ModifierMissing:AddRateModal.kt$AddRateModal</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyB1</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyB1Row</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyB2Row</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyCaption</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyH1</ID>
    <ID>ModifierMissing:AmountCurrency.kt$AmountCurrencyH2Row</ID>
    <ID>ModifierMissing:AmountModal.kt$AmountCurrency</ID>
    <ID>ModifierMissing:AmountModal.kt$AmountKeyboard</ID>
    <ID>ModifierMissing:AmountModal.kt$AmountModal</ID>
    <ID>ModifierMissing:AmountModal.kt$KeypadCircleButton</ID>
    <ID>ModifierMissing:AppLockedScreen.kt$AppLockedScreen</ID>
    <ID>ModifierMissing:BackBottomBar.kt$BackBottomBar</ID>
    <ID>ModifierMissing:BudgetModal.kt$BudgetModal</ID>
    <ID>ModifierMissing:BudgetModal.kt$ModalNameInput</ID>
    <ID>ModifierMissing:BufferModal.kt$BufferModal</ID>
    <ID>ModifierMissing:CSVScreen.kt$LabelContainsField</ID>
    <ID>ModifierMissing:CSVScreen.kt$Spacer8</ID>
    <ID>ModifierMissing:CalculatorModal.kt$CalculatorModal</ID>
    <ID>ModifierMissing:CategoriesScreen.kt$SortModal</ID>
    <ID>ModifierMissing:Category.kt$Category</ID>
    <ID>ModifierMissing:CategoryModal.kt$CategoryModal</ID>
    <ID>ModifierMissing:CategoryModal.kt$IconNameRow</ID>
    <ID>ModifierMissing:ChangeTransactionTypeModal.kt$ChangeTransactionTypeModal</ID>
    <ID>ModifierMissing:ChooseCategoryModal.kt$ChooseCategoryModal</ID>
    <ID>ModifierMissing:ChooseIconModal.kt$ChooseIconModal</ID>
    <ID>ModifierMissing:ChoosePeriodModal.kt$ChoosePeriodModal</ID>
    <ID>ModifierMissing:ChooseStartDateOfMonthModal.kt$ChooseStartDateOfMonthModal</ID>
    <ID>ModifierMissing:CurrencyModal.kt$CurrencyModal</ID>
    <ID>ModifierMissing:CustomerJourney.kt$CustomerJourney</ID>
    <ID>ModifierMissing:CustomerJourney.kt$CustomerJourneyCard</ID>
    <ID>ModifierMissing:DefaultImportSteps.kt$DefaultImportSteps</ID>
    <ID>ModifierMissing:DeleteModal.kt$DeleteModal</ID>
    <ID>ModifierMissing:DescriptionModal.kt$DescriptionModal</ID>
    <ID>ModifierMissing:Dividers.kt$DividerH</ID>
    <ID>ModifierMissing:Dividers.kt$DividerV</ID>
    <ID>ModifierMissing:Dividers.kt$DividerW</ID>
    <ID>ModifierMissing:DonateModal.kt$DonateModal</ID>
    <ID>ModifierMissing:EditBottomSheet.kt$EditBottomSheet</ID>
    <ID>ModifierMissing:FilterOverlay.kt$FilterOverlay</ID>
    <ID>ModifierMissing:FilterOverlay.kt$ListItem</ID>
    <ID>ModifierMissing:FinancistoSteps.kt$FinancistoSteps</ID>
    <ID>ModifierMissing:GitHubBackupScreen.kt$GitHubBackupScreen</ID>
    <ID>ModifierMissing:GitHubBackupStatus.kt$GitHubBackupStatus</ID>
    <ID>ModifierMissing:GradientCut.kt$GradientCutBottom</ID>
    <ID>ModifierMissing:HistoryDateDivider.kt$HistoryDateDivider</ID>
    <ID>ModifierMissing:HomeHeader.kt$CashFlowInfo</ID>
    <ID>ModifierMissing:HomeMoreMenu.kt$MoreMenu</ID>
    <ID>ModifierMissing:HomeTab.kt$HomeLazyColumn</ID>
    <ID>ModifierMissing:ImportFrom.kt$ImportFrom</ID>
    <ID>ModifierMissing:ImportInstructions.kt$ImportInstructions</ID>
    <ID>ModifierMissing:ImportInstructions.kt$StepTitle</ID>
    <ID>ModifierMissing:ImportInstructions.kt$UploadFileStep</ID>
    <ID>ModifierMissing:ImportInstructions.kt$VideoArticleRow</ID>
    <ID>ModifierMissing:ImportProcessing.kt$ImportProcessing</ID>
    <ID>ModifierMissing:ImportResultUI.kt$ImportResultUI</ID>
    <ID>ModifierMissing:IntervalPickerRow.kt$IntervalPickerRow</ID>
    <ID>ModifierMissing:ItemStatisticScreen.kt$IncomeExpensesCards</ID>
    <ID>ModifierMissing:ItemStatisticScreen.kt$ItemStatisticToolbar</ID>
    <ID>ModifierMissing:IvyColorPicker.kt$IvyColorPicker</ID>
    <ID>ModifierMissing:IvyComposeApp.kt$IvyWalletComponentPreview</ID>
    <ID>ModifierMissing:IvyDividerDot.kt$IvyDividerDot</ID>
    <ID>ModifierMissing:IvyModal.kt$IvyModal</ID>
    <ID>ModifierMissing:IvyModal.kt$ModalActionsRow</ID>
    <ID>ModifierMissing:IvyModal.kt$ModalPreviewActionRowSpacer</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalAdd</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalDelete</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalDynamicPrimaryAction</ID>
    <ID>ModifierMissing:IvyModalComponents.kt$ModalTitle</ID>
    <ID>ModifierMissing:IvyModalDomainComponents.kt$ModalAmountSection</ID>
    <ID>ModifierMissing:IvyToolbar.kt$IvyToolbar</ID>
    <ID>ModifierMissing:IvyUI.kt$IvyUI</ID>
    <ID>ModifierMissing:IvyViewPager.kt$IvyPager</ID>
    <ID>ModifierMissing:IvyWalletSteps.kt$IvyWalletSteps</ID>
    <ID>ModifierMissing:LoanModal.kt$LoanModal</ID>
    <ID>ModifierMissing:LoanRecordModal.kt$LoanRecordModal</ID>
    <ID>ModifierMissing:MainBottomBar.kt$BottomBar</ID>
    <ID>ModifierMissing:MonefySteps.kt$MonefySteps</ID>
    <ID>ModifierMissing:MoneyManagerPraseSteps.kt$MoneyManagerPraseSteps</ID>
    <ID>ModifierMissing:MonthPickerModal.kt$MonthPickerModal</ID>
    <ID>ModifierMissing:NameModal.kt$NameModal</ID>
    <ID>ModifierMissing:OnboardingAccounts.kt$BuyPremiumRow</ID>
    <ID>ModifierMissing:OnboardingAccounts.kt$OnboardingAccounts</ID>
    <ID>ModifierMissing:OnboardingAccounts.kt$PremiumInfo</ID>
    <ID>ModifierMissing:OnboardingCategories.kt$OnboardingCategories</ID>
    <ID>ModifierMissing:OnboardingPrivacyTC.kt$OnboardingPrivacyTC</ID>
    <ID>ModifierMissing:OnboardingSetCurrency.kt$OnboardingSetCurrency</ID>
    <ID>ModifierMissing:OnboardingSetName.kt$OnboardingSetName</ID>
    <ID>ModifierMissing:OnboardingSplashLogin.kt$OnboardingSplashLogin</ID>
    <ID>ModifierMissing:OnboardingToolbar.kt$OnboardingToolbar</ID>
    <ID>ModifierMissing:OnboardingType.kt$OnboardingType</ID>
    <ID>ModifierMissing:PieChart.kt$PieChart</ID>
    <ID>ModifierMissing:PieChartStatisticBottomBar.kt$PieChartStatisticBottomBar</ID>
    <ID>ModifierMissing:PlannedPaymentCard.kt$PlannedPaymentCard</ID>
    <ID>ModifierMissing:PlannedPaymentsBottomBar.kt$PlannedPaymentsBottomBar</ID>
    <ID>ModifierMissing:PlannedPaymentsLazyColumn.kt$PlannedPaymentsLazyColumn</ID>
    <ID>ModifierMissing:PlansSheet.kt$PlansSheet</ID>
    <ID>ModifierMissing:Preview.kt$IvyComponentPreview</ID>
    <ID>ModifierMissing:PrimaryAttributeColumn.kt$PrimaryAttributeColumn</ID>
    <ID>ModifierMissing:ProgressModal.kt$ProgressModal</ID>
    <ID>ModifierMissing:RateItem.kt$RateItem</ID>
    <ID>ModifierMissing:RecurringRuleModal.kt$RecurringRuleModal</ID>
    <ID>ModifierMissing:ReorderModal.kt$ReorderModal</ID>
    <ID>ModifierMissing:ReorderModal.kt$ReorderModalSingleType</ID>
    <ID>ModifierMissing:ScreenTitle.kt$ScreenTitle</ID>
    <ID>ModifierMissing:ScreenTitle.kt$ScreenTitleLarge</ID>
    <ID>ModifierMissing:SearchScreen.kt$SearchInput</ID>
    <ID>ModifierMissing:Spacers.kt$SpacerHor</ID>
    <ID>ModifierMissing:Spacers.kt$SpacerVer</ID>
    <ID>ModifierMissing:Spacers.kt$SpacerWeight</ID>
    <ID>ModifierMissing:SpendeeSteps.kt$SpendeeSteps</ID>
    <ID>ModifierMissing:Suggestions.kt$Suggestions</ID>
    <ID>ModifierMissing:Title.kt$Title</ID>
    <ID>ModifierMissing:Toolbar.kt$Toolbar</ID>
    <ID>ModifierMissing:TransactionCard.kt$TransactionCard</ID>
    <ID>ModifierMissing:TransactionCard.kt$TypeAmountCurrency</ID>
    <ID>ModifierMissing:TransactionDateTime.kt$TransactionDateTime</ID>
    <ID>ModifierMissing:TransactionSectionDivider.kt$SectionDivider</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$BalanceSection</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$ButtonsSection</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$IncomeExpenseSection</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$WalletBalanceWidgetContent</ID>
    <ID>ModifierMissing:WalletBalanceWidgetContent.kt$WidgetClickableItem</ID>
    <ID>ModifierMissing:WalletCharts.kt$BalanceChart</ID>
    <ID>ModifierMissing:WalletCharts.kt$ChartInfoCard</ID>
    <ID>ModifierNotUsedAtRoot:ItemIcon.kt$modifier = modifier</ID>
    <ID>ModifierNotUsedAtRoot:IvyNameTextFieldValue.kt$modifier = modifier</ID>
    <ID>ModifierReused:ItemIcon.kt$Image( modifier = modifier, painter = painterResource(id = defaultIcon), colorFilter = ColorFilter.tint(tint), contentDescription = "item icon" )</ID>
    <ID>ModifierReused:ItemIcon.kt$ItemIconM( modifier = modifier, iconName = iconName, tint = tint, Default = { Image( modifier = modifier, painter = painterResource(id = defaultIcon), colorFilter = ColorFilter.tint(tint), contentDescription = "item icon" ) } )</ID>
    <ID>ModifierReused:ItemIcon.kt$ItemIconS( modifier = modifier, iconName = iconName, tint = tint, Default = { Image( modifier = modifier, painter = painterResource(id = defaultIcon), colorFilter = ColorFilter.tint(tint), contentDescription = "item icon" ) } )</ID>
    <ID>ModifierWithoutDefault:IvyLineChart.kt$modifier</ID>
    <ID>MultiLineIfElse:BudgetModal.kt$stringResource( R.string.edit_budget )</ID>
    <ID>MultiLineIfElse:BudgetModal.kt$stringResource(R.string.create_budget)</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$paidTransactions.forEach { paidTransaction -&gt; transactionDao.flagDeleted(paidTransaction.id) }</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$paidTransactions.forEach { paidTransaction -&gt; transactionDao.save(paidTransaction.toEntity()) }</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$transactionDao.flagDeleted(paidTransaction.id)</ID>
    <ID>MultiLineIfElse:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$transactionDao.save(paidTransaction.toEntity())</ID>
    <ID>MultipleEmitters:AccountsTab.kt$AccountCard</ID>
    <ID>MultipleEmitters:AmountCurrency.kt$AmountCurrencyB1</ID>
    <ID>MultipleEmitters:AmountCurrency.kt$AmountCurrencyCaption</ID>
    <ID>MultipleEmitters:AmountCurrency.kt$AmountCurrencyH1</ID>
    <ID>MultipleEmitters:AmountModal.kt$AmountKeyboard</ID>
    <ID>MultipleEmitters:BudgetModal.kt$CategoriesRow</ID>
    <ID>MultipleEmitters:BudgetScreen.kt$BudgetItem</ID>
    <ID>MultipleEmitters:CSVScreen.kt$AmountMetadata</ID>
    <ID>MultipleEmitters:CSVScreen.kt$DateMetadataUI</ID>
    <ID>MultipleEmitters:CSVScreen.kt$TypeMetadata</ID>
    <ID>MultipleEmitters:CategoriesScreen.kt$CategoryCard</ID>
    <ID>MultipleEmitters:CategoryCharts.kt$CategoriesChart</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$AllTime</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$ChooseMonth</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$FromToRange</ID>
    <ID>MultipleEmitters:ChoosePeriodModal.kt$LastNPeriod</ID>
    <ID>MultipleEmitters:CurrencyPicker.kt$CurrencyItemCard</ID>
    <ID>MultipleEmitters:CurrencyPicker.kt$LetterDividerItem</ID>
    <ID>MultipleEmitters:DefaultImportSteps.kt$DefaultImportSteps</ID>
    <ID>MultipleEmitters:EditBottomSheet.kt$Account</ID>
    <ID>MultipleEmitters:EditBottomSheet.kt$AddAccount</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$AccountsFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$AmountFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$CategoriesFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$FilterDivider</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$KeywordsFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$ListItem</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$PeriodFilter</ID>
    <ID>MultipleEmitters:FilterOverlay.kt$TypeFilter</ID>
    <ID>MultipleEmitters:FinancistoSteps.kt$FinancistoSteps</ID>
    <ID>MultipleEmitters:GitHubBackupRequirementsCard.kt$WarningCardInfo</ID>
    <ID>MultipleEmitters:HistoryDateDivider.kt$HistoryDateDivider</ID>
    <ID>MultipleEmitters:HomeHeader.kt$HomeHeader</ID>
    <ID>MultipleEmitters:HomeMoreMenu.kt$QuickAccess</ID>
    <ID>MultipleEmitters:ImportFrom.kt$ImportOption</ID>
    <ID>MultipleEmitters:ImportInstructions.kt$UploadFileStep</ID>
    <ID>MultipleEmitters:IvyBorderButton.kt$IconEnd</ID>
    <ID>MultipleEmitters:IvyBorderButton.kt$IconStart</ID>
    <ID>MultipleEmitters:IvyButton.kt$IconEnd</ID>
    <ID>MultipleEmitters:IvyButton.kt$IconStart</ID>
    <ID>MultipleEmitters:IvyColorPicker.kt$ColorItem</ID>
    <ID>MultipleEmitters:IvyWalletSteps.kt$IvyWalletSteps</ID>
    <ID>MultipleEmitters:LoanDetailsScreen.kt$NoLoanRecordsEmptyState</ID>
    <ID>MultipleEmitters:LoanModal.kt$Account</ID>
    <ID>MultipleEmitters:LoanModal.kt$AddAccount</ID>
    <ID>MultipleEmitters:LoanRecordModal.kt$Account</ID>
    <ID>MultipleEmitters:LoanRecordModal.kt$AddAccount</ID>
    <ID>MultipleEmitters:MainBottomBar.kt$AddExpenseButton</ID>
    <ID>MultipleEmitters:MainBottomBar.kt$AddIncomeButton</ID>
    <ID>MultipleEmitters:MainBottomBar.kt$AddTransferButton</ID>
    <ID>MultipleEmitters:MonefySteps.kt$MonefySteps</ID>
    <ID>MultipleEmitters:MoneyManagerPraseSteps.kt$MoneyManagerPraseSteps</ID>
    <ID>MultipleEmitters:OnboardingSplashLogin.kt$LocalAccountExplanation</ID>
    <ID>MultipleEmitters:PlansSheet.kt$LongNoticeText</ID>
    <ID>MultipleEmitters:RecurringRuleModal.kt$MultipleTimes</ID>
    <ID>MultipleEmitters:RecurringRuleModal.kt$OneTime</ID>
    <ID>MultipleEmitters:ServerStopScreen.kt$Content</ID>
    <ID>MultipleEmitters:SettingsScreen.kt$AccountCardLocalAccount</ID>
    <ID>MultipleEmitters:SettingsScreen.kt$AccountCardUser</ID>
    <ID>MultipleEmitters:SettingsScreen.kt$SettingsSectionDivider</ID>
    <ID>MultipleEmitters:SpendeeSteps.kt$SpendeeSteps</ID>
    <ID>MultipleEmitters:TransactionCard.kt$TransactionCard</ID>
    <ID>MultipleEmitters:TransactionSectionDivider.kt$SectionDivider</ID>
    <ID>MultipleEmitters:WalletCharts.kt$BalanceChart</ID>
    <ID>MutableParams:HomeTab.kt$hideBalanceRowState</ID>
    <ID>NestedBlockDepth:AccValueFunctions.kt$AccountValueFunctions$fun balance( transaction: Transaction, accountId: UUID ): BigDecimal</ID>
    <ID>NewLineAtEndOfFile:ivy.lint.gradle.kts$.ivy.lint.gradle.kts</ID>
    <ID>NoConsecutiveBlankLines:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors4ymijgaek646mzru18sdmblu7.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors6m89nhcqblthog8es93pjkmhg.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors72k7tti784t7idmqtg2upvaru.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors7hvycqvau4uyj5knata7lx0yx.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorsa5ptgikd9fb816fav4742zvaq.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Accessorseessl0al0otcsbyqqruvoncpd.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DetektConfigurationAccessors.kt$ </ID>
    <ID>NoConsecutiveBlankLines:DetektPluginsConfigurationAccessors.kt$ </ID>
    <ID>NoConsecutiveBlankLines:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$ </ID>
    <ID>NoConsecutiveBlankLines:PluginSpecBuilders.kt$ </ID>
    <ID>NoMultipleSpaces:DetektConfigurationAccessors.kt$ </ID>
    <ID>NoMultipleSpaces:DetektPluginsConfigurationAccessors.kt$ </ID>
    <ID>NoMultipleSpaces:ivy.lint.gradle.kts$ </ID>
    <ID>NoTrailingSpaces:ivy.lint.gradle.kts$ </ID>
    <ID>NoUnusedImports:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors32ikgp1isdd8mwexzgbe6rirl.kt</ID>
    <ID>NoUnusedImports:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt</ID>
    <ID>NoUnusedImports:Accessors4ymijgaek646mzru18sdmblu7.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors4ymijgaek646mzru18sdmblu7.kt</ID>
    <ID>NoUnusedImports:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors5x03zd2mf47s5vj1qv3jvhdru.kt</ID>
    <ID>NoUnusedImports:Accessors6m89nhcqblthog8es93pjkmhg.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors6m89nhcqblthog8es93pjkmhg.kt</ID>
    <ID>NoUnusedImports:Accessors72k7tti784t7idmqtg2upvaru.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors72k7tti784t7idmqtg2upvaru.kt</ID>
    <ID>NoUnusedImports:Accessors7hvycqvau4uyj5knata7lx0yx.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors7hvycqvau4uyj5knata7lx0yx.kt</ID>
    <ID>NoUnusedImports:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt</ID>
    <ID>NoUnusedImports:Accessorsa5ptgikd9fb816fav4742zvaq.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorsa5ptgikd9fb816fav4742zvaq.kt</ID>
    <ID>NoUnusedImports:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorsblypoh2ruc9u3bx9djsfqsntg.kt</ID>
    <ID>NoUnusedImports:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt</ID>
    <ID>NoUnusedImports:Accessorseessl0al0otcsbyqqruvoncpd.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.Accessorseessl0al0otcsbyqqruvoncpd.kt</ID>
    <ID>NoUnusedImports:DetektConfigurationAccessors.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.DetektConfigurationAccessors.kt</ID>
    <ID>NoUnusedImports:DetektPluginsConfigurationAccessors.kt$gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9.DetektPluginsConfigurationAccessors.kt</ID>
    <ID>NoWildcardImports:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.csv.*</ID>
    <ID>NoWildcardImports:AppModuleDI.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:BackupLogic.kt$import com.google.gson.*</ID>
    <ID>NoWildcardImports:BackupLogic.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:BufferModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:CSVViewModel.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:CSVViewModel.kt$import com.ivy.wallet.ui.csv.domain.*</ID>
    <ID>NoWildcardImports:CategoryModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:CategoryModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:ChooseIconModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ChooseIconModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:ComposeExt.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:DateExt.kt$import java.time.*</ID>
    <ID>NoWildcardImports:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>NoWildcardImports:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>NoWildcardImports:Dividers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ExchangeRatesViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>NoWildcardImports:FileUtil.kt$import java.io.*</ID>
    <ID>NoWildcardImports:FromToTimeRange.kt$import com.ivy.wallet.utils.*</ID>
    <ID>NoWildcardImports:HomeViewModel.kt$import com.ivy.wallet.domain.action.viewmodel.home.*</ID>
    <ID>NoWildcardImports:ImportType.kt$import com.ivy.wallet.ui.csvimport.flow.instructions.*</ID>
    <ID>NoWildcardImports:ImportType.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:InputField.kt$import com.ivy.design.l0_system.*</ID>
    <ID>NoWildcardImports:InputField.kt$import com.ivy.design.utils.*</ID>
    <ID>NoWildcardImports:IvyLineChart.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:IvyLineChart.kt$import androidx.compose.ui.graphics.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import androidx.room.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>NoWildcardImports:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.migration.*</ID>
    <ID>NoWildcardImports:IvySwitch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:IvySwitch.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:IvyToolbar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:IvyViewPager.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:IvyViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:IvyWalletCompleteData.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>NoWildcardImports:IvyWalletDesign.kt$import com.ivy.design.l0_system.*</ID>
    <ID>NoWildcardImports:Keyboard.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:LoanDetailsViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:MainScreen.kt$import com.ivy.wallet.ui.*</ID>
    <ID>NoWildcardImports:OnboardingScreen.kt$import com.ivy.wallet.ui.onboarding.steps.*</ID>
    <ID>NoWildcardImports:PieChart.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:PieChart.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:PreloadDataLogic.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:ProgressBar.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>NoWildcardImports:ReorderModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:ReorderModal.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:ReorderModal.kt$import androidx.recyclerview.widget.ItemTouchHelper.*</ID>
    <ID>NoWildcardImports:ReportViewModel.kt$import com.ivy.wallet.utils.*</ID>
    <ID>NoWildcardImports:Spacers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:Switch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>NoWildcardImports:Switch.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:TimePeriod.kt$import com.ivy.wallet.utils.*</ID>
    <ID>NoWildcardImports:ViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>NoWildcardImports:WalletBalanceWidgetContent.kt$import androidx.glance.layout.*</ID>
    <ID>NoWildcardImports:ZipUtils.kt$import java.io.*</ID>
    <ID>ObjectPropertyNaming:SharedPrefs.kt$SharedPrefs.Companion$// -------------------------------- Customer Journey ---------------------------------------- const val _CARD_DISMISSED = "_cj_dismissed"</ID>
    <ID>PackageName:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors4ymijgaek646mzru18sdmblu7.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors6m89nhcqblthog8es93pjkmhg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors72k7tti784t7idmqtg2upvaru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors7hvycqvau4uyj5knata7lx0yx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorsa5ptgikd9fb816fav4742zvaq.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Accessorseessl0al0otcsbyqqruvoncpd.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Background.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageName:BarChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageName:BottomBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:BottomNavigationBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:Button.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:ButtonBack.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonClose.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonDelete.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonExpandCollapse.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonPrimary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonSecondary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:ButtonWithIcon.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:Card.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageName:Checkbox.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:ColorPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:ColoredItemCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:Colors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:ColumnRoot.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:DeleteAllData.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageName:DeleteConfirmationModal.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageName:DeleteItem.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageName:DetektConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:DetektPluginsConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageName:Dividers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:EditContentCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:ErrorModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:FAB.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageName:IconButton.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:IconPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:InputField.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:ItemDetailsScreen.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageName:IvyColors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:IvyIcon.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:IvyPadding.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageName:IvyShapes.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:IvyText.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:IvyTheme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:IvyTypography.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:LineChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageName:Loading.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageName:MoreInfo.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:MoreMenu.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:Onboarding.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageName:PieChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageName:PluginSpecBuilders.kt$package gradle.kotlin.dsl.plugins._1a80f9c1af920cc798666355ba8bb8e1</ID>
    <ID>PackageName:ProgressBar.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageName:ReorderModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageName:ScreenTitle.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageName:SearchBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:Shapes.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:Spacers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageName:Switch.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageName:Theme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageName:Toolbar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageName:TypographyExt.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors4ymijgaek646mzru18sdmblu7.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors6m89nhcqblthog8es93pjkmhg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors72k7tti784t7idmqtg2upvaru.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors7hvycqvau4uyj5knata7lx0yx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorsa5ptgikd9fb816fav4742zvaq.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Accessorseessl0al0otcsbyqqruvoncpd.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Background.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageNaming:BarChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageNaming:BottomBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:BottomNavigationBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:Button.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:ButtonBack.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonClose.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonDelete.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonExpandCollapse.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonPrimary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonSecondary.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:ButtonWithIcon.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:Card.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageNaming:Checkbox.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:ColorPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:ColoredItemCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:Colors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:ColumnRoot.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:DeleteAllData.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageNaming:DeleteConfirmationModal.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageNaming:DeleteItem.kt$package com.ivy.design.l4_patterns.delete</ID>
    <ID>PackageNaming:DetektConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:DetektPluginsConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._6b1cdd1e881959619ea23cf7941079a9</ID>
    <ID>PackageNaming:Dividers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:EditContentCard.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:ErrorModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:FAB.kt$package com.ivy.design.l3_ivyComponents.button</ID>
    <ID>PackageNaming:IconButton.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:IconPicker.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:InputField.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:ItemDetailsScreen.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageNaming:IvyColors.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:IvyIcon.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:IvyPadding.kt$package com.ivy.design.l1_buildingBlocks.data</ID>
    <ID>PackageNaming:IvyShapes.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:IvyText.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:IvyTheme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:IvyTypography.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:LineChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageNaming:Loading.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageNaming:MoreInfo.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:MoreMenu.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:Onboarding.kt$package com.ivy.design.l5_concept</ID>
    <ID>PackageNaming:PieChart.kt$package com.ivy.design.l3_ivyComponents.chart</ID>
    <ID>PackageNaming:PluginSpecBuilders.kt$package gradle.kotlin.dsl.plugins._1a80f9c1af920cc798666355ba8bb8e1</ID>
    <ID>PackageNaming:ProgressBar.kt$package com.ivy.design.l3_ivyComponents.percentage</ID>
    <ID>PackageNaming:ReorderModal.kt$package com.ivy.design.l4_patterns</ID>
    <ID>PackageNaming:ScreenTitle.kt$package com.ivy.design.l3_ivyComponents</ID>
    <ID>PackageNaming:SearchBar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:Shapes.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:Spacers.kt$package com.ivy.design.l1_buildingBlocks</ID>
    <ID>PackageNaming:Switch.kt$package com.ivy.design.l2_components</ID>
    <ID>PackageNaming:Theme.kt$package com.ivy.design.l0_system</ID>
    <ID>PackageNaming:Toolbar.kt$package com.ivy.design.l3_ivyComponents.bar</ID>
    <ID>PackageNaming:TypographyExt.kt$package com.ivy.design.l0_system</ID>
    <ID>ParameterListWrapping:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:Accessorseessl0al0otcsbyqqruvoncpd.kt$(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;)</ID>
    <ID>ParameterListWrapping:DetektConfigurationAccessors.kt$(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit)</ID>
    <ID>ParameterListWrapping:DetektPluginsConfigurationAccessors.kt$(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit)</ID>
    <ID>PrintStackTrace:Budget.kt$Budget$e</ID>
    <ID>PrintStackTrace:BudgetCreator.kt$BudgetCreator$e</ID>
    <ID>PrintStackTrace:BudgetEntity.kt$BudgetEntity$e</ID>
    <ID>PrintStackTrace:CSVImporter.kt$CSVImporter$e</ID>
    <ID>PrintStackTrace:CSVViewModel.kt$CSVViewModel$e</ID>
    <ID>PrintStackTrace:CategoryCreator.kt$CategoryCreator$e</ID>
    <ID>PrintStackTrace:EditTransactionViewModel.kt$EditTransactionViewModel$e</ID>
    <ID>PrintStackTrace:ExportCSVLogic.kt$ExportCSVLogic$e</ID>
    <ID>PrintStackTrace:FileUtil.kt$e</ID>
    <ID>PrintStackTrace:IvyBilling.kt$IvyBilling$e</ID>
    <ID>PrintStackTrace:IvyCurrency.kt$IvyCurrency.Companion$e</ID>
    <ID>PrintStackTrace:Keyboard.kt$e</ID>
    <ID>PrintStackTrace:LoanCreator.kt$LoanCreator$e</ID>
    <ID>PrintStackTrace:LoanRecordCreator.kt$LoanRecordCreator$e</ID>
    <ID>PrintStackTrace:MigrationsManager.kt$MigrationsManager$e</ID>
    <ID>PrintStackTrace:NotificationService.kt$NotificationService$e</ID>
    <ID>PrintStackTrace:RootActivity.kt$RootActivity$e</ID>
    <ID>PrintStackTrace:SyncExchangeRatesAct.kt$SyncExchangeRatesAct$e</ID>
    <ID>PrintStackTrace:UIExt.kt$e</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private fun mapDate( rowMapping: RowMapping, dateString: String? ): LocalDateTime?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private fun mapType( row: List&lt;String&gt;, rowMapping: RowMapping ): TransactionType?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private suspend fun mapAccount( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, ): Account?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private suspend fun mapCategory( categoryNameString: String?, color: Int?, icon: String?, orderNum: Double? ): Category?</ID>
    <ID>ReturnCount:CSVImporter.kt$CSVImporter$private suspend fun mapToTransaction( baseCurrency: String, row: List&lt;String&gt;, rowMapping: RowMapping ): Transaction?</ID>
    <ID>ReturnCount:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapAccount( baseCurrency: String, accountNameString: String?, color: Int?, icon: String?, orderNum: Double?, currencyRawString: String?, ): Account?</ID>
    <ID>ReturnCount:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapCategory( categoryNameString: String?, color: Int?, icon: String?, orderNum: Double? ): Category?</ID>
    <ID>ReturnCount:CSVImporterV2.kt$CSVImporterV2$private suspend fun mapToTransaction( baseCurrency: String, row: CSVRowNew, importantFields: ImportantFields, transferFields: TransferFields, optionalFields: OptionalFields, ): Transaction?</ID>
    <ID>ReturnCount:CSVViewModel.kt$CSVViewModel$private fun processFile( uri: Uri, normalizeCSV: Boolean = false, charset: Charset = Charsets.UTF_8 ): List&lt;CSVRow&gt;?</ID>
    <ID>ReturnCount:EditPlannedViewModel.kt$EditPlannedViewModel$private fun validate(): Boolean</ID>
    <ID>ReturnCount:EditTransactionViewModel.kt$EditTransactionViewModel$private fun validateTransaction(): Boolean</ID>
    <ID>ReturnCount:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun defaultAccountId( screen: EditTransaction, accounts: List&lt;Account&gt;, ): UUID</ID>
    <ID>ReturnCount:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun getDisplayLoanHelper(trans: Transaction): EditTransactionDisplayLoan</ID>
    <ID>ReturnCount:ExchangeRatesLogic.kt$ExchangeRatesLogic$private suspend fun exchangeRate( baseCurrency: String, currency: String ): Double</ID>
    <ID>ReturnCount:IvyCurrency.kt$IvyCurrency.Companion$fun fromCode(code: String): IvyCurrency?</ID>
    <ID>ReturnCount:LoanCreator.kt$LoanCreator$suspend fun create( data: CreateLoanData, onRefreshUI: suspend (Loan) -&gt; Unit ): UUID?</ID>
    <ID>ReturnCount:LoanRecordCreator.kt$LoanRecordCreator$suspend fun create( loanId: UUID, data: CreateLoanRecordData, onRefreshUI: suspend (LoanRecord) -&gt; Unit ): UUID?</ID>
    <ID>ReturnCount:PaywallLogic.kt$PaywallLogic$private suspend fun checkPaywall( paywallHitDefinition: suspend () -&gt; PaywallReason? ): PaywallReason?</ID>
    <ID>ReturnCount:Plan.kt$Plan$fun parsePrice(): AmountCurrency?</ID>
    <ID>ReturnCount:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$private suspend fun amountForMonthInBaseCurrency( plannedPayment: PlannedPaymentRule, baseCurrency: String, accounts: List&lt;Account&gt; ): Double</ID>
    <ID>ReturnCount:ReportFilter.kt$ReportFilter$fun validate(): Boolean</ID>
    <ID>ReturnCount:SyncExchangeRatesAct.kt$SyncExchangeRatesAct$private suspend fun sync(baseCurrency: String)</ID>
    <ID>SpacingAroundColon:ReportViewModel.kt$ReportViewModel$:</ID>
    <ID>SpacingAroundCurly:PlannedPaymentsLogic.kt$PlannedPaymentsLogic${</ID>
    <ID>SpacingAroundCurly:ReportViewModel.kt$ReportViewModel${</ID>
    <ID>SpreadOperator:UiText.kt$UiText$(resId, *args)</ID>
    <ID>SwallowedException:BackupLogic.kt$BackupLogic$e: Exception</ID>
    <ID>SwallowedException:CSVImporter.kt$CSVImporter$e: Exception</ID>
    <ID>SwallowedException:CSVImporterV2.kt$CSVImporterV2$e: Exception</ID>
    <ID>SwallowedException:CSVViewModel.kt$CSVViewModel$e: Exception</ID>
    <ID>SwallowedException:CalculatorModal.kt$e: Exception</ID>
    <ID>SwallowedException:ComposeExt.kt$e: Exception</ID>
    <ID>SwallowedException:IntervalPickerRow.kt$e: Exception</ID>
    <ID>SwallowedException:ItemIcon.kt$e: Exception</ID>
    <ID>SwallowedException:Ivy_lintPlugin.kt$Ivy_lintPlugin$e: java.lang.reflect.InvocationTargetException</ID>
    <ID>SwallowedException:ParseFields.kt$e: Exception</ID>
    <ID>SwallowedException:ParseStatus.kt$e: Exception</ID>
    <ID>SwallowedException:Plan.kt$Plan$e: Exception</ID>
    <ID>SwallowedException:RootActivity.kt$RootActivity$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:RootViewModel.kt$RootViewModel$e: IllegalArgumentException</ID>
    <ID>TooGenericExceptionCaught:AmountModal.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupLogic.kt$BackupLogic$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Budget.kt$Budget$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BudgetCreator.kt$BudgetCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BudgetEntity.kt$BudgetEntity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CSVImporter.kt$CSVImporter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CSVImporterV2.kt$CSVImporterV2$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CSVViewModel.kt$CSVViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CalculatorModal.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CategoryCreator.kt$CategoryCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ComposeExt.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EditPlannedViewModel.kt$EditPlannedViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EditTransactionViewModel.kt$EditTransactionViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ExportCSVLogic.kt$ExportCSVLogic$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GitHubClient.kt$GitHubClient$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImportViewModel.kt$ImportViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IntervalPickerRow.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ItemIcon.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IvyBilling.kt$IvyBilling$e: Exception</ID>
    <ID>TooGenericExceptionCaught:IvyCurrency.kt$IvyCurrency.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Keyboard.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanCreator.kt$LoanCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LoanRecordCreator.kt$LoanRecordCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MigrationsManager.kt$MigrationsManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:NotificationService.kt$NotificationService$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OnboardingViewModel.kt$OnboardingViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ParseFields.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ParseStatus.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Plan.kt$Plan$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RootActivity.kt$RootActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsViewModel.kt$SettingsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncExchangeRatesAct.kt$SyncExchangeRatesAct$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UIExt.kt$e: Exception</ID>
    <ID>TooManyFunctions:AmountFormatting.kt$com.ivy.wallet.utils.AmountFormatting.kt</ID>
    <ID>TooManyFunctions:AppModuleDI.kt$AppModuleDI</ID>
    <ID>TooManyFunctions:BackupLogic.kt$BackupLogic</ID>
    <ID>TooManyFunctions:BudgetBattery.kt$com.ivy.wallet.ui.theme.components.BudgetBattery.kt</ID>
    <ID>TooManyFunctions:CSVImporter.kt$CSVImporter</ID>
    <ID>TooManyFunctions:CSVMapper.kt$CSVMapper</ID>
    <ID>TooManyFunctions:CSVScreen.kt$com.ivy.wallet.ui.csv.CSVScreen.kt</ID>
    <ID>TooManyFunctions:CSVViewModel.kt$CSVViewModel : ViewModel</ID>
    <ID>TooManyFunctions:ChartsViewModel.kt$ChartsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:Colors.kt$com.ivy.design.l0_system.Colors.kt</ID>
    <ID>TooManyFunctions:ComposeExt.kt$com.ivy.wallet.utils.ComposeExt.kt</ID>
    <ID>TooManyFunctions:CustomerJourneyLogic.kt$CustomerJourneyLogic$Companion</ID>
    <ID>TooManyFunctions:CustomerJourneyLogic.kt$com.ivy.wallet.domain.deprecated.logic.CustomerJourneyLogic.kt</ID>
    <ID>TooManyFunctions:DateExt.kt$com.ivy.wallet.utils.DateExt.kt</ID>
    <ID>TooManyFunctions:EditBottomSheet.kt$com.ivy.wallet.ui.edit.core.EditBottomSheet.kt</ID>
    <ID>TooManyFunctions:EditPlannedViewModel.kt$EditPlannedViewModel : ViewModel</ID>
    <ID>TooManyFunctions:EditTransactionViewModel.kt$EditTransactionViewModel : ViewModel</ID>
    <ID>TooManyFunctions:FilterOverlay.kt$com.ivy.wallet.ui.reports.FilterOverlay.kt</ID>
    <ID>TooManyFunctions:HomeViewModel.kt$HomeViewModel : FRPViewModel</ID>
    <ID>TooManyFunctions:ItemIcon.kt$com.ivy.wallet.ui.theme.components.ItemIcon.kt</ID>
    <ID>TooManyFunctions:ItemStatisticViewModel.kt$ItemStatisticViewModel : ViewModel</ID>
    <ID>TooManyFunctions:IvyColors.kt$com.ivy.wallet.ui.theme.IvyColors.kt</ID>
    <ID>TooManyFunctions:IvyLineChart.kt$com.ivy.wallet.ui.theme.components.charts.linechart.IvyLineChart.kt</ID>
    <ID>TooManyFunctions:IvyModalComponents.kt$com.ivy.wallet.ui.theme.modal.IvyModalComponents.kt</ID>
    <ID>TooManyFunctions:IvyRoomDatabase.kt$IvyRoomDatabase : RoomDatabase</ID>
    <ID>TooManyFunctions:LoanTransactionsCore.kt$LoanTransactionsCore</ID>
    <ID>TooManyFunctions:OnboardingRouter.kt$OnboardingRouter</ID>
    <ID>TooManyFunctions:OnboardingViewModel.kt$OnboardingViewModel : ViewModel</ID>
    <ID>TooManyFunctions:ParseFields.kt$com.ivy.wallet.ui.csv.domain.ParseFields.kt</ID>
    <ID>TooManyFunctions:PieChartStatisticViewModel.kt$PieChartStatisticViewModel : FRPViewModel</ID>
    <ID>TooManyFunctions:PlannedPaymentRuleDao.kt$PlannedPaymentRuleDao</ID>
    <ID>TooManyFunctions:PlannedPaymentsLogic.kt$PlannedPaymentsLogic</ID>
    <ID>TooManyFunctions:ReportViewModel.kt$ReportViewModel : FRPViewModel</ID>
    <ID>TooManyFunctions:RoomTypeConverters.kt$RoomTypeConverters</ID>
    <ID>TooManyFunctions:RootActivity.kt$RootActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:RootViewModel.kt$RootViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SettingsScreen.kt$com.ivy.wallet.ui.settings.SettingsScreen.kt</ID>
    <ID>TooManyFunctions:SettingsViewModel.kt$SettingsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SharedPrefs.kt$SharedPrefs</ID>
    <ID>TooManyFunctions:TransactionCard.kt$com.ivy.wallet.ui.component.transaction.TransactionCard.kt</ID>
    <ID>TooManyFunctions:TransactionDao.kt$TransactionDao</ID>
    <ID>TooManyFunctions:UIExt.kt$com.ivy.wallet.utils.UIExt.kt</ID>
    <ID>TooManyFunctions:UtilExt.kt$com.ivy.wallet.utils.UtilExt.kt</ID>
    <ID>TooManyFunctions:WalletAccountLogic.kt$WalletAccountLogic</ID>
    <ID>TooManyFunctions:WalletCategoryLogic.kt$WalletCategoryLogic</ID>
    <ID>TopLevelPropertyNaming:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val io.gitlab.arturbosch.detekt.extensions.DetektExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors4ymijgaek646mzru18sdmblu7.kt$/** * Retrieves the [detekt][io.gitlab.arturbosch.detekt.extensions.DetektExtension] extension. */ internal val org.gradle.api.Project.`detekt`: io.gitlab.arturbosch.detekt.extensions.DetektExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("detekt") as io.gitlab.arturbosch.detekt.extensions.DetektExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$/** * Provides the existing [detekt][io.gitlab.arturbosch.detekt.Detekt] task. */ internal val TaskContainer.`detekt`: TaskProvider&lt;io.gitlab.arturbosch.detekt.Detekt&gt; get() = named&lt;io.gitlab.arturbosch.detekt.Detekt&gt;("detekt")</ID>
    <ID>TopLevelPropertyNaming:Accessors6m89nhcqblthog8es93pjkmhg.kt$/** * Provides the existing [detektPlugins][org.gradle.api.artifacts.Configuration] element. */ internal val org.gradle.api.NamedDomainObjectContainer&lt;org.gradle.api.artifacts.Configuration&gt;.`detektPlugins`: NamedDomainObjectProvider&lt;org.gradle.api.artifacts.Configuration&gt; get() = named&lt;org.gradle.api.artifacts.Configuration&gt;("detektPlugins")</ID>
    <ID>TopLevelPropertyNaming:Accessors72k7tti784t7idmqtg2upvaru.kt$/** * Provides the existing [detekt][org.gradle.api.artifacts.Configuration] element. */ internal val org.gradle.api.NamedDomainObjectContainer&lt;org.gradle.api.artifacts.Configuration&gt;.`detekt`: NamedDomainObjectProvider&lt;org.gradle.api.artifacts.Configuration&gt; get() = named&lt;org.gradle.api.artifacts.Configuration&gt;("detekt")</ID>
    <ID>TopLevelPropertyNaming:Accessors7hvycqvau4uyj5knata7lx0yx.kt$/** * Provides the existing [detektGenerateConfig][io.gitlab.arturbosch.detekt.DetektGenerateConfigTask] task. */ internal val TaskContainer.`detektGenerateConfig`: TaskProvider&lt;io.gitlab.arturbosch.detekt.DetektGenerateConfigTask&gt; get() = named&lt;io.gitlab.arturbosch.detekt.DetektGenerateConfigTask&gt;("detektGenerateConfig")</ID>
    <ID>TopLevelPropertyNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.artifacts.dsl.DependencyHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessorsa5ptgikd9fb816fav4742zvaq.kt$/** * Provides the existing [detektBaseline][io.gitlab.arturbosch.detekt.DetektCreateBaselineTask] task. */ internal val TaskContainer.`detektBaseline`: TaskProvider&lt;io.gitlab.arturbosch.detekt.DetektCreateBaselineTask&gt; get() = named&lt;io.gitlab.arturbosch.detekt.DetektCreateBaselineTask&gt;("detektBaseline")</ID>
    <ID>TopLevelPropertyNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.Project.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$/** * Retrieves the [reporting][org.gradle.api.reporting.ReportingExtension] extension. */ internal val org.gradle.api.Project.`reporting`: org.gradle.api.reporting.ReportingExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("reporting") as org.gradle.api.reporting.ReportingExtension</ID>
    <ID>TopLevelPropertyNaming:Accessorseessl0al0otcsbyqqruvoncpd.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.reporting.ReportingExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:AmountFormatting.kt$const val N_100K = 100000</ID>
    <ID>TopLevelPropertyNaming:ChooseIconModal.kt$private const val ICON_PICKER_ICONS_PER_ROW = 5</ID>
    <ID>TopLevelPropertyNaming:GitHubBackupScreen.kt$private const val GITHUB_PAT_INFO_URL = "https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token"</ID>
    <ID>TopLevelPropertyNaming:GitHubBackupScreen.kt$private const val GITHUB_REPO_INFO_URL = "https://docs.github.com/en/get-started/quickstart/create-a-repo"</ID>
    <ID>TopLevelPropertyNaming:GitHubBackupScreen.kt$private const val VIDEO_TUTORIAL_URL = "https://www.youtube.com/watch?v=sDmZxXlXsCM"</ID>
    <ID>TopLevelPropertyNaming:HomeMoreMenu.kt$private const val SWIPE_UP_THRESHOLD_CLOSE_MORE_MENU = 300</ID>
    <ID>TopLevelPropertyNaming:HomeTab.kt$private const val SWIPE_HORIZONTAL_THRESHOLD = 200</ID>
    <ID>TopLevelPropertyNaming:IvyModal.kt$const val DURATION_MODAL_ANIM = 200</ID>
    <ID>TopLevelPropertyNaming:IvyModal.kt$private const val DURATION_BACKGROUND_BLUR_ANIM = 400</ID>
    <ID>TopLevelPropertyNaming:IvyViewPager.kt$private const val SWIPE_THRESHOLD = 0.2f</ID>
    <ID>TopLevelPropertyNaming:ParseStatus.kt$const val SAMPLE_SIZE = 20</ID>
    <ID>TopLevelPropertyNaming:PaywallScreen.kt$private const val BENEFIT_TAG_ACCOUNTS = "accs"</ID>
    <ID>TopLevelPropertyNaming:PaywallScreen.kt$private const val BENEFIT_TAG_BUDGETS = "budgs"</ID>
    <ID>TopLevelPropertyNaming:PaywallScreen.kt$private const val BENEFIT_TAG_CATEGORIES = "cats"</ID>
    <ID>TopLevelPropertyNaming:PaywallScreen.kt$private const val BENEFIT_TAG_LOANS = "loans"</ID>
    <ID>TopLevelPropertyNaming:PieChart.kt$const val PIE_CHART_RADIUS_DP = 128</ID>
    <ID>TopLevelPropertyNaming:PieChart.kt$const val RADIUS_DP = 112f</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.internal.kotlin.multiplatform`. */ internal val `ComAndroidInternalKotlinPluginGroup`.`multiplatform`: `ComAndroidInternalKotlinMultiplatformPluginGroup` get() = `ComAndroidInternalKotlinMultiplatformPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.internal.kotlin`. */ internal val `ComAndroidInternalPluginGroup`.`kotlin`: `ComAndroidInternalKotlinPluginGroup` get() = `ComAndroidInternalKotlinPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.internal`. */ internal val `ComAndroidPluginGroup`.`internal`: `ComAndroidInternalPluginGroup` get() = `ComAndroidInternalPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.kotlin.multiplatform`. */ internal val `ComAndroidKotlinPluginGroup`.`multiplatform`: `ComAndroidKotlinMultiplatformPluginGroup` get() = `ComAndroidKotlinMultiplatformPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android.kotlin`. */ internal val `ComAndroidPluginGroup`.`kotlin`: `ComAndroidKotlinPluginGroup` get() = `ComAndroidKotlinPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.android`. */ internal val `ComPluginGroup`.`android`: `ComAndroidPluginGroup` get() = `ComAndroidPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.dagger.hilt`. */ internal val `ComGoogleDaggerPluginGroup`.`hilt`: `ComGoogleDaggerHiltPluginGroup` get() = `ComGoogleDaggerHiltPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.dagger`. */ internal val `ComGooglePluginGroup`.`dagger`: `ComGoogleDaggerPluginGroup` get() = `ComGoogleDaggerPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.firebase`. */ internal val `ComGooglePluginGroup`.`firebase`: `ComGoogleFirebasePluginGroup` get() = `ComGoogleFirebasePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google.gms`. */ internal val `ComGooglePluginGroup`.`gms`: `ComGoogleGmsPluginGroup` get() = `ComGoogleGmsPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.google`. */ internal val `ComPluginGroup`.`google`: `ComGooglePluginGroup` get() = `ComGooglePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com`. */ internal val `PluginDependenciesSpec`.`com`: `ComPluginGroup` get() = `ComPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `dagger.hilt.android`. */ internal val `DaggerHiltPluginGroup`.`android`: `DaggerHiltAndroidPluginGroup` get() = `DaggerHiltAndroidPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `dagger.hilt`. */ internal val `DaggerPluginGroup`.`hilt`: `DaggerHiltPluginGroup` get() = `DaggerHiltPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `dagger`. */ internal val `PluginDependenciesSpec`.`dagger`: `DaggerPluginGroup` get() = `DaggerPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.github.detekt.gradle`. */ internal val `IoGithubDetektPluginGroup`.`gradle`: `IoGithubDetektGradlePluginGroup` get() = `IoGithubDetektGradlePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.github.detekt`. */ internal val `IoGithubPluginGroup`.`detekt`: `IoGithubDetektPluginGroup` get() = `IoGithubDetektPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.github`. */ internal val `IoPluginGroup`.`github`: `IoGithubPluginGroup` get() = `IoGithubPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.gitlab.arturbosch`. */ internal val `IoGitlabPluginGroup`.`arturbosch`: `IoGitlabArturboschPluginGroup` get() = `IoGitlabArturboschPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io.gitlab`. */ internal val `IoPluginGroup`.`gitlab`: `IoGitlabPluginGroup` get() = `IoGitlabPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `io`. */ internal val `PluginDependenciesSpec`.`io`: `IoPluginGroup` get() = `IoPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.gradle`. */ internal val `OrgPluginGroup`.`gradle`: `OrgGradlePluginGroup` get() = `OrgGradlePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin.native`. */ internal val `OrgJetbrainsKotlinPluginGroup`.`native`: `OrgJetbrainsKotlinNativePluginGroup` get() = `OrgJetbrainsKotlinNativePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin.platform`. */ internal val `OrgJetbrainsKotlinPluginGroup`.`platform`: `OrgJetbrainsKotlinPlatformPluginGroup` get() = `OrgJetbrainsKotlinPlatformPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin.plugin`. */ internal val `OrgJetbrainsKotlinPluginGroup`.`plugin`: `OrgJetbrainsKotlinPluginPluginGroup` get() = `OrgJetbrainsKotlinPluginPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains.kotlin`. */ internal val `OrgJetbrainsPluginGroup`.`kotlin`: `OrgJetbrainsKotlinPluginGroup` get() = `OrgJetbrainsKotlinPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.jetbrains`. */ internal val `OrgPluginGroup`.`jetbrains`: `OrgJetbrainsPluginGroup` get() = `OrgJetbrainsPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org`. */ internal val `PluginDependenciesSpec`.`org`: `OrgPluginGroup` get() = `OrgPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `android-library` plugin implemented by [com.android.build.gradle.LibraryPlugin]. */ internal val `PluginDependenciesSpec`.`android-library`: PluginDependencySpec get() = this.id("android-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `android-reporting` plugin implemented by [com.android.build.gradle.ReportingPlugin]. */ internal val `PluginDependenciesSpec`.`android-reporting`: PluginDependencySpec get() = this.id("android-reporting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `android` plugin implemented by [com.android.build.gradle.AppPlugin]. */ internal val `PluginDependenciesSpec`.`android`: PluginDependencySpec get() = this.id("android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.application` plugin implemented by [com.android.build.gradle.AppPlugin]. */ internal val `ComAndroidPluginGroup`.`application`: PluginDependencySpec get() = plugins.id("com.android.application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.asset-pack-bundle` plugin implemented by [com.android.build.gradle.AssetPackBundlePlugin]. */ internal val `ComAndroidPluginGroup`.`asset-pack-bundle`: PluginDependencySpec get() = plugins.id("com.android.asset-pack-bundle")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.asset-pack` plugin implemented by [com.android.build.gradle.AssetPackPlugin]. */ internal val `ComAndroidPluginGroup`.`asset-pack`: PluginDependencySpec get() = plugins.id("com.android.asset-pack")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.base` plugin implemented by [com.android.build.gradle.api.AndroidBasePlugin]. */ internal val `ComAndroidPluginGroup`.`base`: PluginDependencySpec get() = plugins.id("com.android.base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.dynamic-feature` plugin implemented by [com.android.build.gradle.DynamicFeaturePlugin]. */ internal val `ComAndroidPluginGroup`.`dynamic-feature`: PluginDependencySpec get() = plugins.id("com.android.dynamic-feature")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.fused-library` plugin implemented by [com.android.build.gradle.api.FusedLibraryPlugin]. */ internal val `ComAndroidPluginGroup`.`fused-library`: PluginDependencySpec get() = plugins.id("com.android.fused-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.application` plugin implemented by [com.android.build.gradle.internal.plugins.AppPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`application`: PluginDependencySpec get() = plugins.id("com.android.internal.application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.asset-pack-bundle` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackBundlePlugin]. */ internal val `ComAndroidInternalPluginGroup`.`asset-pack-bundle`: PluginDependencySpec get() = plugins.id("com.android.internal.asset-pack-bundle")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.asset-pack` plugin implemented by [com.android.build.gradle.internal.plugins.AssetPackPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`asset-pack`: PluginDependencySpec get() = plugins.id("com.android.internal.asset-pack")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.dynamic-feature` plugin implemented by [com.android.build.gradle.internal.plugins.DynamicFeaturePlugin]. */ internal val `ComAndroidInternalPluginGroup`.`dynamic-feature`: PluginDependencySpec get() = plugins.id("com.android.internal.dynamic-feature")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.fused-library` plugin implemented by [com.android.build.gradle.internal.plugins.FusedLibraryPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`fused-library`: PluginDependencySpec get() = plugins.id("com.android.internal.fused-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.internal.plugins.KotlinMultiplatformAndroidPlugin]. */ internal val `ComAndroidInternalKotlinMultiplatformPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.internal.kotlin.multiplatform.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.library` plugin implemented by [com.android.build.gradle.internal.plugins.LibraryPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.internal.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.lint` plugin implemented by [com.android.build.gradle.internal.plugins.LintPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`lint`: PluginDependencySpec get() = plugins.id("com.android.internal.lint")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.privacy-sandbox-sdk` plugin implemented by [com.android.build.gradle.internal.plugins.PrivacySandboxSdkPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`privacy-sandbox-sdk`: PluginDependencySpec get() = plugins.id("com.android.internal.privacy-sandbox-sdk")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.reporting` plugin implemented by [com.android.build.gradle.internal.plugins.ReportingPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`reporting`: PluginDependencySpec get() = plugins.id("com.android.internal.reporting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.test` plugin implemented by [com.android.build.gradle.internal.plugins.TestPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`test`: PluginDependencySpec get() = plugins.id("com.android.internal.test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.internal.version-check` plugin implemented by [com.android.build.gradle.internal.plugins.VersionCheckPlugin]. */ internal val `ComAndroidInternalPluginGroup`.`version-check`: PluginDependencySpec get() = plugins.id("com.android.internal.version-check")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.kotlin.multiplatform.library` plugin implemented by [com.android.build.gradle.api.KotlinMultiplatformAndroidPlugin]. */ internal val `ComAndroidKotlinMultiplatformPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.kotlin.multiplatform.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.library` plugin implemented by [com.android.build.gradle.LibraryPlugin]. */ internal val `ComAndroidPluginGroup`.`library`: PluginDependencySpec get() = plugins.id("com.android.library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.lint` plugin implemented by [com.android.build.gradle.LintPlugin]. */ internal val `ComAndroidPluginGroup`.`lint`: PluginDependencySpec get() = plugins.id("com.android.lint")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.privacy-sandbox-sdk` plugin implemented by [com.android.build.gradle.api.PrivacySandboxSdkPlugin]. */ internal val `ComAndroidPluginGroup`.`privacy-sandbox-sdk`: PluginDependencySpec get() = plugins.id("com.android.privacy-sandbox-sdk")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.reporting` plugin implemented by [com.android.build.gradle.ReportingPlugin]. */ internal val `ComAndroidPluginGroup`.`reporting`: PluginDependencySpec get() = plugins.id("com.android.reporting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.android.test` plugin implemented by [com.android.build.gradle.TestPlugin]. */ internal val `ComAndroidPluginGroup`.`test`: PluginDependencySpec get() = plugins.id("com.android.test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.google.dagger.hilt.android` plugin implemented by [dagger.hilt.android.plugin.HiltGradlePlugin]. */ internal val `ComGoogleDaggerHiltPluginGroup`.`android`: PluginDependencySpec get() = plugins.id("com.google.dagger.hilt.android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.google.firebase.crashlytics` plugin implemented by [com.google.firebase.crashlytics.buildtools.gradle.CrashlyticsPlugin]. */ internal val `ComGoogleFirebasePluginGroup`.`crashlytics`: PluginDependencySpec get() = plugins.id("com.google.firebase.crashlytics")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.google.gms.google-services` plugin implemented by [com.google.gms.googleservices.GoogleServicesPlugin]. */ internal val `ComGoogleGmsPluginGroup`.`google-services`: PluginDependencySpec get() = plugins.id("com.google.gms.google-services")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `dagger.hilt.android.plugin` plugin implemented by [dagger.hilt.android.plugin.HiltGradlePlugin]. */ internal val `DaggerHiltAndroidPluginGroup`.`plugin`: PluginDependencySpec get() = plugins.id("dagger.hilt.android.plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `io.github.detekt.gradle.compiler-plugin` plugin implemented by [io.github.detekt.gradle.DetektKotlinCompilerPlugin]. */ internal val `IoGithubDetektGradlePluginGroup`.`compiler-plugin`: PluginDependencySpec get() = plugins.id("io.github.detekt.gradle.compiler-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `io.gitlab.arturbosch.detekt` plugin implemented by [io.gitlab.arturbosch.detekt.DetektPlugin]. */ internal val `IoGitlabArturboschPluginGroup`.`detekt`: PluginDependencySpec get() = plugins.id("io.gitlab.arturbosch.detekt")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-android-extensions` plugin implemented by [org.jetbrains.kotlin.gradle.internal.AndroidExtensionsSubpluginIndicator]. */ internal val `PluginDependenciesSpec`.`kotlin-android-extensions`: PluginDependencySpec get() = this.id("kotlin-android-extensions")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper]. */ internal val `PluginDependenciesSpec`.`kotlin-android`: PluginDependencySpec get() = this.id("kotlin-android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-kapt` plugin implemented by [org.jetbrains.kotlin.gradle.internal.Kapt3GradleSubplugin]. */ internal val `PluginDependenciesSpec`.`kotlin-kapt`: PluginDependencySpec get() = this.id("kotlin-kapt")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper]. */ internal val `PluginDependenciesSpec`.`kotlin-multiplatform`: PluginDependencySpec get() = this.id("kotlin-multiplatform")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-native-cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-native-cocoapods`: PluginDependencySpec get() = this.id("kotlin-native-cocoapods")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-native-performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-native-performance`: PluginDependencySpec get() = this.id("kotlin-native-performance")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-parcelize` plugin implemented by [org.jetbrains.kotlin.gradle.internal.ParcelizeSubplugin]. */ internal val `PluginDependenciesSpec`.`kotlin-parcelize`: PluginDependencySpec get() = this.id("kotlin-parcelize")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformAndroidPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-android`: PluginDependencySpec get() = this.id("kotlin-platform-android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-common` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformCommonPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-common`: PluginDependencySpec get() = this.id("kotlin-platform-common")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJsPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-js`: PluginDependencySpec get() = this.id("kotlin-platform-js")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-platform-jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin]. */ internal val `PluginDependenciesSpec`.`kotlin-platform-jvm`: PluginDependencySpec get() = this.id("kotlin-platform-jvm")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin-scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin]. */ internal val `PluginDependenciesSpec`.`kotlin-scripting`: PluginDependencySpec get() = this.id("kotlin-scripting")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `kotlin` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapper]. */ internal val `PluginDependenciesSpec`.`kotlin`: PluginDependencySpec get() = this.id("kotlin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.antlr` plugin implemented by [org.gradle.api.plugins.antlr.AntlrPlugin]. */ internal val `OrgGradlePluginGroup`.`antlr`: PluginDependencySpec get() = plugins.id("org.gradle.antlr")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.application` plugin implemented by [org.gradle.api.plugins.ApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`application`: PluginDependencySpec get() = plugins.id("org.gradle.application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.assembler-lang` plugin implemented by [org.gradle.language.assembler.plugins.AssemblerLangPlugin]. */ internal val `OrgGradlePluginGroup`.`assembler-lang`: PluginDependencySpec get() = plugins.id("org.gradle.assembler-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.assembler` plugin implemented by [org.gradle.language.assembler.plugins.AssemblerPlugin]. */ internal val `OrgGradlePluginGroup`.`assembler`: PluginDependencySpec get() = plugins.id("org.gradle.assembler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.base` plugin implemented by [org.gradle.api.plugins.BasePlugin]. */ internal val `OrgGradlePluginGroup`.`base`: PluginDependencySpec get() = plugins.id("org.gradle.base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.binary-base` plugin implemented by [org.gradle.platform.base.plugins.BinaryBasePlugin]. */ internal val `OrgGradlePluginGroup`.`binary-base`: PluginDependencySpec get() = plugins.id("org.gradle.binary-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.build-dashboard` plugin implemented by [org.gradle.api.reporting.plugins.BuildDashboardPlugin]. */ internal val `OrgGradlePluginGroup`.`build-dashboard`: PluginDependencySpec get() = plugins.id("org.gradle.build-dashboard")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.build-init` plugin implemented by [org.gradle.buildinit.plugins.BuildInitPlugin]. */ internal val `OrgGradlePluginGroup`.`build-init`: PluginDependencySpec get() = plugins.id("org.gradle.build-init")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.c-lang` plugin implemented by [org.gradle.language.c.plugins.CLangPlugin]. */ internal val `OrgGradlePluginGroup`.`c-lang`: PluginDependencySpec get() = plugins.id("org.gradle.c-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.c` plugin implemented by [org.gradle.language.c.plugins.CPlugin]. */ internal val `OrgGradlePluginGroup`.`c`: PluginDependencySpec get() = plugins.id("org.gradle.c")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.checkstyle` plugin implemented by [org.gradle.api.plugins.quality.CheckstylePlugin]. */ internal val `OrgGradlePluginGroup`.`checkstyle`: PluginDependencySpec get() = plugins.id("org.gradle.checkstyle")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.clang-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.ClangCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`clang-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.clang-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.codenarc` plugin implemented by [org.gradle.api.plugins.quality.CodeNarcPlugin]. */ internal val `OrgGradlePluginGroup`.`codenarc`: PluginDependencySpec get() = plugins.id("org.gradle.codenarc")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.component-base` plugin implemented by [org.gradle.platform.base.plugins.ComponentBasePlugin]. */ internal val `OrgGradlePluginGroup`.`component-base`: PluginDependencySpec get() = plugins.id("org.gradle.component-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.component-model-base` plugin implemented by [org.gradle.language.base.plugins.ComponentModelBasePlugin]. */ internal val `OrgGradlePluginGroup`.`component-model-base`: PluginDependencySpec get() = plugins.id("org.gradle.component-model-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-application` plugin implemented by [org.gradle.language.cpp.plugins.CppApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-application`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-lang` plugin implemented by [org.gradle.language.cpp.plugins.CppLangPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-lang`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-library` plugin implemented by [org.gradle.language.cpp.plugins.CppLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-library`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-unit-test` plugin implemented by [org.gradle.nativeplatform.test.cpp.plugins.CppUnitTestPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-unit-test`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-unit-test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp` plugin implemented by [org.gradle.language.cpp.plugins.CppPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp`: PluginDependencySpec get() = plugins.id("org.gradle.cpp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cunit-test-suite` plugin implemented by [org.gradle.nativeplatform.test.cunit.plugins.CUnitPlugin]. */ internal val `OrgGradlePluginGroup`.`cunit-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.cunit-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cunit` plugin implemented by [org.gradle.nativeplatform.test.cunit.plugins.CUnitConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`cunit`: PluginDependencySpec get() = plugins.id("org.gradle.cunit")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.distribution` plugin implemented by [org.gradle.api.distribution.plugins.DistributionPlugin]. */ internal val `OrgGradlePluginGroup`.`distribution`: PluginDependencySpec get() = plugins.id("org.gradle.distribution")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.ear` plugin implemented by [org.gradle.plugins.ear.EarPlugin]. */ internal val `OrgGradlePluginGroup`.`ear`: PluginDependencySpec get() = plugins.id("org.gradle.ear")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.eclipse-wtp` plugin implemented by [org.gradle.plugins.ide.eclipse.EclipseWtpPlugin]. */ internal val `OrgGradlePluginGroup`.`eclipse-wtp`: PluginDependencySpec get() = plugins.id("org.gradle.eclipse-wtp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.eclipse` plugin implemented by [org.gradle.plugins.ide.eclipse.EclipsePlugin]. */ internal val `OrgGradlePluginGroup`.`eclipse`: PluginDependencySpec get() = plugins.id("org.gradle.eclipse")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.gcc-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.GccCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`gcc-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.gcc-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.google-test-test-suite` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestPlugin]. */ internal val `OrgGradlePluginGroup`.`google-test-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.google-test-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.google-test` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`google-test`: PluginDependencySpec get() = plugins.id("org.gradle.google-test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy-base` plugin implemented by [org.gradle.api.plugins.GroovyBasePlugin]. */ internal val `OrgGradlePluginGroup`.`groovy-base`: PluginDependencySpec get() = plugins.id("org.gradle.groovy-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.internal.precompiled.PrecompiledGroovyPluginsPlugin]. */ internal val `OrgGradlePluginGroup`.`groovy-gradle-plugin`: PluginDependencySpec get() = plugins.id("org.gradle.groovy-gradle-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy` plugin implemented by [org.gradle.api.plugins.GroovyPlugin]. */ internal val `OrgGradlePluginGroup`.`groovy`: PluginDependencySpec get() = plugins.id("org.gradle.groovy")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.help-tasks` plugin implemented by [org.gradle.api.plugins.HelpTasksPlugin]. */ internal val `OrgGradlePluginGroup`.`help-tasks`: PluginDependencySpec get() = plugins.id("org.gradle.help-tasks")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.idea` plugin implemented by [org.gradle.plugins.ide.idea.IdeaPlugin]. */ internal val `OrgGradlePluginGroup`.`idea`: PluginDependencySpec get() = plugins.id("org.gradle.idea")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.ivy-publish` plugin implemented by [org.gradle.api.publish.ivy.plugins.IvyPublishPlugin]. */ internal val `OrgGradlePluginGroup`.`ivy-publish`: PluginDependencySpec get() = plugins.id("org.gradle.ivy-publish")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jacoco-report-aggregation` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoReportAggregationPlugin]. */ internal val `OrgGradlePluginGroup`.`jacoco-report-aggregation`: PluginDependencySpec get() = plugins.id("org.gradle.jacoco-report-aggregation")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jacoco` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoPlugin]. */ internal val `OrgGradlePluginGroup`.`jacoco`: PluginDependencySpec get() = plugins.id("org.gradle.jacoco")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-base` plugin implemented by [org.gradle.api.plugins.JavaBasePlugin]. */ internal val `OrgGradlePluginGroup`.`java-base`: PluginDependencySpec get() = plugins.id("org.gradle.java-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin]. */ internal val `OrgGradlePluginGroup`.`java-gradle-plugin`: PluginDependencySpec get() = plugins.id("org.gradle.java-gradle-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-library-distribution` plugin implemented by [org.gradle.api.plugins.JavaLibraryDistributionPlugin]. */ internal val `OrgGradlePluginGroup`.`java-library-distribution`: PluginDependencySpec get() = plugins.id("org.gradle.java-library-distribution")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-library` plugin implemented by [org.gradle.api.plugins.JavaLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`java-library`: PluginDependencySpec get() = plugins.id("org.gradle.java-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-platform` plugin implemented by [org.gradle.api.plugins.JavaPlatformPlugin]. */ internal val `OrgGradlePluginGroup`.`java-platform`: PluginDependencySpec get() = plugins.id("org.gradle.java-platform")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-test-fixtures` plugin implemented by [org.gradle.api.plugins.JavaTestFixturesPlugin]. */ internal val `OrgGradlePluginGroup`.`java-test-fixtures`: PluginDependencySpec get() = plugins.id("org.gradle.java-test-fixtures")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java` plugin implemented by [org.gradle.api.plugins.JavaPlugin]. */ internal val `OrgGradlePluginGroup`.`java`: PluginDependencySpec get() = plugins.id("org.gradle.java")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jdk-toolchains` plugin implemented by [org.gradle.api.plugins.JdkToolchainsPlugin]. */ internal val `OrgGradlePluginGroup`.`jdk-toolchains`: PluginDependencySpec get() = plugins.id("org.gradle.jdk-toolchains")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-ecosystem` plugin implemented by [org.gradle.api.plugins.JvmEcosystemPlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-ecosystem`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-ecosystem")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-test-suite` plugin implemented by [org.gradle.api.plugins.JvmTestSuitePlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-toolchain-management` plugin implemented by [org.gradle.api.plugins.JvmToolchainManagementPlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-toolchain-management`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-toolchain-management")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-toolchains` plugin implemented by [org.gradle.api.plugins.JvmToolchainsPlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-toolchains`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-toolchains")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.language-base` plugin implemented by [org.gradle.language.base.plugins.LanguageBasePlugin]. */ internal val `OrgGradlePluginGroup`.`language-base`: PluginDependencySpec get() = plugins.id("org.gradle.language-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.lifecycle-base` plugin implemented by [org.gradle.language.base.plugins.LifecycleBasePlugin]. */ internal val `OrgGradlePluginGroup`.`lifecycle-base`: PluginDependencySpec get() = plugins.id("org.gradle.lifecycle-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.maven-publish` plugin implemented by [org.gradle.api.publish.maven.plugins.MavenPublishPlugin]. */ internal val `OrgGradlePluginGroup`.`maven-publish`: PluginDependencySpec get() = plugins.id("org.gradle.maven-publish")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.microsoft-visual-cpp-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.MicrosoftVisualCppCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`microsoft-visual-cpp-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.microsoft-visual-cpp-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.native-component-model` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentModelPlugin]. */ internal val `OrgGradlePluginGroup`.`native-component-model`: PluginDependencySpec get() = plugins.id("org.gradle.native-component-model")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.native-component` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentPlugin]. */ internal val `OrgGradlePluginGroup`.`native-component`: PluginDependencySpec get() = plugins.id("org.gradle.native-component")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-c-lang` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCLangPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-c-lang`: PluginDependencySpec get() = plugins.id("org.gradle.objective-c-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-c` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-c`: PluginDependencySpec get() = plugins.id("org.gradle.objective-c")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-cpp-lang` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppLangPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-cpp-lang`: PluginDependencySpec get() = plugins.id("org.gradle.objective-cpp-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-cpp` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-cpp`: PluginDependencySpec get() = plugins.id("org.gradle.objective-cpp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.pmd` plugin implemented by [org.gradle.api.plugins.quality.PmdPlugin]. */ internal val `OrgGradlePluginGroup`.`pmd`: PluginDependencySpec get() = plugins.id("org.gradle.pmd")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.project-report` plugin implemented by [org.gradle.api.plugins.ProjectReportsPlugin]. */ internal val `OrgGradlePluginGroup`.`project-report`: PluginDependencySpec get() = plugins.id("org.gradle.project-report")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.project-reports` plugin implemented by [org.gradle.api.plugins.ProjectReportsPlugin]. */ internal val `OrgGradlePluginGroup`.`project-reports`: PluginDependencySpec get() = plugins.id("org.gradle.project-reports")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.publishing` plugin implemented by [org.gradle.api.publish.plugins.PublishingPlugin]. */ internal val `OrgGradlePluginGroup`.`publishing`: PluginDependencySpec get() = plugins.id("org.gradle.publishing")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.reporting-base` plugin implemented by [org.gradle.api.plugins.ReportingBasePlugin]. */ internal val `OrgGradlePluginGroup`.`reporting-base`: PluginDependencySpec get() = plugins.id("org.gradle.reporting-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.scala-base` plugin implemented by [org.gradle.api.plugins.scala.ScalaBasePlugin]. */ internal val `OrgGradlePluginGroup`.`scala-base`: PluginDependencySpec get() = plugins.id("org.gradle.scala-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.scala` plugin implemented by [org.gradle.api.plugins.scala.ScalaPlugin]. */ internal val `OrgGradlePluginGroup`.`scala`: PluginDependencySpec get() = plugins.id("org.gradle.scala")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.signing` plugin implemented by [org.gradle.plugins.signing.SigningPlugin]. */ internal val `OrgGradlePluginGroup`.`signing`: PluginDependencySpec get() = plugins.id("org.gradle.signing")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.standard-tool-chains` plugin implemented by [org.gradle.nativeplatform.toolchain.internal.plugins.StandardToolChainsPlugin]. */ internal val `OrgGradlePluginGroup`.`standard-tool-chains`: PluginDependencySpec get() = plugins.id("org.gradle.standard-tool-chains")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swift-application` plugin implemented by [org.gradle.language.swift.plugins.SwiftApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`swift-application`: PluginDependencySpec get() = plugins.id("org.gradle.swift-application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swift-library` plugin implemented by [org.gradle.language.swift.plugins.SwiftLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`swift-library`: PluginDependencySpec get() = plugins.id("org.gradle.swift-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swiftpm-export` plugin implemented by [org.gradle.swiftpm.plugins.SwiftPackageManagerExportPlugin]. */ internal val `OrgGradlePluginGroup`.`swiftpm-export`: PluginDependencySpec get() = plugins.id("org.gradle.swiftpm-export")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.test-report-aggregation` plugin implemented by [org.gradle.api.plugins.TestReportAggregationPlugin]. */ internal val `OrgGradlePluginGroup`.`test-report-aggregation`: PluginDependencySpec get() = plugins.id("org.gradle.test-report-aggregation")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.test-suite-base` plugin implemented by [org.gradle.testing.base.plugins.TestSuiteBasePlugin]. */ internal val `OrgGradlePluginGroup`.`test-suite-base`: PluginDependencySpec get() = plugins.id("org.gradle.test-suite-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.version-catalog` plugin implemented by [org.gradle.api.plugins.catalog.VersionCatalogPlugin]. */ internal val `OrgGradlePluginGroup`.`version-catalog`: PluginDependencySpec get() = plugins.id("org.gradle.version-catalog")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.visual-studio` plugin implemented by [org.gradle.ide.visualstudio.plugins.VisualStudioPlugin]. */ internal val `OrgGradlePluginGroup`.`visual-studio`: PluginDependencySpec get() = plugins.id("org.gradle.visual-studio")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.war` plugin implemented by [org.gradle.api.plugins.WarPlugin]. */ internal val `OrgGradlePluginGroup`.`war`: PluginDependencySpec get() = plugins.id("org.gradle.war")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.windows-resource-script` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourceScriptPlugin]. */ internal val `OrgGradlePluginGroup`.`windows-resource-script`: PluginDependencySpec get() = plugins.id("org.gradle.windows-resource-script")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.windows-resources` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourcesPlugin]. */ internal val `OrgGradlePluginGroup`.`windows-resources`: PluginDependencySpec get() = plugins.id("org.gradle.windows-resources")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.wrapper` plugin implemented by [org.gradle.buildinit.plugins.WrapperPlugin]. */ internal val `OrgGradlePluginGroup`.`wrapper`: PluginDependencySpec get() = plugins.id("org.gradle.wrapper")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.xcode` plugin implemented by [org.gradle.ide.xcode.plugins.XcodePlugin]. */ internal val `OrgGradlePluginGroup`.`xcode`: PluginDependencySpec get() = plugins.id("org.gradle.xcode")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.xctest` plugin implemented by [org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`xctest`: PluginDependencySpec get() = plugins.id("org.gradle.xctest")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`android`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinJsPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`js`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.js")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`jvm`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.jvm")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.kapt` plugin implemented by [org.jetbrains.kotlin.gradle.internal.Kapt3GradleSubplugin]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`kapt`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.kapt")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.multiplatform` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinMultiplatformPluginWrapper]. */ internal val `OrgJetbrainsKotlinPluginGroup`.`multiplatform`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.multiplatform")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.native.cocoapods` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.cocoapods.KotlinCocoapodsPlugin]. */ internal val `OrgJetbrainsKotlinNativePluginGroup`.`cocoapods`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.native.cocoapods")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.native.performance` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.performance.KotlinPerformancePlugin]. */ internal val `OrgJetbrainsKotlinNativePluginGroup`.`performance`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.native.performance")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.android` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformAndroidPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`android`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.android")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.common` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformCommonPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`common`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.common")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.js` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJsPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`js`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.js")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.platform.jvm` plugin implemented by [org.jetbrains.kotlin.gradle.plugin.KotlinPlatformJvmPlugin]. */ internal val `OrgJetbrainsKotlinPlatformPluginGroup`.`jvm`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.platform.jvm")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.plugin.parcelize` plugin implemented by [org.jetbrains.kotlin.gradle.internal.ParcelizeSubplugin]. */ internal val `OrgJetbrainsKotlinPluginPluginGroup`.`parcelize`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.plugin.parcelize")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.jetbrains.kotlin.plugin.scripting` plugin implemented by [org.jetbrains.kotlin.gradle.scripting.internal.ScriptingGradleSubplugin]. */ internal val `OrgJetbrainsKotlinPluginPluginGroup`.`scripting`: PluginDependencySpec get() = plugins.id("org.jetbrains.kotlin.plugin.scripting")</ID>
    <ID>TopLevelPropertyNaming:Title.kt$const val SUGGESTIONS_LIMIT = 10</ID>
    <ID>TopLevelPropertyNaming:ZipUtils.kt$private const val MODE_READ = "r"</ID>
    <ID>TopLevelPropertyNaming:ZipUtils.kt$private const val MODE_WRITE = "w"</ID>
    <ID>UnstableCollections:BudgetModal.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:BudgetModal.kt$List&lt;UUID&gt;</ID>
    <ID>UnstableCollections:BudgetScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:BudgetScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:BudgetScreen.kt$List&lt;DisplayBudget&gt;</ID>
    <ID>UnstableCollections:CSVViewModel.kt$CSVViewModel$List&lt;CSVRow&gt;?</ID>
    <ID>UnstableCollections:CategoriesScreen.kt$List&lt;SortOrder&gt;</ID>
    <ID>UnstableCollections:CategoryCharts.kt$List&lt;CategoryValues&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;CategoryValues&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;IncomeExpenseChartPoint&gt;</ID>
    <ID>UnstableCollections:ChartsScreen.kt$List&lt;SingleChartPoint&gt;</ID>
    <ID>UnstableCollections:ChooseCategoryModal.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ChooseIconModal.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:CustomerJourney.kt$List&lt;CustomerJourneyCardData&gt;</ID>
    <ID>UnstableCollections:EditBottomSheet.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:EditPlannedScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:EditPlannedScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:EditTransactionScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:EditTransactionScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:EditTransactionScreen.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:FilterOverlay.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:FilterOverlay.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:HomeTab.kt$List&lt;CustomerJourneyCardData&gt;</ID>
    <ID>UnstableCollections:HomeTab.kt$List&lt;TransactionHistoryItem&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;Transaction&gt;</ID>
    <ID>UnstableCollections:ItemStatisticScreen.kt$List&lt;TransactionHistoryItem&gt;</ID>
    <ID>UnstableCollections:IvyLineChart.kt$List&lt;Function&gt;</ID>
    <ID>UnstableCollections:IvyLineChart.kt$List&lt;Value&gt;</ID>
    <ID>UnstableCollections:LoanDetailsScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:LoanDetailsScreen.kt$List&lt;DisplayLoanRecord&gt;</ID>
    <ID>UnstableCollections:LoanModal.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:LoanRecordModal.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:OnboardingAccounts.kt$List&lt;AccountBalance&gt;</ID>
    <ID>UnstableCollections:OnboardingAccounts.kt$List&lt;CreateAccountData&gt;</ID>
    <ID>UnstableCollections:OnboardingCategories.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:OnboardingCategories.kt$List&lt;CreateCategoryData&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;AccountBalance&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;CreateAccountData&gt;</ID>
    <ID>UnstableCollections:OnboardingScreen.kt$List&lt;CreateCategoryData&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Budget&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Loan&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;Plan&gt;</ID>
    <ID>UnstableCollections:PaywallScreen.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:PieChart.kt$List&lt;CategoryAmount&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentCard.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentCard.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsLazyColumn.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsLazyColumn.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsLazyColumn.kt$List&lt;PlannedPaymentRule&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:PlannedPaymentsScreen.kt$List&lt;PlannedPaymentRule&gt;</ID>
    <ID>UnstableCollections:PlansSheet.kt$List&lt;Plan&gt;</ID>
    <ID>UnstableCollections:PlansSheet.kt$List&lt;String&gt;</ID>
    <ID>UnstableCollections:ReorderModal.kt$List&lt;Any&gt;</ID>
    <ID>UnstableCollections:ReorderModal.kt$List&lt;T&gt;</ID>
    <ID>UnstableCollections:SearchScreen.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:SearchScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:SearchScreen.kt$List&lt;TransactionHistoryItem&gt;</ID>
    <ID>UnstableCollections:Suggestions.kt$List&lt;Any&gt;</ID>
    <ID>UnstableCollections:Title.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:TransactionCard.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:TransactionCard.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:Utils.kt$List&lt;Account&gt;</ID>
    <ID>UnstableCollections:Utils.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:WalletCharts.kt$List&lt;SingleChartPoint&gt;</ID>
    <ID>UnstableCollections:WrapContentRow.kt$List&lt;T&gt;</ID>
    <ID>UnusedParameter:AccountCharts.kt$period: ChartPeriod</ID>
    <ID>UnusedParameter:AccountsTab.kt$onLongClick: () -&gt; Unit</ID>
    <ID>UnusedParameter:AccountsTab.kt$screen: Main</ID>
    <ID>UnusedParameter:AccountsViewModel.kt$AccountsViewModel$event: AccountsUpdatedEvent</ID>
    <ID>UnusedParameter:BalanceScreen.kt$screen: BalanceScreen</ID>
    <ID>UnusedParameter:BudgetScreen.kt$screen: BudgetScreen</ID>
    <ID>UnusedParameter:CategoriesScreen.kt$onLongClick: () -&gt; Unit</ID>
    <ID>UnusedParameter:CategoriesScreen.kt$screen: Categories</ID>
    <ID>UnusedParameter:CategoryCharts.kt$countChart: Boolean</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categories: List&lt;Category&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryExpenseCount: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryExpenseValues: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryIncomeCount: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$categoryIncomeValues: List&lt;CategoryValues&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$incomeExpenseChart: List&lt;IncomeExpenseChartPoint&gt; = emptyList()</ID>
    <ID>UnusedParameter:ChartsScreen.kt$onLoadCategory: (Category) -&gt; Unit = {}</ID>
    <ID>UnusedParameter:ChartsScreen.kt$onRemoveCategory: (Category) -&gt; Unit = {}</ID>
    <ID>UnusedParameter:ChartsScreen.kt$screen: Charts</ID>
    <ID>UnusedParameter:ChartsViewModel.kt$ChartsViewModel$calculateValue: suspend (range: FromToTimeRange) -&gt; Double</ID>
    <ID>UnusedParameter:ChartsViewModel.kt$ChartsViewModel$category: Category</ID>
    <ID>UnusedParameter:ChartsViewModel.kt$ChartsViewModel$period: ChartPeriod</ID>
    <ID>UnusedParameter:DateExt.kt$secondsLabel: String = "s"</ID>
    <ID>UnusedParameter:DonateScreen.kt$screen: DonateScreen</ID>
    <ID>UnusedParameter:FileUtil.kt$context: Context</ID>
    <ID>UnusedParameter:FileUtil.kt$directoryType: String</ID>
    <ID>UnusedParameter:HomeHeader.kt$bufferDiff: Double</ID>
    <ID>UnusedParameter:HomeHeader.kt$period: TimePeriod</ID>
    <ID>UnusedParameter:HomeMoreMenu.kt$onCurrencyClick: () -&gt; Unit</ID>
    <ID>UnusedParameter:HomeTab.kt$screen: Main</ID>
    <ID>UnusedParameter:HomeViewModel.kt$HomeViewModel$input: HomeState</ID>
    <ID>UnusedParameter:ItemStatisticScreen.kt$itemColor: Color</ID>
    <ID>UnusedParameter:IvyBasicTextField.kt$textColor: Color = UI.colors.pureInverse</ID>
    <ID>UnusedParameter:IvyLineChart.kt$cellSize: Float</ID>
    <ID>UnusedParameter:IvyLineChart.kt$chartWidth: Float</ID>
    <ID>UnusedParameter:IvyLineChart.kt$offsetRight: Float</ID>
    <ID>UnusedParameter:LoanDetailsScreen.kt$baseCurrency: String = ""</ID>
    <ID>UnusedParameter:LoanDetailsScreen.kt$loanRecords: List&lt;LoanRecord&gt; = emptyList()</ID>
    <ID>UnusedParameter:LoansScreen.kt$screen: Loans</ID>
    <ID>UnusedParameter:OnboardingSplashLogin.kt$onLoginWithGoogle: () -&gt; Unit</ID>
    <ID>UnusedParameter:OnboardingSplashLogin.kt$opGoogleSignIn: OpResult&lt;Unit&gt;?</ID>
    <ID>UnusedParameter:OnboardingViewModel.kt$OnboardingViewModel$idToken: String</ID>
    <ID>UnusedParameter:ParseFields.kt$metadata: Unit</ID>
    <ID>UnusedParameter:PaywallScreen.kt$paywallReason: PaywallReason?</ID>
    <ID>UnusedParameter:PaywallViewModel.kt$PaywallViewModel$plan: Plan?</ID>
    <ID>UnusedParameter:PlannedPaymentsLazyColumn.kt$listState: LazyListState</ID>
    <ID>UnusedParameter:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$syncTransaction: Boolean = true</ID>
    <ID>UnusedParameter:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$screen: PlannedPayments</ID>
    <ID>UnusedParameter:ReportScreen.kt$screen: Report</ID>
    <ID>UnusedParameter:SearchScreen.kt$screen: Search</ID>
    <ID>UnusedParameter:SettingsScreen.kt$onLogin: () -&gt; Unit</ID>
    <ID>UnusedParameter:SettingsScreen.kt$screen: Settings</ID>
    <ID>UnusedParameter:Shapes.kt$modifier: Modifier = Modifier</ID>
    <ID>UnusedParameter:TestScreen.kt$screen: Test</ID>
    <ID>UnusedParameter:Title.kt$initialTransactionId: UUID?</ID>
    <ID>UnusedParameter:WalletCharts.kt$baseCurrencyCode: String</ID>
    <ID>UnusedParameter:WalletCharts.kt$walletDAOs: WalletDAOs</ID>
    <ID>UnusedPrivateMember:EditTransactionViewModel.kt$EditTransactionViewModel$private suspend fun transferToAmount( amount: Double ): Double?</ID>
    <ID>UnusedPrivateMember:Migration109to110_PlannedPayments.kt$Migration109to110_PlannedPayments$private fun SupportSQLiteDatabase.addSyncColumns(tableName: String)</ID>
    <ID>UnusedPrivateMember:OnboardingSplashLogin.kt$@Composable private fun LoginWithGoogleExplanation()</ID>
    <ID>UnusedPrivateMember:PlansSheet.kt$@Composable private fun BoxWithConstraintsScope.BottomBar( Action: @Composable () -&gt; Unit, setBottomBarHeight: (Int) -&gt; Unit, onClose: () -&gt; Unit, )</ID>
    <ID>UnusedPrivateMember:SettingsScreen.kt$@Composable private fun Premium()</ID>
    <ID>UnusedPrivateMember:TransactionViewModel.kt$TransactionViewModel$private fun isEditMode(): Boolean</ID>
    <ID>UnusedPrivateMember:TransactionViewModel.kt$TransactionViewModel$private suspend fun createNewTransaction(state: TrnState.NewTransaction)</ID>
    <ID>UnusedPrivateProperty:AccountCreator.kt$AccountCreator$val newAccount = ioThread { val account = Account( name = name, currency = data.currency, color = data.color.toArgb(), icon = data.icon, includeInBalance = data.includeBalance, orderNum = accountDao.findMaxOrderNum().nextOrderNum(), isSynced = false ) accountDao.save(account.toEntity()) accountLogic.adjustBalance( account = account, actualBalance = 0.0, newBalance = data.balance ) account }</ID>
    <ID>UnusedPrivateProperty:AccountModal.kt$val context = LocalContext.current</ID>
    <ID>UnusedPrivateProperty:AccountsViewModel.kt$AccountsViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:AccountsViewModel.kt$AccountsViewModel$private val walletDAOs: WalletDAOs</ID>
    <ID>UnusedPrivateProperty:CategoryCharts.kt$val value = functions.getOrNull(it.functionIndex)?.values?.get(it.valueIndex) ?: return@let</ID>
    <ID>UnusedPrivateProperty:ChartsViewModel.kt$ChartsViewModel$private val categoryDao: CategoryDao</ID>
    <ID>UnusedPrivateProperty:ChartsViewModel.kt$ChartsViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:DateExt.kt$val seconds = TimeUnit.MILLISECONDS.toSeconds(timeLeftAfterCalculations)</ID>
    <ID>UnusedPrivateProperty:HomeTab.kt$val nav = navigation()</ID>
    <ID>UnusedPrivateProperty:HomeViewModel.kt$HomeViewModel$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:IvyBilling.kt$IvyBilling.Companion$private const val LIFETIME_V1 = "ivy_wallet_lifetime_v1"</ID>
    <ID>UnusedPrivateProperty:IvyLineChart.kt$val marginFromX = 4.dp.toPx()</ID>
    <ID>UnusedPrivateProperty:LoanDetailsViewModel.kt$LoanDetailsViewModel$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:LoanDetailsViewModel.kt$LoanDetailsViewModel$private val ivyContext: IvyWalletCtx</ID>
    <ID>UnusedPrivateProperty:LoanDetailsViewModel.kt$LoanDetailsViewModel$private val loanDao: LoanDao</ID>
    <ID>UnusedPrivateProperty:OnboardingViewModel.kt$OnboardingViewModel$exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:PlannedPaymentsViewModel.kt$PlannedPaymentsViewModel$private val categoryDao: CategoryDao</ID>
    <ID>UnusedPrivateProperty:ReportScreen.kt$val ivyContext = ivyWalletCtx()</ID>
    <ID>UnusedPrivateProperty:ReportScreen.kt$val listState = rememberLazyListState()</ID>
    <ID>UnusedPrivateProperty:ReportViewModel.kt$ReportViewModel$private val settingsDao: SettingsDao</ID>
    <ID>UnusedPrivateProperty:SearchScreen.kt$val ivyContext = ivyWalletCtx()</ID>
    <ID>UnusedPrivateProperty:SearchScreen.kt$val nav = navigation()</ID>
    <ID>UnusedPrivateProperty:SettingsViewModel.kt$SettingsViewModel$private val nav: Navigation</ID>
    <ID>UnusedPrivateProperty:SettingsViewModel.kt$SettingsViewModel$private val userDao: UserDao</ID>
    <ID>UnusedPrivateProperty:TransactionReminderLogic.kt$TransactionReminderLogic.Companion$private const val UNIQUE_WORK_NAME_V1 = "transaction_reminder_work"</ID>
    <ID>UnusedPrivateProperty:TransactionViewModel.kt$TransactionViewModel$private val saveTrnLocallyAct: SaveTrnLocallyAct</ID>
    <ID>UnusedPrivateProperty:WalletAccountLogic.kt$WalletAccountLogic$private val accountDao: AccountDao</ID>
    <ID>UnusedPrivateProperty:WalletAccountLogic.kt$WalletAccountLogic$private val exchangeRatesLogic: ExchangeRatesLogic</ID>
    <ID>UnusedPrivateProperty:WalletAccountLogic.kt$WalletAccountLogic$private val settingsDao: SettingsDao</ID>
    <ID>UseCheckOrError:IvyContext.kt$IvyContext$throw IllegalStateException("screenHeight not initialized")</ID>
    <ID>UseCheckOrError:IvyContext.kt$IvyContext$throw IllegalStateException("screenWidth not initialized")</ID>
    <ID>UseCheckOrError:SharedPrefs.kt$SharedPrefs$throw IllegalStateException("SharePrefs key '$key' cannot be null")</ID>
    <ID>UseCheckOrError:ZipUtils.kt$throw IllegalStateException("Location file must be directory or not exist")</ID>
    <ID>UtilityClassWithPublicConstructor:WidgetBase.kt$WidgetBase</ID>
    <ID>ViewModelForwarding:GitHubBackupCard.kt$GitHubBackupStatus(viewModel)</ID>
    <ID>ViewModelForwarding:GitHubBackupCard.kt$LastBackup(viewModel)</ID>
    <ID>ViewModelInjection:AccountsTab.kt$viewModel</ID>
    <ID>ViewModelInjection:BalanceScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:BudgetScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:CSVScreen.kt$onboardingViewModel</ID>
    <ID>ViewModelInjection:CSVScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:CategoriesScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ChartsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:DonateScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:EditPlannedScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:EditTransactionScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ExchangeRatesScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:GitHubBackupCard.kt$viewModel</ID>
    <ID>ViewModelInjection:GitHubBackupScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:HomeTab.kt$viewModel</ID>
    <ID>ViewModelInjection:ImportScreen.kt$onboardingViewModel</ID>
    <ID>ViewModelInjection:ImportScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ItemStatisticScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:LoanDetailsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:LoansScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:MainScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:OnboardingScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:PaywallScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:PieChartStatisticScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:PlannedPaymentsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ReportScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:SearchScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:ServerStopScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:SettingsScreen.kt$viewModel</ID>
    <ID>ViewModelInjection:TestScreen.kt$viewModel</ID>
    <ID>WildcardImport:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors32ikgp1isdd8mwexzgbe6rirl.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors4ymijgaek646mzru18sdmblu7.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors5x03zd2mf47s5vj1qv3jvhdru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors6m89nhcqblthog8es93pjkmhg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors72k7tti784t7idmqtg2upvaru.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors7hvycqvau4uyj5knata7lx0yx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsa5ptgikd9fb816fav4742zvaq.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsbtc8iwv8u9b0f38ikfmodj8ns.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorseessl0al0otcsbyqqruvoncpd.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.domain.deprecated.logic.csv.*</ID>
    <ID>WildcardImport:AppModuleDI.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:BackupLogic.kt$import com.google.gson.*</ID>
    <ID>WildcardImport:BackupLogic.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:BufferModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CSVViewModel.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:CSVViewModel.kt$import com.ivy.wallet.ui.csv.domain.*</ID>
    <ID>WildcardImport:CategoryModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:CategoryModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ChooseIconModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ChooseIconModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ComposeExt.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:DateExt.kt$import java.time.*</ID>
    <ID>WildcardImport:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:DetektConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:DetektPluginsConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Dividers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ExchangeRatesViewModel.kt$import kotlinx.coroutines.flow.*</ID>
    <ID>WildcardImport:FileUtil.kt$import java.io.*</ID>
    <ID>WildcardImport:FromToTimeRange.kt$import com.ivy.wallet.utils.*</ID>
    <ID>WildcardImport:HomeViewModel.kt$import com.ivy.wallet.domain.action.viewmodel.home.*</ID>
    <ID>WildcardImport:ImportType.kt$import com.ivy.wallet.ui.csvimport.flow.instructions.*</ID>
    <ID>WildcardImport:ImportType.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:InputField.kt$import com.ivy.design.l0_system.*</ID>
    <ID>WildcardImport:InputField.kt$import com.ivy.design.utils.*</ID>
    <ID>WildcardImport:IvyLineChart.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:IvyLineChart.kt$import androidx.compose.ui.graphics.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import androidx.room.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>WildcardImport:IvyRoomDatabase.kt$import com.ivy.wallet.io.persistence.migration.*</ID>
    <ID>WildcardImport:IvySwitch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:IvySwitch.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:IvyToolbar.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:IvyViewPager.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:IvyViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:IvyWalletCompleteData.kt$import com.ivy.wallet.io.persistence.data.*</ID>
    <ID>WildcardImport:IvyWalletDesign.kt$import com.ivy.design.l0_system.*</ID>
    <ID>WildcardImport:Keyboard.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:LoanDetailsViewModel.kt$import com.ivy.wallet.io.persistence.dao.*</ID>
    <ID>WildcardImport:MainScreen.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:MainScreen.kt$import com.ivy.wallet.ui.*</ID>
    <ID>WildcardImport:OnboardingScreen.kt$import com.ivy.wallet.ui.onboarding.steps.*</ID>
    <ID>WildcardImport:PieChart.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:PieChart.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:PreloadDataLogic.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:ProgressBar.kt$import com.ivy.wallet.ui.theme.*</ID>
    <ID>WildcardImport:ReorderModal.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:ReorderModal.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:ReorderModal.kt$import androidx.recyclerview.widget.ItemTouchHelper.*</ID>
    <ID>WildcardImport:ReportViewModel.kt$import com.ivy.wallet.utils.*</ID>
    <ID>WildcardImport:Spacers.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:Switch.kt$import androidx.compose.foundation.layout.*</ID>
    <ID>WildcardImport:Switch.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:TimePeriod.kt$import com.ivy.wallet.utils.*</ID>
    <ID>WildcardImport:ViewPager.kt$import androidx.compose.runtime.*</ID>
    <ID>WildcardImport:WalletBalanceWidgetContent.kt$import androidx.glance.layout.*</ID>
    <ID>WildcardImport:ZipUtils.kt$import java.io.*</ID>
    <ID>Wrapping:PlannedPaymentsLogic.kt$PlannedPaymentsLogic$-&gt;</ID>
  </CurrentIssues>
</SmellBaseline>
